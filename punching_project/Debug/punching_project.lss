
punching_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000bc  00800100  00005648  000056dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005648  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000037b  008001bc  008001bc  00005798  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00005798  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000057f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000420  00000000  00000000  00005834  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006ef5  00000000  00000000  00005c54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001788  00000000  00000000  0000cb49  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003a6f  00000000  00000000  0000e2d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001310  00000000  00000000  00011d40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001370  00000000  00000000  00013050  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008aed  00000000  00000000  000143c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000728  00000000  00000000  0001cead  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__ctors_end>
       4:	0c 94 00 01 	jmp	0x200	; 0x200 <__bad_interrupt>
       8:	0c 94 00 01 	jmp	0x200	; 0x200 <__bad_interrupt>
       c:	0c 94 00 01 	jmp	0x200	; 0x200 <__bad_interrupt>
      10:	0c 94 00 01 	jmp	0x200	; 0x200 <__bad_interrupt>
      14:	0c 94 00 01 	jmp	0x200	; 0x200 <__bad_interrupt>
      18:	0c 94 00 01 	jmp	0x200	; 0x200 <__bad_interrupt>
      1c:	0c 94 00 01 	jmp	0x200	; 0x200 <__bad_interrupt>
      20:	0c 94 00 01 	jmp	0x200	; 0x200 <__bad_interrupt>
      24:	0c 94 00 01 	jmp	0x200	; 0x200 <__bad_interrupt>
      28:	0c 94 00 01 	jmp	0x200	; 0x200 <__bad_interrupt>
      2c:	0c 94 23 1c 	jmp	0x3846	; 0x3846 <__vector_11>
      30:	0c 94 00 01 	jmp	0x200	; 0x200 <__bad_interrupt>
      34:	0c 94 00 01 	jmp	0x200	; 0x200 <__bad_interrupt>
      38:	0c 94 00 01 	jmp	0x200	; 0x200 <__bad_interrupt>
      3c:	0c 94 00 01 	jmp	0x200	; 0x200 <__bad_interrupt>
      40:	0c 94 00 01 	jmp	0x200	; 0x200 <__bad_interrupt>
      44:	0c 94 00 01 	jmp	0x200	; 0x200 <__bad_interrupt>
      48:	0c 94 61 26 	jmp	0x4cc2	; 0x4cc2 <__vector_18>
      4c:	0c 94 00 01 	jmp	0x200	; 0x200 <__bad_interrupt>
      50:	0c 94 00 01 	jmp	0x200	; 0x200 <__bad_interrupt>
      54:	0c 94 00 01 	jmp	0x200	; 0x200 <__bad_interrupt>
      58:	0c 94 00 01 	jmp	0x200	; 0x200 <__bad_interrupt>
      5c:	0c 94 00 01 	jmp	0x200	; 0x200 <__bad_interrupt>
      60:	0c 94 00 01 	jmp	0x200	; 0x200 <__bad_interrupt>
      64:	0c 94 00 01 	jmp	0x200	; 0x200 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	65 72       	andi	r22, 0x25	; 37
      6a:	72 6f       	ori	r23, 0xF2	; 242
      6c:	72 20       	and	r7, r2
      6e:	77 72       	andi	r23, 0x27	; 39
      70:	69 74       	andi	r22, 0x49	; 73
      72:	69 6e       	ori	r22, 0xE9	; 233
      74:	67 20       	and	r6, r7
      76:	74 6f       	ori	r23, 0xF4	; 244
      78:	20 66       	ori	r18, 0x60	; 96
      7a:	69 6c       	ori	r22, 0xC9	; 201
      7c:	65 0a       	sbc	r6, r21
	...

0000007f <__c.2734>:
      7f:	65 72 72 6f 72 20 73 65 65 6b 69 6e 67 20 6f 6e     error seeking on
      8f:	20 00                                                .

00000091 <__c.2732>:
      91:	65 72 72 6f 72 20 6f 70 65 6e 69 6e 67 20 00        error opening .

000000a0 <__c.2722>:
      a0:	6f 70 65 6e 69 6e 67 20 72 6f 6f 74 20 64 69 72     opening root dir
      b0:	65 63 74 6f 72 79 20 44 6f 6e 65 0a 00              ectory Done..

000000bd <__c.2720>:
      bd:	6f 70 65 6e 69 6e 67 20 72 6f 6f 74 20 64 69 72     opening root dir
      cd:	65 63 74 6f 72 79 20 66 61 69 6c 65 64 0a 00        ectory failed..

000000dc <__c.2718>:
      dc:	6f 70 65 6e 69 6e 67 20 66 69 6c 65 73 79 73 74     opening filesyst
      ec:	65 6d 20 20 53 75 63 63 65 65 64 65 64 2e 0a 00     em  Succeeded...

000000fc <__c.2716>:
      fc:	6f 70 65 6e 69 6e 67 20 66 69 6c 65 73 79 73 74     opening filesyst
     10c:	65 6d 20 66 61 69 6c 65 64 0a 00                    em failed..

00000117 <__c.2714>:
     117:	4f 70 65 6e 69 6e 67 20 70 61 72 74 69 74 69 6f     Opening partitio
     127:	6e 20 53 75 63 63 65 65 64 65 64 2e 0a 00           n Succeeded...

00000135 <__c.2712>:
     135:	6f 70 65 6e 69 6e 67 20 70 61 72 74 69 74 69 6f     opening partitio
     145:	6e 20 66 61 69 6c 65 64 0a 00                       n failed..

0000014f <__c.2710>:
     14f:	4d 4d 43 2f 53 44 20 69 6e 69 74 69 61 6c 69 7a     MMC/SD initializ
     15f:	61 74 69 6f 6e 20 53 75 63 63 65 65 64 65 64 2e     ation Succeeded.
     16f:	0a 00                                               ..

00000171 <__c.2708>:
     171:	4d 4d 43 2f 53 44 20 69 6e 69 74 69 61 6c 69 7a     MMC/SD initializ
     181:	61 74 69 6f 6e 20 66 61 69 6c 65 64 0a 00           ation failed..

0000018f <__c.2697>:
     18f:	65 72 72 6f 72 20 63 72 65 61 74 69 6e 67 20 66     error creating f
     19f:	69 6c 65 3a 20 00                                   ile: .

000001a5 <__c.2695>:
     1a5:	65 72 72 6f 72 20 64 65 6c 65 74 69 6e 67 20 66     error deleting f
     1b5:	69 6c 65 3a 20 00                                   ile: .

000001bb <__c.2656>:
     1bb:	57 65 6c 63 6f 6d 65 2e 2e 2e 00                    Welcome....

000001c6 <__ctors_end>:
     1c6:	11 24       	eor	r1, r1
     1c8:	1f be       	out	0x3f, r1	; 63
     1ca:	cf ef       	ldi	r28, 0xFF	; 255
     1cc:	d8 e0       	ldi	r29, 0x08	; 8
     1ce:	de bf       	out	0x3e, r29	; 62
     1d0:	cd bf       	out	0x3d, r28	; 61

000001d2 <__do_copy_data>:
     1d2:	11 e0       	ldi	r17, 0x01	; 1
     1d4:	a0 e0       	ldi	r26, 0x00	; 0
     1d6:	b1 e0       	ldi	r27, 0x01	; 1
     1d8:	e8 e4       	ldi	r30, 0x48	; 72
     1da:	f6 e5       	ldi	r31, 0x56	; 86
     1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <__do_copy_data+0x10>
     1de:	05 90       	lpm	r0, Z+
     1e0:	0d 92       	st	X+, r0
     1e2:	ac 3b       	cpi	r26, 0xBC	; 188
     1e4:	b1 07       	cpc	r27, r17
     1e6:	d9 f7       	brne	.-10     	; 0x1de <__do_copy_data+0xc>

000001e8 <__do_clear_bss>:
     1e8:	25 e0       	ldi	r18, 0x05	; 5
     1ea:	ac eb       	ldi	r26, 0xBC	; 188
     1ec:	b1 e0       	ldi	r27, 0x01	; 1
     1ee:	01 c0       	rjmp	.+2      	; 0x1f2 <.do_clear_bss_start>

000001f0 <.do_clear_bss_loop>:
     1f0:	1d 92       	st	X+, r1

000001f2 <.do_clear_bss_start>:
     1f2:	a7 33       	cpi	r26, 0x37	; 55
     1f4:	b2 07       	cpc	r27, r18
     1f6:	e1 f7       	brne	.-8      	; 0x1f0 <.do_clear_bss_loop>
     1f8:	0e 94 d5 1c 	call	0x39aa	; 0x39aa <main>
     1fc:	0c 94 22 2b 	jmp	0x5644	; 0x5644 <_exit>

00000200 <__bad_interrupt>:
     200:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000204 <read16>:
 * \param[in] p Pointer from where to read the integer.
 * \returns The 16-bit integer read from memory.
 */
uint16_t read16(const uint8_t* p)
{
    return (((uint16_t) p[1]) << 8) |
     204:	fc 01       	movw	r30, r24
     206:	21 81       	ldd	r18, Z+1	; 0x01
     208:	30 e0       	ldi	r19, 0x00	; 0
     20a:	32 2f       	mov	r19, r18
     20c:	22 27       	eor	r18, r18
     20e:	80 81       	ld	r24, Z
           (((uint16_t) p[0]) << 0);
}
     210:	a9 01       	movw	r20, r18
     212:	48 2b       	or	r20, r24
     214:	ca 01       	movw	r24, r20
     216:	08 95       	ret

00000218 <read32>:
 *
 * \param[in] p Pointer from where to read the integer.
 * \returns The 32-bit integer read from memory.
 */
uint32_t read32(const uint8_t* p)
{
     218:	fc 01       	movw	r30, r24
    return (((uint32_t) p[3]) << 24) |
     21a:	23 81       	ldd	r18, Z+3	; 0x03
     21c:	62 81       	ldd	r22, Z+2	; 0x02
     21e:	86 2f       	mov	r24, r22
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	a0 e0       	ldi	r26, 0x00	; 0
     224:	b0 e0       	ldi	r27, 0x00	; 0
     226:	dc 01       	movw	r26, r24
     228:	99 27       	eor	r25, r25
     22a:	88 27       	eor	r24, r24
     22c:	b2 2b       	or	r27, r18
     22e:	20 81       	ld	r18, Z
     230:	82 2b       	or	r24, r18
     232:	21 81       	ldd	r18, Z+1	; 0x01
     234:	bc 01       	movw	r22, r24
     236:	cd 01       	movw	r24, r26
     238:	72 2b       	or	r23, r18
           (((uint32_t) p[2]) << 16) |
           (((uint32_t) p[1]) <<  8) |
           (((uint32_t) p[0]) <<  0);
}
     23a:	08 95       	ret

0000023c <write16>:
 * \param[in] p Pointer where to write the integer to.
 * \param[in] i The 16-bit integer to write.
 */
void write16(uint8_t* p, uint16_t i)
{
    p[1] = (uint8_t) ((i & 0xff00) >> 8);
     23c:	fc 01       	movw	r30, r24
     23e:	71 83       	std	Z+1, r23	; 0x01
    p[0] = (uint8_t) ((i & 0x00ff) >> 0);
     240:	60 83       	st	Z, r22
     242:	08 95       	ret

00000244 <write32>:
 *
 * \param[in] p Pointer where to write the integer to.
 * \param[in] i The 32-bit integer to write.
 */
void write32(uint8_t* p, uint32_t i)
{
     244:	fc 01       	movw	r30, r24
    p[3] = (uint8_t) ((i & 0xff000000) >> 24);
     246:	73 83       	std	Z+3, r23	; 0x03
    p[2] = (uint8_t) ((i & 0x00ff0000) >> 16);
     248:	62 83       	std	Z+2, r22	; 0x02
    p[1] = (uint8_t) ((i & 0x0000ff00) >>  8);
     24a:	51 83       	std	Z+1, r21	; 0x01
    p[0] = (uint8_t) ((i & 0x000000ff) >>  0);
     24c:	40 83       	st	Z, r20
     24e:	08 95       	ret

00000250 <fat_get_next_cluster>:
        fd->pos_cluster = cluster_num;

    } while(buffer_left > 0); /* check if we are done */

    return buffer_len;
}
     250:	8f 92       	push	r8
     252:	9f 92       	push	r9
     254:	af 92       	push	r10
     256:	bf 92       	push	r11
     258:	cf 92       	push	r12
     25a:	df 92       	push	r13
     25c:	ef 92       	push	r14
     25e:	ff 92       	push	r15
     260:	0f 93       	push	r16
     262:	1f 93       	push	r17
     264:	cf 93       	push	r28
     266:	df 93       	push	r29
     268:	00 d0       	rcall	.+0      	; 0x26a <fat_get_next_cluster+0x1a>
     26a:	00 d0       	rcall	.+0      	; 0x26c <fat_get_next_cluster+0x1c>
     26c:	cd b7       	in	r28, 0x3d	; 61
     26e:	de b7       	in	r29, 0x3e	; 62
     270:	00 97       	sbiw	r24, 0x00	; 0
     272:	09 f4       	brne	.+2      	; 0x276 <fat_get_next_cluster+0x26>
     274:	85 c0       	rjmp	.+266    	; 0x380 <fat_get_next_cluster+0x130>
     276:	42 30       	cpi	r20, 0x02	; 2
     278:	51 05       	cpc	r21, r1
     27a:	61 05       	cpc	r22, r1
     27c:	71 05       	cpc	r23, r1
     27e:	08 f4       	brcc	.+2      	; 0x282 <fat_get_next_cluster+0x32>
     280:	84 c0       	rjmp	.+264    	; 0x38a <fat_get_next_cluster+0x13a>
     282:	fc 01       	movw	r30, r24
     284:	a0 81       	ld	r26, Z
     286:	b1 81       	ldd	r27, Z+1	; 0x01
     288:	18 96       	adiw	r26, 0x08	; 8
     28a:	8c 91       	ld	r24, X
     28c:	18 97       	sbiw	r26, 0x08	; 8
     28e:	8b 30       	cpi	r24, 0x0B	; 11
     290:	09 f0       	breq	.+2      	; 0x294 <fat_get_next_cluster+0x44>
     292:	40 c0       	rjmp	.+128    	; 0x314 <fat_get_next_cluster+0xc4>
     294:	4a 01       	movw	r8, r20
     296:	5b 01       	movw	r10, r22
     298:	24 2f       	mov	r18, r20
     29a:	39 2d       	mov	r19, r9
     29c:	4a 2d       	mov	r20, r10
     29e:	5b 2d       	mov	r21, r11
     2a0:	60 e0       	ldi	r22, 0x00	; 0
     2a2:	70 e0       	ldi	r23, 0x00	; 0
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	02 e0       	ldi	r16, 0x02	; 2
     2aa:	0e 94 2f 27 	call	0x4e5e	; 0x4e5e <__ashldi3>
     2ae:	a2 84       	ldd	r10, Z+10	; 0x0a
     2b0:	b3 84       	ldd	r11, Z+11	; 0x0b
     2b2:	c4 84       	ldd	r12, Z+12	; 0x0c
     2b4:	d5 84       	ldd	r13, Z+13	; 0x0d
     2b6:	e6 84       	ldd	r14, Z+14	; 0x0e
     2b8:	f7 84       	ldd	r15, Z+15	; 0x0f
     2ba:	00 89       	ldd	r16, Z+16	; 0x10
     2bc:	11 89       	ldd	r17, Z+17	; 0x11
     2be:	0e 94 66 27 	call	0x4ecc	; 0x4ecc <__adddi3>
     2c2:	ed 91       	ld	r30, X+
     2c4:	fc 91       	ld	r31, X
     2c6:	68 94       	set
     2c8:	ee 24       	eor	r14, r14
     2ca:	e2 f8       	bld	r14, 2
     2cc:	f1 2c       	mov	r15, r1
     2ce:	8e 01       	movw	r16, r28
     2d0:	0f 5f       	subi	r16, 0xFF	; 255
     2d2:	1f 4f       	sbci	r17, 0xFF	; 255
     2d4:	09 95       	icall
     2d6:	88 23       	and	r24, r24
     2d8:	c1 f0       	breq	.+48     	; 0x30a <fat_get_next_cluster+0xba>
     2da:	c9 80       	ldd	r12, Y+1	; 0x01
     2dc:	da 80       	ldd	r13, Y+2	; 0x02
     2de:	eb 80       	ldd	r14, Y+3	; 0x03
     2e0:	fc 80       	ldd	r15, Y+4	; 0x04
     2e2:	c1 14       	cp	r12, r1
     2e4:	d1 04       	cpc	r13, r1
     2e6:	e1 04       	cpc	r14, r1
     2e8:	f1 04       	cpc	r15, r1
     2ea:	79 f0       	breq	.+30     	; 0x30a <fat_get_next_cluster+0xba>
     2ec:	d7 01       	movw	r26, r14
     2ee:	c6 01       	movw	r24, r12
     2f0:	80 5f       	subi	r24, 0xF0	; 240
     2f2:	9f 4f       	sbci	r25, 0xFF	; 255
     2f4:	af 4f       	sbci	r26, 0xFF	; 255
     2f6:	bf 40       	sbci	r27, 0x0F	; 15
     2f8:	40 97       	sbiw	r24, 0x10	; 16
     2fa:	a1 05       	cpc	r26, r1
     2fc:	b1 05       	cpc	r27, r1
     2fe:	28 f0       	brcs	.+10     	; 0x30a <fat_get_next_cluster+0xba>
     300:	6c 2d       	mov	r22, r12
     302:	7d 2d       	mov	r23, r13
     304:	8e 2d       	mov	r24, r14
     306:	9f 2d       	mov	r25, r15
     308:	44 c0       	rjmp	.+136    	; 0x392 <fat_get_next_cluster+0x142>
     30a:	60 e0       	ldi	r22, 0x00	; 0
     30c:	70 e0       	ldi	r23, 0x00	; 0
     30e:	80 e0       	ldi	r24, 0x00	; 0
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	3f c0       	rjmp	.+126    	; 0x392 <fat_get_next_cluster+0x142>
     314:	4a 01       	movw	r8, r20
     316:	5b 01       	movw	r10, r22
     318:	24 2f       	mov	r18, r20
     31a:	39 2d       	mov	r19, r9
     31c:	4a 2d       	mov	r20, r10
     31e:	5b 2d       	mov	r21, r11
     320:	60 e0       	ldi	r22, 0x00	; 0
     322:	70 e0       	ldi	r23, 0x00	; 0
     324:	80 e0       	ldi	r24, 0x00	; 0
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	01 e0       	ldi	r16, 0x01	; 1
     32a:	0e 94 2f 27 	call	0x4e5e	; 0x4e5e <__ashldi3>
     32e:	a2 84       	ldd	r10, Z+10	; 0x0a
     330:	b3 84       	ldd	r11, Z+11	; 0x0b
     332:	c4 84       	ldd	r12, Z+12	; 0x0c
     334:	d5 84       	ldd	r13, Z+13	; 0x0d
     336:	e6 84       	ldd	r14, Z+14	; 0x0e
     338:	f7 84       	ldd	r15, Z+15	; 0x0f
     33a:	00 89       	ldd	r16, Z+16	; 0x10
     33c:	11 89       	ldd	r17, Z+17	; 0x11
     33e:	0e 94 66 27 	call	0x4ecc	; 0x4ecc <__adddi3>
     342:	ed 91       	ld	r30, X+
     344:	fc 91       	ld	r31, X
     346:	68 94       	set
     348:	ee 24       	eor	r14, r14
     34a:	e1 f8       	bld	r14, 1
     34c:	f1 2c       	mov	r15, r1
     34e:	8e 01       	movw	r16, r28
     350:	0f 5f       	subi	r16, 0xFF	; 255
     352:	1f 4f       	sbci	r17, 0xFF	; 255
     354:	09 95       	icall
     356:	88 23       	and	r24, r24
     358:	71 f0       	breq	.+28     	; 0x376 <fat_get_next_cluster+0x126>
     35a:	89 81       	ldd	r24, Y+1	; 0x01
     35c:	9a 81       	ldd	r25, Y+2	; 0x02
     35e:	6c 01       	movw	r12, r24
     360:	e1 2c       	mov	r14, r1
     362:	f1 2c       	mov	r15, r1
     364:	01 97       	sbiw	r24, 0x01	; 1
     366:	8f 3e       	cpi	r24, 0xEF	; 239
     368:	9f 4f       	sbci	r25, 0xFF	; 255
     36a:	28 f4       	brcc	.+10     	; 0x376 <fat_get_next_cluster+0x126>
     36c:	6c 2d       	mov	r22, r12
     36e:	7d 2d       	mov	r23, r13
     370:	8e 2d       	mov	r24, r14
     372:	9f 2d       	mov	r25, r15
     374:	0e c0       	rjmp	.+28     	; 0x392 <fat_get_next_cluster+0x142>
     376:	60 e0       	ldi	r22, 0x00	; 0
     378:	70 e0       	ldi	r23, 0x00	; 0
     37a:	80 e0       	ldi	r24, 0x00	; 0
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	09 c0       	rjmp	.+18     	; 0x392 <fat_get_next_cluster+0x142>
     380:	60 e0       	ldi	r22, 0x00	; 0
     382:	70 e0       	ldi	r23, 0x00	; 0
     384:	80 e0       	ldi	r24, 0x00	; 0
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	04 c0       	rjmp	.+8      	; 0x392 <fat_get_next_cluster+0x142>
     38a:	60 e0       	ldi	r22, 0x00	; 0
     38c:	70 e0       	ldi	r23, 0x00	; 0
     38e:	80 e0       	ldi	r24, 0x00	; 0
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	0f 90       	pop	r0
     394:	0f 90       	pop	r0
     396:	0f 90       	pop	r0
     398:	0f 90       	pop	r0
     39a:	df 91       	pop	r29
     39c:	cf 91       	pop	r28
     39e:	1f 91       	pop	r17
     3a0:	0f 91       	pop	r16
     3a2:	ff 90       	pop	r15
     3a4:	ef 90       	pop	r14
     3a6:	df 90       	pop	r13
     3a8:	cf 90       	pop	r12
     3aa:	bf 90       	pop	r11
     3ac:	af 90       	pop	r10
     3ae:	9f 90       	pop	r9
     3b0:	8f 90       	pop	r8
     3b2:	08 95       	ret

000003b4 <fat_free_clusters>:
     3b4:	2f 92       	push	r2
     3b6:	3f 92       	push	r3
     3b8:	4f 92       	push	r4
     3ba:	5f 92       	push	r5
     3bc:	6f 92       	push	r6
     3be:	7f 92       	push	r7
     3c0:	8f 92       	push	r8
     3c2:	9f 92       	push	r9
     3c4:	af 92       	push	r10
     3c6:	bf 92       	push	r11
     3c8:	cf 92       	push	r12
     3ca:	df 92       	push	r13
     3cc:	ef 92       	push	r14
     3ce:	ff 92       	push	r15
     3d0:	0f 93       	push	r16
     3d2:	1f 93       	push	r17
     3d4:	cf 93       	push	r28
     3d6:	df 93       	push	r29
     3d8:	cd b7       	in	r28, 0x3d	; 61
     3da:	de b7       	in	r29, 0x3e	; 62
     3dc:	62 97       	sbiw	r28, 0x12	; 18
     3de:	0f b6       	in	r0, 0x3f	; 63
     3e0:	f8 94       	cli
     3e2:	de bf       	out	0x3e, r29	; 62
     3e4:	0f be       	out	0x3f, r0	; 63
     3e6:	cd bf       	out	0x3d, r28	; 61
     3e8:	3c 01       	movw	r6, r24
     3ea:	1a 01       	movw	r2, r20
     3ec:	2b 01       	movw	r4, r22
     3ee:	89 2b       	or	r24, r25
     3f0:	09 f4       	brne	.+2      	; 0x3f4 <fat_free_clusters+0x40>
     3f2:	e8 c0       	rjmp	.+464    	; 0x5c4 <__LOCK_REGION_LENGTH__+0x1c4>
     3f4:	42 30       	cpi	r20, 0x02	; 2
     3f6:	51 05       	cpc	r21, r1
     3f8:	61 05       	cpc	r22, r1
     3fa:	71 05       	cpc	r23, r1
     3fc:	08 f4       	brcc	.+2      	; 0x400 <__LOCK_REGION_LENGTH__>
     3fe:	e4 c0       	rjmp	.+456    	; 0x5c8 <__LOCK_REGION_LENGTH__+0x1c8>
     400:	d3 01       	movw	r26, r6
     402:	1a 96       	adiw	r26, 0x0a	; 10
     404:	bc 91       	ld	r27, X
     406:	bd 83       	std	Y+5, r27	; 0x05
     408:	f3 01       	movw	r30, r6
     40a:	f3 85       	ldd	r31, Z+11	; 0x0b
     40c:	fe 83       	std	Y+6, r31	; 0x06
     40e:	d3 01       	movw	r26, r6
     410:	1c 96       	adiw	r26, 0x0c	; 12
     412:	bc 91       	ld	r27, X
     414:	bf 83       	std	Y+7, r27	; 0x07
     416:	f3 01       	movw	r30, r6
     418:	f5 85       	ldd	r31, Z+13	; 0x0d
     41a:	f8 87       	std	Y+8, r31	; 0x08
     41c:	d3 01       	movw	r26, r6
     41e:	1e 96       	adiw	r26, 0x0e	; 14
     420:	bc 91       	ld	r27, X
     422:	b9 87       	std	Y+9, r27	; 0x09
     424:	f3 01       	movw	r30, r6
     426:	f7 85       	ldd	r31, Z+15	; 0x0f
     428:	fa 87       	std	Y+10, r31	; 0x0a
     42a:	d3 01       	movw	r26, r6
     42c:	50 96       	adiw	r26, 0x10	; 16
     42e:	bc 91       	ld	r27, X
     430:	bb 87       	std	Y+11, r27	; 0x0b
     432:	f3 01       	movw	r30, r6
     434:	f1 89       	ldd	r31, Z+17	; 0x11
     436:	fc 87       	std	Y+12, r31	; 0x0c
     438:	d3 01       	movw	r26, r6
     43a:	ed 91       	ld	r30, X+
     43c:	fc 91       	ld	r31, X
     43e:	80 85       	ldd	r24, Z+8	; 0x08
     440:	8b 30       	cpi	r24, 0x0B	; 11
     442:	31 f0       	breq	.+12     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     444:	45 2b       	or	r20, r21
     446:	46 2b       	or	r20, r22
     448:	47 2b       	or	r20, r23
     44a:	09 f0       	breq	.+2      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     44c:	5d c0       	rjmp	.+186    	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
     44e:	b4 c0       	rjmp	.+360    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
     450:	45 2b       	or	r20, r21
     452:	46 2b       	or	r20, r22
     454:	47 2b       	or	r20, r23
     456:	19 f4       	brne	.+6      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     458:	51 c0       	rjmp	.+162    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
     45a:	14 01       	movw	r2, r8
     45c:	25 01       	movw	r4, r10
     45e:	52 01       	movw	r10, r4
     460:	41 01       	movw	r8, r2
     462:	22 2d       	mov	r18, r2
     464:	39 2d       	mov	r19, r9
     466:	4a 2d       	mov	r20, r10
     468:	5b 2d       	mov	r21, r11
     46a:	60 e0       	ldi	r22, 0x00	; 0
     46c:	70 e0       	ldi	r23, 0x00	; 0
     46e:	80 e0       	ldi	r24, 0x00	; 0
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	02 e0       	ldi	r16, 0x02	; 2
     474:	0e 94 2f 27 	call	0x4e5e	; 0x4e5e <__ashldi3>
     478:	ad 80       	ldd	r10, Y+5	; 0x05
     47a:	be 80       	ldd	r11, Y+6	; 0x06
     47c:	cf 80       	ldd	r12, Y+7	; 0x07
     47e:	d8 84       	ldd	r13, Y+8	; 0x08
     480:	e9 84       	ldd	r14, Y+9	; 0x09
     482:	fa 84       	ldd	r15, Y+10	; 0x0a
     484:	0b 85       	ldd	r16, Y+11	; 0x0b
     486:	1c 85       	ldd	r17, Y+12	; 0x0c
     488:	0e 94 66 27 	call	0x4ecc	; 0x4ecc <__adddi3>
     48c:	d2 2e       	mov	r13, r18
     48e:	c3 2e       	mov	r12, r19
     490:	4d 87       	std	Y+13, r20	; 0x0d
     492:	5e 87       	std	Y+14, r21	; 0x0e
     494:	6f 87       	std	Y+15, r22	; 0x0f
     496:	78 8b       	std	Y+16, r23	; 0x10
     498:	89 8b       	std	Y+17, r24	; 0x11
     49a:	9a 8b       	std	Y+18, r25	; 0x12
     49c:	d3 01       	movw	r26, r6
     49e:	ed 91       	ld	r30, X+
     4a0:	fc 91       	ld	r31, X
     4a2:	01 90       	ld	r0, Z+
     4a4:	f0 81       	ld	r31, Z
     4a6:	e0 2d       	mov	r30, r0
     4a8:	68 94       	set
     4aa:	ee 24       	eor	r14, r14
     4ac:	e2 f8       	bld	r14, 2
     4ae:	f1 2c       	mov	r15, r1
     4b0:	8e 01       	movw	r16, r28
     4b2:	0f 5f       	subi	r16, 0xFF	; 255
     4b4:	1f 4f       	sbci	r17, 0xFF	; 255
     4b6:	09 95       	icall
     4b8:	88 23       	and	r24, r24
     4ba:	09 f4       	brne	.+2      	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
     4bc:	2a c1       	rjmp	.+596    	; 0x712 <__LOCK_REGION_LENGTH__+0x312>
     4be:	89 80       	ldd	r8, Y+1	; 0x01
     4c0:	9a 80       	ldd	r9, Y+2	; 0x02
     4c2:	ab 80       	ldd	r10, Y+3	; 0x03
     4c4:	bc 80       	ldd	r11, Y+4	; 0x04
     4c6:	81 14       	cp	r8, r1
     4c8:	91 04       	cpc	r9, r1
     4ca:	a1 04       	cpc	r10, r1
     4cc:	b1 04       	cpc	r11, r1
     4ce:	c1 f0       	breq	.+48     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
     4d0:	d5 01       	movw	r26, r10
     4d2:	c4 01       	movw	r24, r8
     4d4:	80 5f       	subi	r24, 0xF0	; 240
     4d6:	9f 4f       	sbci	r25, 0xFF	; 255
     4d8:	af 4f       	sbci	r26, 0xFF	; 255
     4da:	bf 40       	sbci	r27, 0x0F	; 15
     4dc:	08 97       	sbiw	r24, 0x08	; 8
     4de:	a1 05       	cpc	r26, r1
     4e0:	b1 05       	cpc	r27, r1
     4e2:	80 f0       	brcs	.+32     	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
     4e4:	d5 01       	movw	r26, r10
     4e6:	c4 01       	movw	r24, r8
     4e8:	88 5f       	subi	r24, 0xF8	; 248
     4ea:	9f 4f       	sbci	r25, 0xFF	; 255
     4ec:	af 4f       	sbci	r26, 0xFF	; 255
     4ee:	bf 40       	sbci	r27, 0x0F	; 15
     4f0:	08 97       	sbiw	r24, 0x08	; 8
     4f2:	a1 05       	cpc	r26, r1
     4f4:	b1 05       	cpc	r27, r1
     4f6:	08 f4       	brcc	.+2      	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
     4f8:	84 c0       	rjmp	.+264    	; 0x602 <__LOCK_REGION_LENGTH__+0x202>
     4fa:	a9 c0       	rjmp	.+338    	; 0x64e <__LOCK_REGION_LENGTH__+0x24e>
     4fc:	81 e0       	ldi	r24, 0x01	; 1
     4fe:	09 c1       	rjmp	.+530    	; 0x712 <__LOCK_REGION_LENGTH__+0x312>
     500:	81 e0       	ldi	r24, 0x01	; 1
     502:	07 c1       	rjmp	.+526    	; 0x712 <__LOCK_REGION_LENGTH__+0x312>
     504:	80 e0       	ldi	r24, 0x00	; 0
     506:	05 c1       	rjmp	.+522    	; 0x712 <__LOCK_REGION_LENGTH__+0x312>
     508:	52 01       	movw	r10, r4
     50a:	41 01       	movw	r8, r2
     50c:	22 2d       	mov	r18, r2
     50e:	39 2d       	mov	r19, r9
     510:	4a 2d       	mov	r20, r10
     512:	5b 2d       	mov	r21, r11
     514:	60 e0       	ldi	r22, 0x00	; 0
     516:	70 e0       	ldi	r23, 0x00	; 0
     518:	80 e0       	ldi	r24, 0x00	; 0
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	01 e0       	ldi	r16, 0x01	; 1
     51e:	0e 94 2f 27 	call	0x4e5e	; 0x4e5e <__ashldi3>
     522:	ad 80       	ldd	r10, Y+5	; 0x05
     524:	be 80       	ldd	r11, Y+6	; 0x06
     526:	cf 80       	ldd	r12, Y+7	; 0x07
     528:	d8 84       	ldd	r13, Y+8	; 0x08
     52a:	e9 84       	ldd	r14, Y+9	; 0x09
     52c:	fa 84       	ldd	r15, Y+10	; 0x0a
     52e:	0b 85       	ldd	r16, Y+11	; 0x0b
     530:	1c 85       	ldd	r17, Y+12	; 0x0c
     532:	0e 94 66 27 	call	0x4ecc	; 0x4ecc <__adddi3>
     536:	d2 2e       	mov	r13, r18
     538:	c3 2e       	mov	r12, r19
     53a:	44 2e       	mov	r4, r20
     53c:	55 2e       	mov	r5, r21
     53e:	86 2e       	mov	r8, r22
     540:	97 2e       	mov	r9, r23
     542:	a8 2e       	mov	r10, r24
     544:	b9 2e       	mov	r11, r25
     546:	d3 01       	movw	r26, r6
     548:	ed 91       	ld	r30, X+
     54a:	fc 91       	ld	r31, X
     54c:	01 90       	ld	r0, Z+
     54e:	f0 81       	ld	r31, Z
     550:	e0 2d       	mov	r30, r0
     552:	68 94       	set
     554:	ee 24       	eor	r14, r14
     556:	e1 f8       	bld	r14, 1
     558:	f1 2c       	mov	r15, r1
     55a:	8e 01       	movw	r16, r28
     55c:	0f 5f       	subi	r16, 0xFF	; 255
     55e:	1f 4f       	sbci	r17, 0xFF	; 255
     560:	09 95       	icall
     562:	88 23       	and	r24, r24
     564:	09 f4       	brne	.+2      	; 0x568 <__LOCK_REGION_LENGTH__+0x168>
     566:	d5 c0       	rjmp	.+426    	; 0x712 <__LOCK_REGION_LENGTH__+0x312>
     568:	29 80       	ldd	r2, Y+1	; 0x01
     56a:	3a 80       	ldd	r3, Y+2	; 0x02
     56c:	21 14       	cp	r2, r1
     56e:	31 04       	cpc	r3, r1
     570:	29 f1       	breq	.+74     	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
     572:	c1 01       	movw	r24, r2
     574:	40 96       	adiw	r24, 0x10	; 16
     576:	08 97       	sbiw	r24, 0x08	; 8
     578:	18 f1       	brcs	.+70     	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
     57a:	b8 ef       	ldi	r27, 0xF8	; 248
     57c:	2b 16       	cp	r2, r27
     57e:	bf ef       	ldi	r27, 0xFF	; 255
     580:	3b 06       	cpc	r3, r27
     582:	08 f0       	brcs	.+2      	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
     584:	6e c0       	rjmp	.+220    	; 0x662 <__LOCK_REGION_LENGTH__+0x262>
     586:	1a 82       	std	Y+2, r1	; 0x02
     588:	19 82       	std	Y+1, r1	; 0x01
     58a:	d3 01       	movw	r26, r6
     58c:	ed 91       	ld	r30, X+
     58e:	fc 91       	ld	r31, X
     590:	04 80       	ldd	r0, Z+4	; 0x04
     592:	f5 81       	ldd	r31, Z+5	; 0x05
     594:	e0 2d       	mov	r30, r0
     596:	2d 2d       	mov	r18, r13
     598:	3c 2d       	mov	r19, r12
     59a:	44 2d       	mov	r20, r4
     59c:	55 2d       	mov	r21, r5
     59e:	68 2d       	mov	r22, r8
     5a0:	79 2d       	mov	r23, r9
     5a2:	8a 2d       	mov	r24, r10
     5a4:	9b 2d       	mov	r25, r11
     5a6:	09 95       	icall
     5a8:	41 2c       	mov	r4, r1
     5aa:	51 2c       	mov	r5, r1
     5ac:	21 14       	cp	r2, r1
     5ae:	31 04       	cpc	r3, r1
     5b0:	41 04       	cpc	r4, r1
     5b2:	51 04       	cpc	r5, r1
     5b4:	09 f0       	breq	.+2      	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
     5b6:	a8 cf       	rjmp	.-176    	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
     5b8:	81 e0       	ldi	r24, 0x01	; 1
     5ba:	ab c0       	rjmp	.+342    	; 0x712 <__LOCK_REGION_LENGTH__+0x312>
     5bc:	81 e0       	ldi	r24, 0x01	; 1
     5be:	a9 c0       	rjmp	.+338    	; 0x712 <__LOCK_REGION_LENGTH__+0x312>
     5c0:	80 e0       	ldi	r24, 0x00	; 0
     5c2:	a7 c0       	rjmp	.+334    	; 0x712 <__LOCK_REGION_LENGTH__+0x312>
     5c4:	80 e0       	ldi	r24, 0x00	; 0
     5c6:	a5 c0       	rjmp	.+330    	; 0x712 <__LOCK_REGION_LENGTH__+0x312>
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	a3 c0       	rjmp	.+326    	; 0x712 <__LOCK_REGION_LENGTH__+0x312>
     5cc:	19 82       	std	Y+1, r1	; 0x01
     5ce:	1a 82       	std	Y+2, r1	; 0x02
     5d0:	1b 82       	std	Y+3, r1	; 0x03
     5d2:	1c 82       	std	Y+4, r1	; 0x04
     5d4:	d3 01       	movw	r26, r6
     5d6:	ed 91       	ld	r30, X+
     5d8:	fc 91       	ld	r31, X
     5da:	04 80       	ldd	r0, Z+4	; 0x04
     5dc:	f5 81       	ldd	r31, Z+5	; 0x05
     5de:	e0 2d       	mov	r30, r0
     5e0:	68 94       	set
     5e2:	ee 24       	eor	r14, r14
     5e4:	e2 f8       	bld	r14, 2
     5e6:	f1 2c       	mov	r15, r1
     5e8:	8e 01       	movw	r16, r28
     5ea:	0f 5f       	subi	r16, 0xFF	; 255
     5ec:	1f 4f       	sbci	r17, 0xFF	; 255
     5ee:	2d 2d       	mov	r18, r13
     5f0:	3c 2d       	mov	r19, r12
     5f2:	4d 85       	ldd	r20, Y+13	; 0x0d
     5f4:	5e 85       	ldd	r21, Y+14	; 0x0e
     5f6:	6f 85       	ldd	r22, Y+15	; 0x0f
     5f8:	78 89       	ldd	r23, Y+16	; 0x10
     5fa:	89 89       	ldd	r24, Y+17	; 0x11
     5fc:	9a 89       	ldd	r25, Y+18	; 0x12
     5fe:	09 95       	icall
     600:	7d cf       	rjmp	.-262    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
     602:	f3 01       	movw	r30, r6
     604:	86 a5       	ldd	r24, Z+46	; 0x2e
     606:	97 a5       	ldd	r25, Z+47	; 0x2f
     608:	a0 a9       	ldd	r26, Z+48	; 0x30
     60a:	b1 a9       	ldd	r27, Z+49	; 0x31
     60c:	89 2b       	or	r24, r25
     60e:	8a 2b       	or	r24, r26
     610:	8b 2b       	or	r24, r27
     612:	09 f4       	brne	.+2      	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
     614:	5f c0       	rjmp	.+190    	; 0x6d4 <__LOCK_REGION_LENGTH__+0x2d4>
     616:	da cf       	rjmp	.-76     	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
     618:	19 82       	std	Y+1, r1	; 0x01
     61a:	1a 82       	std	Y+2, r1	; 0x02
     61c:	1b 82       	std	Y+3, r1	; 0x03
     61e:	1c 82       	std	Y+4, r1	; 0x04
     620:	d3 01       	movw	r26, r6
     622:	ed 91       	ld	r30, X+
     624:	fc 91       	ld	r31, X
     626:	04 80       	ldd	r0, Z+4	; 0x04
     628:	f5 81       	ldd	r31, Z+5	; 0x05
     62a:	e0 2d       	mov	r30, r0
     62c:	68 94       	set
     62e:	ee 24       	eor	r14, r14
     630:	e2 f8       	bld	r14, 2
     632:	f1 2c       	mov	r15, r1
     634:	8e 01       	movw	r16, r28
     636:	0f 5f       	subi	r16, 0xFF	; 255
     638:	1f 4f       	sbci	r17, 0xFF	; 255
     63a:	2d 2d       	mov	r18, r13
     63c:	3c 2d       	mov	r19, r12
     63e:	4d 85       	ldd	r20, Y+13	; 0x0d
     640:	5e 85       	ldd	r21, Y+14	; 0x0e
     642:	6f 85       	ldd	r22, Y+15	; 0x0f
     644:	78 89       	ldd	r23, Y+16	; 0x10
     646:	89 89       	ldd	r24, Y+17	; 0x11
     648:	9a 89       	ldd	r25, Y+18	; 0x12
     64a:	09 95       	icall
     64c:	06 cf       	rjmp	.-500    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     64e:	f3 01       	movw	r30, r6
     650:	86 a5       	ldd	r24, Z+46	; 0x2e
     652:	97 a5       	ldd	r25, Z+47	; 0x2f
     654:	a0 a9       	ldd	r26, Z+48	; 0x30
     656:	b1 a9       	ldd	r27, Z+49	; 0x31
     658:	89 2b       	or	r24, r25
     65a:	8a 2b       	or	r24, r26
     65c:	8b 2b       	or	r24, r27
     65e:	e1 f6       	brne	.-72     	; 0x618 <__LOCK_REGION_LENGTH__+0x218>
     660:	19 c0       	rjmp	.+50     	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
     662:	1a 82       	std	Y+2, r1	; 0x02
     664:	19 82       	std	Y+1, r1	; 0x01
     666:	d3 01       	movw	r26, r6
     668:	ed 91       	ld	r30, X+
     66a:	fc 91       	ld	r31, X
     66c:	04 80       	ldd	r0, Z+4	; 0x04
     66e:	f5 81       	ldd	r31, Z+5	; 0x05
     670:	e0 2d       	mov	r30, r0
     672:	68 94       	set
     674:	ee 24       	eor	r14, r14
     676:	e1 f8       	bld	r14, 1
     678:	f1 2c       	mov	r15, r1
     67a:	8e 01       	movw	r16, r28
     67c:	0f 5f       	subi	r16, 0xFF	; 255
     67e:	1f 4f       	sbci	r17, 0xFF	; 255
     680:	2d 2d       	mov	r18, r13
     682:	3c 2d       	mov	r19, r12
     684:	44 2d       	mov	r20, r4
     686:	55 2d       	mov	r21, r5
     688:	68 2d       	mov	r22, r8
     68a:	79 2d       	mov	r23, r9
     68c:	8a 2d       	mov	r24, r10
     68e:	9b 2d       	mov	r25, r11
     690:	09 95       	icall
     692:	92 cf       	rjmp	.-220    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
     694:	f3 01       	movw	r30, r6
     696:	26 a6       	std	Z+46, r2	; 0x2e
     698:	37 a6       	std	Z+47, r3	; 0x2f
     69a:	40 aa       	std	Z+48, r4	; 0x30
     69c:	51 aa       	std	Z+49, r5	; 0x31
     69e:	19 82       	std	Y+1, r1	; 0x01
     6a0:	1a 82       	std	Y+2, r1	; 0x02
     6a2:	1b 82       	std	Y+3, r1	; 0x03
     6a4:	1c 82       	std	Y+4, r1	; 0x04
     6a6:	01 90       	ld	r0, Z+
     6a8:	f0 81       	ld	r31, Z
     6aa:	e0 2d       	mov	r30, r0
     6ac:	04 80       	ldd	r0, Z+4	; 0x04
     6ae:	f5 81       	ldd	r31, Z+5	; 0x05
     6b0:	e0 2d       	mov	r30, r0
     6b2:	68 94       	set
     6b4:	ee 24       	eor	r14, r14
     6b6:	e2 f8       	bld	r14, 2
     6b8:	f1 2c       	mov	r15, r1
     6ba:	8e 01       	movw	r16, r28
     6bc:	0f 5f       	subi	r16, 0xFF	; 255
     6be:	1f 4f       	sbci	r17, 0xFF	; 255
     6c0:	2d 2d       	mov	r18, r13
     6c2:	3c 2d       	mov	r19, r12
     6c4:	4d 85       	ldd	r20, Y+13	; 0x0d
     6c6:	5e 85       	ldd	r21, Y+14	; 0x0e
     6c8:	6f 85       	ldd	r22, Y+15	; 0x0f
     6ca:	78 89       	ldd	r23, Y+16	; 0x10
     6cc:	89 89       	ldd	r24, Y+17	; 0x11
     6ce:	9a 89       	ldd	r25, Y+18	; 0x12
     6d0:	09 95       	icall
     6d2:	c3 ce       	rjmp	.-634    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     6d4:	26 a6       	std	Z+46, r2	; 0x2e
     6d6:	37 a6       	std	Z+47, r3	; 0x2f
     6d8:	40 aa       	std	Z+48, r4	; 0x30
     6da:	51 aa       	std	Z+49, r5	; 0x31
     6dc:	19 82       	std	Y+1, r1	; 0x01
     6de:	1a 82       	std	Y+2, r1	; 0x02
     6e0:	1b 82       	std	Y+3, r1	; 0x03
     6e2:	1c 82       	std	Y+4, r1	; 0x04
     6e4:	01 90       	ld	r0, Z+
     6e6:	f0 81       	ld	r31, Z
     6e8:	e0 2d       	mov	r30, r0
     6ea:	04 80       	ldd	r0, Z+4	; 0x04
     6ec:	f5 81       	ldd	r31, Z+5	; 0x05
     6ee:	e0 2d       	mov	r30, r0
     6f0:	68 94       	set
     6f2:	ee 24       	eor	r14, r14
     6f4:	e2 f8       	bld	r14, 2
     6f6:	f1 2c       	mov	r15, r1
     6f8:	8e 01       	movw	r16, r28
     6fa:	0f 5f       	subi	r16, 0xFF	; 255
     6fc:	1f 4f       	sbci	r17, 0xFF	; 255
     6fe:	2d 2d       	mov	r18, r13
     700:	3c 2d       	mov	r19, r12
     702:	4d 85       	ldd	r20, Y+13	; 0x0d
     704:	5e 85       	ldd	r21, Y+14	; 0x0e
     706:	6f 85       	ldd	r22, Y+15	; 0x0f
     708:	78 89       	ldd	r23, Y+16	; 0x10
     70a:	89 89       	ldd	r24, Y+17	; 0x11
     70c:	9a 89       	ldd	r25, Y+18	; 0x12
     70e:	09 95       	icall
     710:	f5 ce       	rjmp	.-534    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
     712:	62 96       	adiw	r28, 0x12	; 18
     714:	0f b6       	in	r0, 0x3f	; 63
     716:	f8 94       	cli
     718:	de bf       	out	0x3e, r29	; 62
     71a:	0f be       	out	0x3f, r0	; 63
     71c:	cd bf       	out	0x3d, r28	; 61
     71e:	df 91       	pop	r29
     720:	cf 91       	pop	r28
     722:	1f 91       	pop	r17
     724:	0f 91       	pop	r16
     726:	ff 90       	pop	r15
     728:	ef 90       	pop	r14
     72a:	df 90       	pop	r13
     72c:	cf 90       	pop	r12
     72e:	bf 90       	pop	r11
     730:	af 90       	pop	r10
     732:	9f 90       	pop	r9
     734:	8f 90       	pop	r8
     736:	7f 90       	pop	r7
     738:	6f 90       	pop	r6
     73a:	5f 90       	pop	r5
     73c:	4f 90       	pop	r4
     73e:	3f 90       	pop	r3
     740:	2f 90       	pop	r2
     742:	08 95       	ret

00000744 <fat_append_clusters>:
     744:	2f 92       	push	r2
     746:	3f 92       	push	r3
     748:	4f 92       	push	r4
     74a:	5f 92       	push	r5
     74c:	6f 92       	push	r6
     74e:	7f 92       	push	r7
     750:	8f 92       	push	r8
     752:	9f 92       	push	r9
     754:	af 92       	push	r10
     756:	bf 92       	push	r11
     758:	cf 92       	push	r12
     75a:	df 92       	push	r13
     75c:	ef 92       	push	r14
     75e:	ff 92       	push	r15
     760:	0f 93       	push	r16
     762:	1f 93       	push	r17
     764:	cf 93       	push	r28
     766:	df 93       	push	r29
     768:	cd b7       	in	r28, 0x3d	; 61
     76a:	de b7       	in	r29, 0x3e	; 62
     76c:	a9 97       	sbiw	r28, 0x29	; 41
     76e:	0f b6       	in	r0, 0x3f	; 63
     770:	f8 94       	cli
     772:	de bf       	out	0x3e, r29	; 62
     774:	0f be       	out	0x3f, r0	; 63
     776:	cd bf       	out	0x3d, r28	; 61
     778:	9b a3       	std	Y+35, r25	; 0x23
     77a:	8a a3       	std	Y+34, r24	; 0x22
     77c:	4e a3       	std	Y+38, r20	; 0x26
     77e:	5f a3       	std	Y+39, r21	; 0x27
     780:	68 a7       	std	Y+40, r22	; 0x28
     782:	79 a7       	std	Y+41, r23	; 0x29
     784:	0b 87       	std	Y+11, r16	; 0x0b
     786:	1c 87       	std	Y+12, r17	; 0x0c
     788:	2d 87       	std	Y+13, r18	; 0x0d
     78a:	3e 87       	std	Y+14, r19	; 0x0e
     78c:	00 97       	sbiw	r24, 0x00	; 0
     78e:	09 f4       	brne	.+2      	; 0x792 <fat_append_clusters+0x4e>
     790:	14 c2       	rjmp	.+1064   	; 0xbba <__stack+0x2bb>
     792:	dc 01       	movw	r26, r24
     794:	ed 91       	ld	r30, X+
     796:	fc 91       	ld	r31, X
     798:	11 97       	sbiw	r26, 0x01	; 1
     79a:	20 81       	ld	r18, Z
     79c:	31 81       	ldd	r19, Z+1	; 0x01
     79e:	3d 8f       	std	Y+29, r19	; 0x1d
     7a0:	2c 8f       	std	Y+28, r18	; 0x1c
     7a2:	44 81       	ldd	r20, Z+4	; 0x04
     7a4:	55 81       	ldd	r21, Z+5	; 0x05
     7a6:	5d a3       	std	Y+37, r21	; 0x25
     7a8:	4c a3       	std	Y+36, r20	; 0x24
     7aa:	1a 96       	adiw	r26, 0x0a	; 10
     7ac:	5c 91       	ld	r21, X
     7ae:	1a 97       	sbiw	r26, 0x0a	; 10
     7b0:	5c 8b       	std	Y+20, r21	; 0x14
     7b2:	1b 96       	adiw	r26, 0x0b	; 11
     7b4:	8c 91       	ld	r24, X
     7b6:	1b 97       	sbiw	r26, 0x0b	; 11
     7b8:	8d 8b       	std	Y+21, r24	; 0x15
     7ba:	1c 96       	adiw	r26, 0x0c	; 12
     7bc:	9c 91       	ld	r25, X
     7be:	1c 97       	sbiw	r26, 0x0c	; 12
     7c0:	9e 8b       	std	Y+22, r25	; 0x16
     7c2:	1d 96       	adiw	r26, 0x0d	; 13
     7c4:	ac 91       	ld	r26, X
     7c6:	af 8b       	std	Y+23, r26	; 0x17
     7c8:	aa a1       	ldd	r26, Y+34	; 0x22
     7ca:	bb a1       	ldd	r27, Y+35	; 0x23
     7cc:	1e 96       	adiw	r26, 0x0e	; 14
     7ce:	bc 91       	ld	r27, X
     7d0:	b8 8f       	std	Y+24, r27	; 0x18
     7d2:	aa a1       	ldd	r26, Y+34	; 0x22
     7d4:	bb a1       	ldd	r27, Y+35	; 0x23
     7d6:	1f 96       	adiw	r26, 0x0f	; 15
     7d8:	bc 91       	ld	r27, X
     7da:	b9 8f       	std	Y+25, r27	; 0x19
     7dc:	aa a1       	ldd	r26, Y+34	; 0x22
     7de:	bb a1       	ldd	r27, Y+35	; 0x23
     7e0:	50 96       	adiw	r26, 0x10	; 16
     7e2:	bc 91       	ld	r27, X
     7e4:	ba 8f       	std	Y+26, r27	; 0x1a
     7e6:	aa a1       	ldd	r26, Y+34	; 0x22
     7e8:	bb a1       	ldd	r27, Y+35	; 0x23
     7ea:	51 96       	adiw	r26, 0x11	; 17
     7ec:	bc 91       	ld	r27, X
     7ee:	bb 8f       	std	Y+27, r27	; 0x1b
     7f0:	aa a1       	ldd	r26, Y+34	; 0x22
     7f2:	bb a1       	ldd	r27, Y+35	; 0x23
     7f4:	9e 96       	adiw	r26, 0x2e	; 46
     7f6:	4d 90       	ld	r4, X+
     7f8:	5d 90       	ld	r5, X+
     7fa:	6d 90       	ld	r6, X+
     7fc:	7c 90       	ld	r7, X
     7fe:	d1 97       	sbiw	r26, 0x31	; 49
     800:	b0 85       	ldd	r27, Z+8	; 0x08
     802:	bb 8b       	std	Y+19, r27	; 0x13
     804:	bb 30       	cpi	r27, 0x0B	; 11
     806:	a9 f4       	brne	.+42     	; 0x832 <fat_append_clusters+0xee>
     808:	ea a1       	ldd	r30, Y+34	; 0x22
     80a:	fb a1       	ldd	r31, Y+35	; 0x23
     80c:	82 89       	ldd	r24, Z+18	; 0x12
     80e:	93 89       	ldd	r25, Z+19	; 0x13
     810:	a4 89       	ldd	r26, Z+20	; 0x14
     812:	b5 89       	ldd	r27, Z+21	; 0x15
     814:	9c 01       	movw	r18, r24
     816:	ad 01       	movw	r20, r26
     818:	56 95       	lsr	r21
     81a:	47 95       	ror	r20
     81c:	37 95       	ror	r19
     81e:	27 95       	ror	r18
     820:	56 95       	lsr	r21
     822:	47 95       	ror	r20
     824:	37 95       	ror	r19
     826:	27 95       	ror	r18
     828:	2e 8f       	std	Y+30, r18	; 0x1e
     82a:	3f 8f       	std	Y+31, r19	; 0x1f
     82c:	48 a3       	std	Y+32, r20	; 0x20
     82e:	59 a3       	std	Y+33, r21	; 0x21
     830:	10 c0       	rjmp	.+32     	; 0x852 <fat_append_clusters+0x10e>
     832:	ea a1       	ldd	r30, Y+34	; 0x22
     834:	fb a1       	ldd	r31, Y+35	; 0x23
     836:	82 89       	ldd	r24, Z+18	; 0x12
     838:	93 89       	ldd	r25, Z+19	; 0x13
     83a:	a4 89       	ldd	r26, Z+20	; 0x14
     83c:	b5 89       	ldd	r27, Z+21	; 0x15
     83e:	9c 01       	movw	r18, r24
     840:	ad 01       	movw	r20, r26
     842:	56 95       	lsr	r21
     844:	47 95       	ror	r20
     846:	37 95       	ror	r19
     848:	27 95       	ror	r18
     84a:	2e 8f       	std	Y+30, r18	; 0x1e
     84c:	3f 8f       	std	Y+31, r19	; 0x1f
     84e:	48 a3       	std	Y+32, r20	; 0x20
     850:	59 a3       	std	Y+33, r21	; 0x21
     852:	aa a1       	ldd	r26, Y+34	; 0x22
     854:	bb a1       	ldd	r27, Y+35	; 0x23
     856:	9e 96       	adiw	r26, 0x2e	; 46
     858:	1d 92       	st	X+, r1
     85a:	1d 92       	st	X+, r1
     85c:	1d 92       	st	X+, r1
     85e:	1c 92       	st	X, r1
     860:	d1 97       	sbiw	r26, 0x31	; 49
     862:	2e 8d       	ldd	r18, Y+30	; 0x1e
     864:	3f 8d       	ldd	r19, Y+31	; 0x1f
     866:	48 a1       	ldd	r20, Y+32	; 0x20
     868:	59 a1       	ldd	r21, Y+33	; 0x21
     86a:	21 15       	cp	r18, r1
     86c:	31 05       	cpc	r19, r1
     86e:	41 05       	cpc	r20, r1
     870:	51 05       	cpc	r21, r1
     872:	09 f4       	brne	.+2      	; 0x876 <fat_append_clusters+0x132>
     874:	1d c1       	rjmp	.+570    	; 0xab0 <__stack+0x1b1>
     876:	2f 83       	std	Y+7, r18	; 0x07
     878:	38 87       	std	Y+8, r19	; 0x08
     87a:	49 87       	std	Y+9, r20	; 0x09
     87c:	5a 87       	std	Y+10, r21	; 0x0a
     87e:	1f 86       	std	Y+15, r1	; 0x0f
     880:	18 8a       	std	Y+16, r1	; 0x10
     882:	19 8a       	std	Y+17, r1	; 0x11
     884:	1a 8a       	std	Y+18, r1	; 0x12
     886:	32 e0       	ldi	r19, 0x02	; 2
     888:	43 16       	cp	r4, r19
     88a:	51 04       	cpc	r5, r1
     88c:	61 04       	cpc	r6, r1
     88e:	71 04       	cpc	r7, r1
     890:	78 f0       	brcs	.+30     	; 0x8b0 <fat_append_clusters+0x16c>
     892:	8e 8d       	ldd	r24, Y+30	; 0x1e
     894:	9f 8d       	ldd	r25, Y+31	; 0x1f
     896:	a8 a1       	ldd	r26, Y+32	; 0x20
     898:	b9 a1       	ldd	r27, Y+33	; 0x21
     89a:	48 16       	cp	r4, r24
     89c:	59 06       	cpc	r5, r25
     89e:	6a 06       	cpc	r6, r26
     8a0:	7b 06       	cpc	r7, r27
     8a2:	58 f0       	brcs	.+22     	; 0x8ba <fat_append_clusters+0x176>
     8a4:	41 2c       	mov	r4, r1
     8a6:	51 2c       	mov	r5, r1
     8a8:	32 01       	movw	r6, r4
     8aa:	68 94       	set
     8ac:	41 f8       	bld	r4, 1
     8ae:	05 c0       	rjmp	.+10     	; 0x8ba <fat_append_clusters+0x176>
     8b0:	41 2c       	mov	r4, r1
     8b2:	51 2c       	mov	r5, r1
     8b4:	32 01       	movw	r6, r4
     8b6:	68 94       	set
     8b8:	41 f8       	bld	r4, 1
     8ba:	9b 89       	ldd	r25, Y+19	; 0x13
     8bc:	9b 30       	cpi	r25, 0x0B	; 11
     8be:	61 f5       	brne	.+88     	; 0x918 <__stack+0x19>
     8c0:	53 01       	movw	r10, r6
     8c2:	42 01       	movw	r8, r4
     8c4:	24 2d       	mov	r18, r4
     8c6:	39 2d       	mov	r19, r9
     8c8:	4a 2d       	mov	r20, r10
     8ca:	5b 2d       	mov	r21, r11
     8cc:	60 e0       	ldi	r22, 0x00	; 0
     8ce:	70 e0       	ldi	r23, 0x00	; 0
     8d0:	80 e0       	ldi	r24, 0x00	; 0
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	02 e0       	ldi	r16, 0x02	; 2
     8d6:	0e 94 2f 27 	call	0x4e5e	; 0x4e5e <__ashldi3>
     8da:	ac 88       	ldd	r10, Y+20	; 0x14
     8dc:	bd 88       	ldd	r11, Y+21	; 0x15
     8de:	ce 88       	ldd	r12, Y+22	; 0x16
     8e0:	df 88       	ldd	r13, Y+23	; 0x17
     8e2:	e8 8c       	ldd	r14, Y+24	; 0x18
     8e4:	f9 8c       	ldd	r15, Y+25	; 0x19
     8e6:	0a 8d       	ldd	r16, Y+26	; 0x1a
     8e8:	1b 8d       	ldd	r17, Y+27	; 0x1b
     8ea:	0e 94 66 27 	call	0x4ecc	; 0x4ecc <__adddi3>
     8ee:	d2 2e       	mov	r13, r18
     8f0:	c3 2e       	mov	r12, r19
     8f2:	b4 2e       	mov	r11, r20
     8f4:	a5 2e       	mov	r10, r21
     8f6:	96 2e       	mov	r9, r22
     8f8:	87 2e       	mov	r8, r23
     8fa:	38 2e       	mov	r3, r24
     8fc:	29 2e       	mov	r2, r25
     8fe:	68 94       	set
     900:	ee 24       	eor	r14, r14
     902:	e2 f8       	bld	r14, 2
     904:	f1 2c       	mov	r15, r1
     906:	8e 01       	movw	r16, r28
     908:	0d 5f       	subi	r16, 0xFD	; 253
     90a:	1f 4f       	sbci	r17, 0xFF	; 255
     90c:	ec 8d       	ldd	r30, Y+28	; 0x1c
     90e:	fd 8d       	ldd	r31, Y+29	; 0x1d
     910:	09 95       	icall
     912:	81 11       	cpse	r24, r1
     914:	6b c1       	rjmp	.+726    	; 0xbec <__stack+0x2ed>
     916:	56 c1       	rjmp	.+684    	; 0xbc4 <__stack+0x2c5>
     918:	53 01       	movw	r10, r6
     91a:	42 01       	movw	r8, r4
     91c:	24 2d       	mov	r18, r4
     91e:	39 2d       	mov	r19, r9
     920:	4a 2d       	mov	r20, r10
     922:	5b 2d       	mov	r21, r11
     924:	60 e0       	ldi	r22, 0x00	; 0
     926:	70 e0       	ldi	r23, 0x00	; 0
     928:	80 e0       	ldi	r24, 0x00	; 0
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	01 e0       	ldi	r16, 0x01	; 1
     92e:	0e 94 2f 27 	call	0x4e5e	; 0x4e5e <__ashldi3>
     932:	ac 88       	ldd	r10, Y+20	; 0x14
     934:	bd 88       	ldd	r11, Y+21	; 0x15
     936:	ce 88       	ldd	r12, Y+22	; 0x16
     938:	df 88       	ldd	r13, Y+23	; 0x17
     93a:	e8 8c       	ldd	r14, Y+24	; 0x18
     93c:	f9 8c       	ldd	r15, Y+25	; 0x19
     93e:	0a 8d       	ldd	r16, Y+26	; 0x1a
     940:	1b 8d       	ldd	r17, Y+27	; 0x1b
     942:	0e 94 66 27 	call	0x4ecc	; 0x4ecc <__adddi3>
     946:	d2 2e       	mov	r13, r18
     948:	c3 2e       	mov	r12, r19
     94a:	b4 2e       	mov	r11, r20
     94c:	a5 2e       	mov	r10, r21
     94e:	96 2e       	mov	r9, r22
     950:	87 2e       	mov	r8, r23
     952:	38 2e       	mov	r3, r24
     954:	29 2e       	mov	r2, r25
     956:	68 94       	set
     958:	ee 24       	eor	r14, r14
     95a:	e1 f8       	bld	r14, 1
     95c:	f1 2c       	mov	r15, r1
     95e:	8e 01       	movw	r16, r28
     960:	0f 5f       	subi	r16, 0xFF	; 255
     962:	1f 4f       	sbci	r17, 0xFF	; 255
     964:	ec 8d       	ldd	r30, Y+28	; 0x1c
     966:	fd 8d       	ldd	r31, Y+29	; 0x1d
     968:	09 95       	icall
     96a:	81 11       	cpse	r24, r1
     96c:	49 c1       	rjmp	.+658    	; 0xc00 <__stack+0x301>
     96e:	2f c1       	rjmp	.+606    	; 0xbce <__stack+0x2cf>
     970:	2b 85       	ldd	r18, Y+11	; 0x0b
     972:	3c 85       	ldd	r19, Y+12	; 0x0c
     974:	4d 85       	ldd	r20, Y+13	; 0x0d
     976:	5e 85       	ldd	r21, Y+14	; 0x0e
     978:	23 2b       	or	r18, r19
     97a:	24 2b       	or	r18, r20
     97c:	25 2b       	or	r18, r21
     97e:	49 f4       	brne	.+18     	; 0x992 <__stack+0x93>
     980:	aa a1       	ldd	r26, Y+34	; 0x22
     982:	bb a1       	ldd	r27, Y+35	; 0x23
     984:	9e 96       	adiw	r26, 0x2e	; 46
     986:	4d 92       	st	X+, r4
     988:	5d 92       	st	X+, r5
     98a:	6d 92       	st	X+, r6
     98c:	7c 92       	st	X, r7
     98e:	d1 97       	sbiw	r26, 0x31	; 49
     990:	9c c0       	rjmp	.+312    	; 0xaca <__stack+0x1cb>
     992:	2f 85       	ldd	r18, Y+15	; 0x0f
     994:	38 89       	ldd	r19, Y+16	; 0x10
     996:	49 89       	ldd	r20, Y+17	; 0x11
     998:	5a 89       	ldd	r21, Y+18	; 0x12
     99a:	23 2b       	or	r18, r19
     99c:	24 2b       	or	r18, r20
     99e:	25 2b       	or	r18, r21
     9a0:	49 f4       	brne	.+18     	; 0x9b4 <__stack+0xb5>
     9a2:	8f ef       	ldi	r24, 0xFF	; 255
     9a4:	9f ef       	ldi	r25, 0xFF	; 255
     9a6:	af ef       	ldi	r26, 0xFF	; 255
     9a8:	bf e0       	ldi	r27, 0x0F	; 15
     9aa:	8b 83       	std	Y+3, r24	; 0x03
     9ac:	9c 83       	std	Y+4, r25	; 0x04
     9ae:	ad 83       	std	Y+5, r26	; 0x05
     9b0:	be 83       	std	Y+6, r27	; 0x06
     9b2:	08 c0       	rjmp	.+16     	; 0x9c4 <__stack+0xc5>
     9b4:	2f 85       	ldd	r18, Y+15	; 0x0f
     9b6:	38 89       	ldd	r19, Y+16	; 0x10
     9b8:	49 89       	ldd	r20, Y+17	; 0x11
     9ba:	5a 89       	ldd	r21, Y+18	; 0x12
     9bc:	2b 83       	std	Y+3, r18	; 0x03
     9be:	3c 83       	std	Y+4, r19	; 0x04
     9c0:	4d 83       	std	Y+5, r20	; 0x05
     9c2:	5e 83       	std	Y+6, r21	; 0x06
     9c4:	68 94       	set
     9c6:	ee 24       	eor	r14, r14
     9c8:	e2 f8       	bld	r14, 2
     9ca:	f1 2c       	mov	r15, r1
     9cc:	8e 01       	movw	r16, r28
     9ce:	0d 5f       	subi	r16, 0xFD	; 253
     9d0:	1f 4f       	sbci	r17, 0xFF	; 255
     9d2:	2d 2d       	mov	r18, r13
     9d4:	3c 2d       	mov	r19, r12
     9d6:	4b 2d       	mov	r20, r11
     9d8:	5a 2d       	mov	r21, r10
     9da:	69 2d       	mov	r22, r9
     9dc:	78 2d       	mov	r23, r8
     9de:	83 2d       	mov	r24, r3
     9e0:	92 2d       	mov	r25, r2
     9e2:	ec a1       	ldd	r30, Y+36	; 0x24
     9e4:	fd a1       	ldd	r31, Y+37	; 0x25
     9e6:	09 95       	icall
     9e8:	81 11       	cpse	r24, r1
     9ea:	38 c0       	rjmp	.+112    	; 0xa5c <__stack+0x15d>
     9ec:	d9 c0       	rjmp	.+434    	; 0xba0 <__stack+0x2a1>
     9ee:	2b 85       	ldd	r18, Y+11	; 0x0b
     9f0:	3c 85       	ldd	r19, Y+12	; 0x0c
     9f2:	4d 85       	ldd	r20, Y+13	; 0x0d
     9f4:	5e 85       	ldd	r21, Y+14	; 0x0e
     9f6:	23 2b       	or	r18, r19
     9f8:	24 2b       	or	r18, r20
     9fa:	25 2b       	or	r18, r21
     9fc:	49 f4       	brne	.+18     	; 0xa10 <__stack+0x111>
     9fe:	aa a1       	ldd	r26, Y+34	; 0x22
     a00:	bb a1       	ldd	r27, Y+35	; 0x23
     a02:	9e 96       	adiw	r26, 0x2e	; 46
     a04:	4d 92       	st	X+, r4
     a06:	5d 92       	st	X+, r5
     a08:	6d 92       	st	X+, r6
     a0a:	7c 92       	st	X, r7
     a0c:	d1 97       	sbiw	r26, 0x31	; 49
     a0e:	5d c0       	rjmp	.+186    	; 0xaca <__stack+0x1cb>
     a10:	2f 85       	ldd	r18, Y+15	; 0x0f
     a12:	38 89       	ldd	r19, Y+16	; 0x10
     a14:	49 89       	ldd	r20, Y+17	; 0x11
     a16:	5a 89       	ldd	r21, Y+18	; 0x12
     a18:	23 2b       	or	r18, r19
     a1a:	24 2b       	or	r18, r20
     a1c:	25 2b       	or	r18, r21
     a1e:	29 f4       	brne	.+10     	; 0xa2a <__stack+0x12b>
     a20:	4f ef       	ldi	r20, 0xFF	; 255
     a22:	5f ef       	ldi	r21, 0xFF	; 255
     a24:	5a 83       	std	Y+2, r21	; 0x02
     a26:	49 83       	std	Y+1, r20	; 0x01
     a28:	04 c0       	rjmp	.+8      	; 0xa32 <__stack+0x133>
     a2a:	8f 85       	ldd	r24, Y+15	; 0x0f
     a2c:	98 89       	ldd	r25, Y+16	; 0x10
     a2e:	9a 83       	std	Y+2, r25	; 0x02
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	68 94       	set
     a34:	ee 24       	eor	r14, r14
     a36:	e1 f8       	bld	r14, 1
     a38:	f1 2c       	mov	r15, r1
     a3a:	8e 01       	movw	r16, r28
     a3c:	0f 5f       	subi	r16, 0xFF	; 255
     a3e:	1f 4f       	sbci	r17, 0xFF	; 255
     a40:	2d 2d       	mov	r18, r13
     a42:	3c 2d       	mov	r19, r12
     a44:	4b 2d       	mov	r20, r11
     a46:	5a 2d       	mov	r21, r10
     a48:	69 2d       	mov	r22, r9
     a4a:	78 2d       	mov	r23, r8
     a4c:	83 2d       	mov	r24, r3
     a4e:	92 2d       	mov	r25, r2
     a50:	ec a1       	ldd	r30, Y+36	; 0x24
     a52:	fd a1       	ldd	r31, Y+37	; 0x25
     a54:	09 95       	icall
     a56:	88 23       	and	r24, r24
     a58:	09 f4       	brne	.+2      	; 0xa5c <__stack+0x15d>
     a5a:	a2 c0       	rjmp	.+324    	; 0xba0 <__stack+0x2a1>
     a5c:	2b 85       	ldd	r18, Y+11	; 0x0b
     a5e:	3c 85       	ldd	r19, Y+12	; 0x0c
     a60:	4d 85       	ldd	r20, Y+13	; 0x0d
     a62:	5e 85       	ldd	r21, Y+14	; 0x0e
     a64:	21 50       	subi	r18, 0x01	; 1
     a66:	31 09       	sbc	r19, r1
     a68:	41 09       	sbc	r20, r1
     a6a:	51 09       	sbc	r21, r1
     a6c:	2b 87       	std	Y+11, r18	; 0x0b
     a6e:	3c 87       	std	Y+12, r19	; 0x0c
     a70:	4d 87       	std	Y+13, r20	; 0x0d
     a72:	5e 87       	std	Y+14, r21	; 0x0e
     a74:	4f 86       	std	Y+15, r4	; 0x0f
     a76:	58 8a       	std	Y+16, r5	; 0x10
     a78:	69 8a       	std	Y+17, r6	; 0x11
     a7a:	7a 8a       	std	Y+18, r7	; 0x12
     a7c:	8f 81       	ldd	r24, Y+7	; 0x07
     a7e:	98 85       	ldd	r25, Y+8	; 0x08
     a80:	a9 85       	ldd	r26, Y+9	; 0x09
     a82:	ba 85       	ldd	r27, Y+10	; 0x0a
     a84:	01 97       	sbiw	r24, 0x01	; 1
     a86:	a1 09       	sbc	r26, r1
     a88:	b1 09       	sbc	r27, r1
     a8a:	8f 83       	std	Y+7, r24	; 0x07
     a8c:	98 87       	std	Y+8, r25	; 0x08
     a8e:	a9 87       	std	Y+9, r26	; 0x09
     a90:	ba 87       	std	Y+10, r27	; 0x0a
     a92:	9f ef       	ldi	r25, 0xFF	; 255
     a94:	49 1a       	sub	r4, r25
     a96:	59 0a       	sbc	r5, r25
     a98:	69 0a       	sbc	r6, r25
     a9a:	79 0a       	sbc	r7, r25
     a9c:	2f 81       	ldd	r18, Y+7	; 0x07
     a9e:	38 85       	ldd	r19, Y+8	; 0x08
     aa0:	49 85       	ldd	r20, Y+9	; 0x09
     aa2:	5a 85       	ldd	r21, Y+10	; 0x0a
     aa4:	23 2b       	or	r18, r19
     aa6:	24 2b       	or	r18, r20
     aa8:	25 2b       	or	r18, r21
     aaa:	09 f0       	breq	.+2      	; 0xaae <__stack+0x1af>
     aac:	ec ce       	rjmp	.-552    	; 0x886 <fat_append_clusters+0x142>
     aae:	04 c0       	rjmp	.+8      	; 0xab8 <__stack+0x1b9>
     ab0:	1f 86       	std	Y+15, r1	; 0x0f
     ab2:	18 8a       	std	Y+16, r1	; 0x10
     ab4:	19 8a       	std	Y+17, r1	; 0x11
     ab6:	1a 8a       	std	Y+18, r1	; 0x12
     ab8:	8b 85       	ldd	r24, Y+11	; 0x0b
     aba:	9c 85       	ldd	r25, Y+12	; 0x0c
     abc:	ad 85       	ldd	r26, Y+13	; 0x0d
     abe:	be 85       	ldd	r27, Y+14	; 0x0e
     ac0:	89 2b       	or	r24, r25
     ac2:	8a 2b       	or	r24, r26
     ac4:	8b 2b       	or	r24, r27
     ac6:	09 f0       	breq	.+2      	; 0xaca <__stack+0x1cb>
     ac8:	6b c0       	rjmp	.+214    	; 0xba0 <__stack+0x2a1>
     aca:	2e a1       	ldd	r18, Y+38	; 0x26
     acc:	3f a1       	ldd	r19, Y+39	; 0x27
     ace:	48 a5       	ldd	r20, Y+40	; 0x28
     ad0:	59 a5       	ldd	r21, Y+41	; 0x29
     ad2:	22 30       	cpi	r18, 0x02	; 2
     ad4:	31 05       	cpc	r19, r1
     ad6:	41 05       	cpc	r20, r1
     ad8:	51 05       	cpc	r21, r1
     ada:	08 f4       	brcc	.+2      	; 0xade <__stack+0x1df>
     adc:	7d c0       	rjmp	.+250    	; 0xbd8 <__stack+0x2d9>
     ade:	3b 89       	ldd	r19, Y+19	; 0x13
     ae0:	3b 30       	cpi	r19, 0x0B	; 11
     ae2:	99 f5       	brne	.+102    	; 0xb4a <__stack+0x24b>
     ae4:	8f 85       	ldd	r24, Y+15	; 0x0f
     ae6:	98 89       	ldd	r25, Y+16	; 0x10
     ae8:	a9 89       	ldd	r26, Y+17	; 0x11
     aea:	ba 89       	ldd	r27, Y+18	; 0x12
     aec:	8b 83       	std	Y+3, r24	; 0x03
     aee:	9c 83       	std	Y+4, r25	; 0x04
     af0:	ad 83       	std	Y+5, r26	; 0x05
     af2:	be 83       	std	Y+6, r27	; 0x06
     af4:	2e a1       	ldd	r18, Y+38	; 0x26
     af6:	3f a1       	ldd	r19, Y+39	; 0x27
     af8:	48 a5       	ldd	r20, Y+40	; 0x28
     afa:	59 a5       	ldd	r21, Y+41	; 0x29
     afc:	49 01       	movw	r8, r18
     afe:	5a 01       	movw	r10, r20
     b00:	39 2d       	mov	r19, r9
     b02:	4a 2d       	mov	r20, r10
     b04:	5b 2d       	mov	r21, r11
     b06:	60 e0       	ldi	r22, 0x00	; 0
     b08:	70 e0       	ldi	r23, 0x00	; 0
     b0a:	80 e0       	ldi	r24, 0x00	; 0
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	02 e0       	ldi	r16, 0x02	; 2
     b10:	0e 94 2f 27 	call	0x4e5e	; 0x4e5e <__ashldi3>
     b14:	ac 88       	ldd	r10, Y+20	; 0x14
     b16:	bd 88       	ldd	r11, Y+21	; 0x15
     b18:	ce 88       	ldd	r12, Y+22	; 0x16
     b1a:	df 88       	ldd	r13, Y+23	; 0x17
     b1c:	e8 8c       	ldd	r14, Y+24	; 0x18
     b1e:	f9 8c       	ldd	r15, Y+25	; 0x19
     b20:	0a 8d       	ldd	r16, Y+26	; 0x1a
     b22:	1b 8d       	ldd	r17, Y+27	; 0x1b
     b24:	0e 94 66 27 	call	0x4ecc	; 0x4ecc <__adddi3>
     b28:	68 94       	set
     b2a:	ee 24       	eor	r14, r14
     b2c:	e2 f8       	bld	r14, 2
     b2e:	f1 2c       	mov	r15, r1
     b30:	8e 01       	movw	r16, r28
     b32:	0d 5f       	subi	r16, 0xFD	; 253
     b34:	1f 4f       	sbci	r17, 0xFF	; 255
     b36:	ec a1       	ldd	r30, Y+36	; 0x24
     b38:	fd a1       	ldd	r31, Y+37	; 0x25
     b3a:	09 95       	icall
     b3c:	88 23       	and	r24, r24
     b3e:	81 f1       	breq	.+96     	; 0xba0 <__stack+0x2a1>
     b40:	6f 85       	ldd	r22, Y+15	; 0x0f
     b42:	78 89       	ldd	r23, Y+16	; 0x10
     b44:	89 89       	ldd	r24, Y+17	; 0x11
     b46:	9a 89       	ldd	r25, Y+18	; 0x12
     b48:	61 c0       	rjmp	.+194    	; 0xc0c <__stack+0x30d>
     b4a:	2f 85       	ldd	r18, Y+15	; 0x0f
     b4c:	38 89       	ldd	r19, Y+16	; 0x10
     b4e:	3a 83       	std	Y+2, r19	; 0x02
     b50:	29 83       	std	Y+1, r18	; 0x01
     b52:	8e a1       	ldd	r24, Y+38	; 0x26
     b54:	9f a1       	ldd	r25, Y+39	; 0x27
     b56:	a8 a5       	ldd	r26, Y+40	; 0x28
     b58:	b9 a5       	ldd	r27, Y+41	; 0x29
     b5a:	4c 01       	movw	r8, r24
     b5c:	5d 01       	movw	r10, r26
     b5e:	28 2f       	mov	r18, r24
     b60:	39 2d       	mov	r19, r9
     b62:	4a 2d       	mov	r20, r10
     b64:	5b 2d       	mov	r21, r11
     b66:	60 e0       	ldi	r22, 0x00	; 0
     b68:	70 e0       	ldi	r23, 0x00	; 0
     b6a:	80 e0       	ldi	r24, 0x00	; 0
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	01 e0       	ldi	r16, 0x01	; 1
     b70:	0e 94 2f 27 	call	0x4e5e	; 0x4e5e <__ashldi3>
     b74:	ac 88       	ldd	r10, Y+20	; 0x14
     b76:	bd 88       	ldd	r11, Y+21	; 0x15
     b78:	ce 88       	ldd	r12, Y+22	; 0x16
     b7a:	df 88       	ldd	r13, Y+23	; 0x17
     b7c:	e8 8c       	ldd	r14, Y+24	; 0x18
     b7e:	f9 8c       	ldd	r15, Y+25	; 0x19
     b80:	0a 8d       	ldd	r16, Y+26	; 0x1a
     b82:	1b 8d       	ldd	r17, Y+27	; 0x1b
     b84:	0e 94 66 27 	call	0x4ecc	; 0x4ecc <__adddi3>
     b88:	68 94       	set
     b8a:	ee 24       	eor	r14, r14
     b8c:	e1 f8       	bld	r14, 1
     b8e:	f1 2c       	mov	r15, r1
     b90:	8e 01       	movw	r16, r28
     b92:	0f 5f       	subi	r16, 0xFF	; 255
     b94:	1f 4f       	sbci	r17, 0xFF	; 255
     b96:	ec a1       	ldd	r30, Y+36	; 0x24
     b98:	fd a1       	ldd	r31, Y+37	; 0x25
     b9a:	09 95       	icall
     b9c:	81 11       	cpse	r24, r1
     b9e:	21 c0       	rjmp	.+66     	; 0xbe2 <__stack+0x2e3>
     ba0:	4f 85       	ldd	r20, Y+15	; 0x0f
     ba2:	58 89       	ldd	r21, Y+16	; 0x10
     ba4:	69 89       	ldd	r22, Y+17	; 0x11
     ba6:	7a 89       	ldd	r23, Y+18	; 0x12
     ba8:	8a a1       	ldd	r24, Y+34	; 0x22
     baa:	9b a1       	ldd	r25, Y+35	; 0x23
     bac:	0e 94 da 01 	call	0x3b4	; 0x3b4 <fat_free_clusters>
     bb0:	60 e0       	ldi	r22, 0x00	; 0
     bb2:	70 e0       	ldi	r23, 0x00	; 0
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	29 c0       	rjmp	.+82     	; 0xc0c <__stack+0x30d>
     bba:	60 e0       	ldi	r22, 0x00	; 0
     bbc:	70 e0       	ldi	r23, 0x00	; 0
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	24 c0       	rjmp	.+72     	; 0xc0c <__stack+0x30d>
     bc4:	60 e0       	ldi	r22, 0x00	; 0
     bc6:	70 e0       	ldi	r23, 0x00	; 0
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	1f c0       	rjmp	.+62     	; 0xc0c <__stack+0x30d>
     bce:	60 e0       	ldi	r22, 0x00	; 0
     bd0:	70 e0       	ldi	r23, 0x00	; 0
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	1a c0       	rjmp	.+52     	; 0xc0c <__stack+0x30d>
     bd8:	6f 85       	ldd	r22, Y+15	; 0x0f
     bda:	78 89       	ldd	r23, Y+16	; 0x10
     bdc:	89 89       	ldd	r24, Y+17	; 0x11
     bde:	9a 89       	ldd	r25, Y+18	; 0x12
     be0:	15 c0       	rjmp	.+42     	; 0xc0c <__stack+0x30d>
     be2:	6f 85       	ldd	r22, Y+15	; 0x0f
     be4:	78 89       	ldd	r23, Y+16	; 0x10
     be6:	89 89       	ldd	r24, Y+17	; 0x11
     be8:	9a 89       	ldd	r25, Y+18	; 0x12
     bea:	10 c0       	rjmp	.+32     	; 0xc0c <__stack+0x30d>
     bec:	8b 81       	ldd	r24, Y+3	; 0x03
     bee:	9c 81       	ldd	r25, Y+4	; 0x04
     bf0:	ad 81       	ldd	r26, Y+5	; 0x05
     bf2:	be 81       	ldd	r27, Y+6	; 0x06
     bf4:	89 2b       	or	r24, r25
     bf6:	8a 2b       	or	r24, r26
     bf8:	8b 2b       	or	r24, r27
     bfa:	09 f0       	breq	.+2      	; 0xbfe <__stack+0x2ff>
     bfc:	3f cf       	rjmp	.-386    	; 0xa7c <__stack+0x17d>
     bfe:	b8 ce       	rjmp	.-656    	; 0x970 <__stack+0x71>
     c00:	89 81       	ldd	r24, Y+1	; 0x01
     c02:	9a 81       	ldd	r25, Y+2	; 0x02
     c04:	89 2b       	or	r24, r25
     c06:	09 f0       	breq	.+2      	; 0xc0a <__stack+0x30b>
     c08:	39 cf       	rjmp	.-398    	; 0xa7c <__stack+0x17d>
     c0a:	f1 ce       	rjmp	.-542    	; 0x9ee <__stack+0xef>
     c0c:	a9 96       	adiw	r28, 0x29	; 41
     c0e:	0f b6       	in	r0, 0x3f	; 63
     c10:	f8 94       	cli
     c12:	de bf       	out	0x3e, r29	; 62
     c14:	0f be       	out	0x3f, r0	; 63
     c16:	cd bf       	out	0x3d, r28	; 61
     c18:	df 91       	pop	r29
     c1a:	cf 91       	pop	r28
     c1c:	1f 91       	pop	r17
     c1e:	0f 91       	pop	r16
     c20:	ff 90       	pop	r15
     c22:	ef 90       	pop	r14
     c24:	df 90       	pop	r13
     c26:	cf 90       	pop	r12
     c28:	bf 90       	pop	r11
     c2a:	af 90       	pop	r10
     c2c:	9f 90       	pop	r9
     c2e:	8f 90       	pop	r8
     c30:	7f 90       	pop	r7
     c32:	6f 90       	pop	r6
     c34:	5f 90       	pop	r5
     c36:	4f 90       	pop	r4
     c38:	3f 90       	pop	r3
     c3a:	2f 90       	pop	r2
     c3c:	08 95       	ret

00000c3e <fat_clear_cluster_callback>:
     c3e:	80 e1       	ldi	r24, 0x10	; 16
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	08 95       	ret

00000c44 <fat_calc_83_checksum>:
     c44:	9c 01       	movw	r18, r24
     c46:	fc 01       	movw	r30, r24
     c48:	81 91       	ld	r24, Z+
     c4a:	25 5f       	subi	r18, 0xF5	; 245
     c4c:	3f 4f       	sbci	r19, 0xFF	; 255
     c4e:	80 fb       	bst	r24, 0
     c50:	87 95       	ror	r24
     c52:	87 f9       	bld	r24, 7
     c54:	91 91       	ld	r25, Z+
     c56:	89 0f       	add	r24, r25
     c58:	e2 17       	cp	r30, r18
     c5a:	f3 07       	cpc	r31, r19
     c5c:	c1 f7       	brne	.-16     	; 0xc4e <fat_calc_83_checksum+0xa>
     c5e:	08 95       	ret

00000c60 <fat_clear_cluster>:
     c60:	8f 92       	push	r8
     c62:	9f 92       	push	r9
     c64:	af 92       	push	r10
     c66:	bf 92       	push	r11
     c68:	cf 92       	push	r12
     c6a:	df 92       	push	r13
     c6c:	ef 92       	push	r14
     c6e:	ff 92       	push	r15
     c70:	0f 93       	push	r16
     c72:	1f 93       	push	r17
     c74:	cf 93       	push	r28
     c76:	df 93       	push	r29
     c78:	cd b7       	in	r28, 0x3d	; 61
     c7a:	de b7       	in	r29, 0x3e	; 62
     c7c:	68 97       	sbiw	r28, 0x18	; 24
     c7e:	0f b6       	in	r0, 0x3f	; 63
     c80:	f8 94       	cli
     c82:	de bf       	out	0x3e, r29	; 62
     c84:	0f be       	out	0x3f, r0	; 63
     c86:	cd bf       	out	0x3d, r28	; 61
     c88:	42 30       	cpi	r20, 0x02	; 2
     c8a:	51 05       	cpc	r21, r1
     c8c:	61 05       	cpc	r22, r1
     c8e:	71 05       	cpc	r23, r1
     c90:	08 f4       	brcc	.+2      	; 0xc94 <fat_clear_cluster+0x34>
     c92:	5a c0       	rjmp	.+180    	; 0xd48 <fat_clear_cluster+0xe8>
     c94:	4c 01       	movw	r8, r24
     c96:	00 97       	sbiw	r24, 0x00	; 0
     c98:	a1 f1       	breq	.+104    	; 0xd02 <fat_clear_cluster+0xa2>
     c9a:	42 50       	subi	r20, 0x02	; 2
     c9c:	51 09       	sbc	r21, r1
     c9e:	61 09       	sbc	r22, r1
     ca0:	71 09       	sbc	r23, r1
     ca2:	6a 01       	movw	r12, r20
     ca4:	7b 01       	movw	r14, r22
     ca6:	00 e0       	ldi	r16, 0x00	; 0
     ca8:	10 e0       	ldi	r17, 0x00	; 0
     caa:	98 01       	movw	r18, r16
     cac:	49 8b       	std	Y+17, r20	; 0x11
     cae:	da 8a       	std	Y+18, r13	; 0x12
     cb0:	eb 8a       	std	Y+19, r14	; 0x13
     cb2:	fc 8a       	std	Y+20, r15	; 0x14
     cb4:	0d 8b       	std	Y+21, r16	; 0x15
     cb6:	1e 8b       	std	Y+22, r17	; 0x16
     cb8:	2f 8b       	std	Y+23, r18	; 0x17
     cba:	38 8f       	std	Y+24, r19	; 0x18
     cbc:	dc 01       	movw	r26, r24
     cbe:	58 96       	adiw	r26, 0x18	; 24
     cc0:	0d 91       	ld	r16, X+
     cc2:	1c 91       	ld	r17, X
     cc4:	59 97       	sbiw	r26, 0x19	; 25
     cc6:	a0 2e       	mov	r10, r16
     cc8:	b1 2e       	mov	r11, r17
     cca:	c1 2c       	mov	r12, r1
     ccc:	d1 2c       	mov	r13, r1
     cce:	e1 2c       	mov	r14, r1
     cd0:	f1 2c       	mov	r15, r1
     cd2:	00 e0       	ldi	r16, 0x00	; 0
     cd4:	10 e0       	ldi	r17, 0x00	; 0
     cd6:	29 89       	ldd	r18, Y+17	; 0x11
     cd8:	3a 89       	ldd	r19, Y+18	; 0x12
     cda:	4b 89       	ldd	r20, Y+19	; 0x13
     cdc:	5c 89       	ldd	r21, Y+20	; 0x14
     cde:	60 e0       	ldi	r22, 0x00	; 0
     ce0:	70 e0       	ldi	r23, 0x00	; 0
     ce2:	80 e0       	ldi	r24, 0x00	; 0
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	0e 94 d6 26 	call	0x4dac	; 0x4dac <__muldi3>
     cea:	f4 01       	movw	r30, r8
     cec:	a2 8c       	ldd	r10, Z+26	; 0x1a
     cee:	b3 8c       	ldd	r11, Z+27	; 0x1b
     cf0:	c4 8c       	ldd	r12, Z+28	; 0x1c
     cf2:	d5 8c       	ldd	r13, Z+29	; 0x1d
     cf4:	e6 8c       	ldd	r14, Z+30	; 0x1e
     cf6:	f7 8c       	ldd	r15, Z+31	; 0x1f
     cf8:	00 a1       	ldd	r16, Z+32	; 0x20
     cfa:	11 a1       	ldd	r17, Z+33	; 0x21
     cfc:	0e 94 66 27 	call	0x4ecc	; 0x4ecc <__adddi3>
     d00:	08 c0       	rjmp	.+16     	; 0xd12 <fat_clear_cluster+0xb2>
     d02:	20 e0       	ldi	r18, 0x00	; 0
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	40 e0       	ldi	r20, 0x00	; 0
     d08:	50 e0       	ldi	r21, 0x00	; 0
     d0a:	60 e0       	ldi	r22, 0x00	; 0
     d0c:	70 e0       	ldi	r23, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	8e 01       	movw	r16, r28
     d14:	0f 5f       	subi	r16, 0xFF	; 255
     d16:	1f 4f       	sbci	r17, 0xFF	; 255
     d18:	e0 e1       	ldi	r30, 0x10	; 16
     d1a:	d8 01       	movw	r26, r16
     d1c:	1d 92       	st	X+, r1
     d1e:	ea 95       	dec	r30
     d20:	e9 f7       	brne	.-6      	; 0xd1c <fat_clear_cluster+0xbc>
     d22:	f4 01       	movw	r30, r8
     d24:	e0 8c       	ldd	r14, Z+24	; 0x18
     d26:	f1 8c       	ldd	r15, Z+25	; 0x19
     d28:	01 90       	ld	r0, Z+
     d2a:	f0 81       	ld	r31, Z
     d2c:	e0 2d       	mov	r30, r0
     d2e:	06 80       	ldd	r0, Z+6	; 0x06
     d30:	f7 81       	ldd	r31, Z+7	; 0x07
     d32:	e0 2d       	mov	r30, r0
     d34:	a1 2c       	mov	r10, r1
     d36:	b1 2c       	mov	r11, r1
     d38:	0f 2e       	mov	r0, r31
     d3a:	ff e1       	ldi	r31, 0x1F	; 31
     d3c:	cf 2e       	mov	r12, r31
     d3e:	f6 e0       	ldi	r31, 0x06	; 6
     d40:	df 2e       	mov	r13, r31
     d42:	f0 2d       	mov	r31, r0
     d44:	09 95       	icall
     d46:	01 c0       	rjmp	.+2      	; 0xd4a <fat_clear_cluster+0xea>
     d48:	80 e0       	ldi	r24, 0x00	; 0
     d4a:	68 96       	adiw	r28, 0x18	; 24
     d4c:	0f b6       	in	r0, 0x3f	; 63
     d4e:	f8 94       	cli
     d50:	de bf       	out	0x3e, r29	; 62
     d52:	0f be       	out	0x3f, r0	; 63
     d54:	cd bf       	out	0x3d, r28	; 61
     d56:	df 91       	pop	r29
     d58:	cf 91       	pop	r28
     d5a:	1f 91       	pop	r17
     d5c:	0f 91       	pop	r16
     d5e:	ff 90       	pop	r15
     d60:	ef 90       	pop	r14
     d62:	df 90       	pop	r13
     d64:	cf 90       	pop	r12
     d66:	bf 90       	pop	r11
     d68:	af 90       	pop	r10
     d6a:	9f 90       	pop	r9
     d6c:	8f 90       	pop	r8
     d6e:	08 95       	ret

00000d70 <fat_dir_entry_read_callback>:
     d70:	2f 92       	push	r2
     d72:	3f 92       	push	r3
     d74:	4f 92       	push	r4
     d76:	5f 92       	push	r5
     d78:	6f 92       	push	r6
     d7a:	7f 92       	push	r7
     d7c:	8f 92       	push	r8
     d7e:	9f 92       	push	r9
     d80:	af 92       	push	r10
     d82:	bf 92       	push	r11
     d84:	cf 92       	push	r12
     d86:	df 92       	push	r13
     d88:	ef 92       	push	r14
     d8a:	ff 92       	push	r15
     d8c:	0f 93       	push	r16
     d8e:	1f 93       	push	r17
     d90:	cf 93       	push	r28
     d92:	df 93       	push	r29
     d94:	cd b7       	in	r28, 0x3d	; 61
     d96:	de b7       	in	r29, 0x3e	; 62
     d98:	2d 97       	sbiw	r28, 0x0d	; 13
     d9a:	0f b6       	in	r0, 0x3f	; 63
     d9c:	f8 94       	cli
     d9e:	de bf       	out	0x3e, r29	; 62
     da0:	0f be       	out	0x3f, r0	; 63
     da2:	cd bf       	out	0x3d, r28	; 61
     da4:	f7 01       	movw	r30, r14
     da6:	a0 80       	ld	r10, Z
     da8:	b1 80       	ldd	r11, Z+1	; 0x01
     daa:	a2 81       	ldd	r26, Z+2	; 0x02
     dac:	b3 81       	ldd	r27, Z+3	; 0x03
     dae:	90 96       	adiw	r26, 0x20	; 32
     db0:	b3 83       	std	Z+3, r27	; 0x03
     db2:	a2 83       	std	Z+2, r26	; 0x02
     db4:	dc 01       	movw	r26, r24
     db6:	fc 90       	ld	r15, X
     db8:	b5 ee       	ldi	r27, 0xE5	; 229
     dba:	fb 16       	cp	r15, r27
     dbc:	11 f0       	breq	.+4      	; 0xdc2 <fat_dir_entry_read_callback+0x52>
     dbe:	f1 10       	cpse	r15, r1
     dc0:	03 c0       	rjmp	.+6      	; 0xdc8 <fat_dir_entry_read_callback+0x58>
     dc2:	14 82       	std	Z+4, r1	; 0x04
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	30 c1       	rjmp	.+608    	; 0x1028 <fat_dir_entry_read_callback+0x2b8>
     dc8:	45 01       	movw	r8, r10
     dca:	dc 01       	movw	r26, r24
     dcc:	1b 96       	adiw	r26, 0x0b	; 11
     dce:	fc 90       	ld	r15, X
     dd0:	bf e0       	ldi	r27, 0x0F	; 15
     dd2:	fb 12       	cpse	r15, r27
     dd4:	48 c0       	rjmp	.+144    	; 0xe66 <fat_dir_entry_read_callback+0xf6>
     dd6:	f4 80       	ldd	r15, Z+4	; 0x04
     dd8:	ff 20       	and	r15, r15
     dda:	29 f0       	breq	.+10     	; 0xde6 <fat_dir_entry_read_callback+0x76>
     ddc:	dc 01       	movw	r26, r24
     dde:	1d 96       	adiw	r26, 0x0d	; 13
     de0:	ec 90       	ld	r14, X
     de2:	fe 14       	cp	r15, r14
     de4:	a9 f0       	breq	.+42     	; 0xe10 <fat_dir_entry_read_callback+0xa0>
     de6:	0f 2e       	mov	r0, r31
     de8:	f1 e3       	ldi	r31, 0x31	; 49
     dea:	ff 2e       	mov	r15, r31
     dec:	f0 2d       	mov	r31, r0
     dee:	d5 01       	movw	r26, r10
     df0:	1d 92       	st	X+, r1
     df2:	fa 94       	dec	r15
     df4:	e9 f7       	brne	.-6      	; 0xdf0 <fat_dir_entry_read_callback+0x80>
     df6:	dc 01       	movw	r26, r24
     df8:	1d 96       	adiw	r26, 0x0d	; 13
     dfa:	fc 90       	ld	r15, X
     dfc:	f4 82       	std	Z+4, r15	; 0x04
     dfe:	f5 01       	movw	r30, r10
     e00:	01 a7       	std	Z+41, r16	; 0x29
     e02:	12 a7       	std	Z+42, r17	; 0x2a
     e04:	23 a7       	std	Z+43, r18	; 0x2b
     e06:	34 a7       	std	Z+44, r19	; 0x2c
     e08:	45 a7       	std	Z+45, r20	; 0x2d
     e0a:	56 a7       	std	Z+46, r21	; 0x2e
     e0c:	67 a7       	std	Z+47, r22	; 0x2f
     e0e:	70 ab       	std	Z+48, r23	; 0x30
     e10:	dc 01       	movw	r26, r24
     e12:	2c 91       	ld	r18, X
     e14:	2f 73       	andi	r18, 0x3F	; 63
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	21 50       	subi	r18, 0x01	; 1
     e1a:	31 09       	sbc	r19, r1
     e1c:	4d e0       	ldi	r20, 0x0D	; 13
     e1e:	42 9f       	mul	r20, r18
     e20:	b0 01       	movw	r22, r0
     e22:	43 9f       	mul	r20, r19
     e24:	70 0d       	add	r23, r0
     e26:	11 24       	eor	r1, r1
     e28:	2d e0       	ldi	r18, 0x0D	; 13
     e2a:	e0 e0       	ldi	r30, 0x00	; 0
     e2c:	f1 e0       	ldi	r31, 0x01	; 1
     e2e:	de 01       	movw	r26, r28
     e30:	11 96       	adiw	r26, 0x01	; 1
     e32:	01 90       	ld	r0, Z+
     e34:	0d 92       	st	X+, r0
     e36:	2a 95       	dec	r18
     e38:	e1 f7       	brne	.-8      	; 0xe32 <fat_dir_entry_read_callback+0xc2>
     e3a:	6f 31       	cpi	r22, 0x1F	; 31
     e3c:	71 05       	cpc	r23, r1
     e3e:	08 f4       	brcc	.+2      	; 0xe42 <fat_dir_entry_read_callback+0xd2>
     e40:	d6 c0       	rjmp	.+428    	; 0xfee <fat_dir_entry_read_callback+0x27e>
     e42:	0f c0       	rjmp	.+30     	; 0xe62 <fat_dir_entry_read_callback+0xf2>
     e44:	21 91       	ld	r18, Z+
     e46:	8c 01       	movw	r16, r24
     e48:	02 0f       	add	r16, r18
     e4a:	11 1d       	adc	r17, r1
     e4c:	d8 01       	movw	r26, r16
     e4e:	2c 91       	ld	r18, X
     e50:	d5 01       	movw	r26, r10
     e52:	2d 93       	st	X+, r18
     e54:	5d 01       	movw	r10, r26
     e56:	e6 17       	cp	r30, r22
     e58:	f7 07       	cpc	r31, r23
     e5a:	19 f0       	breq	.+6      	; 0xe62 <fat_dir_entry_read_callback+0xf2>
     e5c:	e4 17       	cp	r30, r20
     e5e:	f5 07       	cpc	r31, r21
     e60:	89 f7       	brne	.-30     	; 0xe44 <fat_dir_entry_read_callback+0xd4>
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	e1 c0       	rjmp	.+450    	; 0x1028 <fat_dir_entry_read_callback+0x2b8>
     e66:	7f 01       	movw	r14, r30
     e68:	77 2e       	mov	r7, r23
     e6a:	66 2e       	mov	r6, r22
     e6c:	55 2e       	mov	r5, r21
     e6e:	44 2e       	mov	r4, r20
     e70:	33 2e       	mov	r3, r19
     e72:	22 2e       	mov	r2, r18
     e74:	6c 01       	movw	r12, r24
     e76:	f5 01       	movw	r30, r10
     e78:	80 81       	ld	r24, Z
     e7a:	88 23       	and	r24, r24
     e7c:	49 f0       	breq	.+18     	; 0xe90 <fat_dir_entry_read_callback+0x120>
     e7e:	c6 01       	movw	r24, r12
     e80:	0e 94 22 06 	call	0xc44	; 0xc44 <fat_calc_83_checksum>
     e84:	d7 01       	movw	r26, r14
     e86:	14 96       	adiw	r26, 0x04	; 4
     e88:	9c 91       	ld	r25, X
     e8a:	98 17       	cp	r25, r24
     e8c:	09 f4       	brne	.+2      	; 0xe90 <fat_dir_entry_read_callback+0x120>
     e8e:	79 c0       	rjmp	.+242    	; 0xf82 <fat_dir_entry_read_callback+0x212>
     e90:	81 e3       	ldi	r24, 0x31	; 49
     e92:	f5 01       	movw	r30, r10
     e94:	11 92       	st	Z+, r1
     e96:	8a 95       	dec	r24
     e98:	e9 f7       	brne	.-6      	; 0xe94 <fat_dir_entry_read_callback+0x124>
     e9a:	d5 01       	movw	r26, r10
     e9c:	99 96       	adiw	r26, 0x29	; 41
     e9e:	0c 93       	st	X, r16
     ea0:	99 97       	sbiw	r26, 0x29	; 41
     ea2:	9a 96       	adiw	r26, 0x2a	; 42
     ea4:	1c 93       	st	X, r17
     ea6:	9a 97       	sbiw	r26, 0x2a	; 42
     ea8:	9b 96       	adiw	r26, 0x2b	; 43
     eaa:	2c 92       	st	X, r2
     eac:	9b 97       	sbiw	r26, 0x2b	; 43
     eae:	9c 96       	adiw	r26, 0x2c	; 44
     eb0:	3c 92       	st	X, r3
     eb2:	9c 97       	sbiw	r26, 0x2c	; 44
     eb4:	9d 96       	adiw	r26, 0x2d	; 45
     eb6:	4c 92       	st	X, r4
     eb8:	9d 97       	sbiw	r26, 0x2d	; 45
     eba:	9e 96       	adiw	r26, 0x2e	; 46
     ebc:	5c 92       	st	X, r5
     ebe:	9e 97       	sbiw	r26, 0x2e	; 46
     ec0:	9f 96       	adiw	r26, 0x2f	; 47
     ec2:	6c 92       	st	X, r6
     ec4:	9f 97       	sbiw	r26, 0x2f	; 47
     ec6:	d0 96       	adiw	r26, 0x30	; 48
     ec8:	7c 92       	st	X, r7
     eca:	f6 01       	movw	r30, r12
     ecc:	90 81       	ld	r25, Z
     ece:	90 32       	cpi	r25, 0x20	; 32
     ed0:	e9 f0       	breq	.+58     	; 0xf0c <fat_dir_entry_read_callback+0x19c>
     ed2:	a5 01       	movw	r20, r10
     ed4:	80 e0       	ldi	r24, 0x00	; 0
     ed6:	04 c0       	rjmp	.+8      	; 0xee0 <fat_dir_entry_read_callback+0x170>
     ed8:	31 96       	adiw	r30, 0x01	; 1
     eda:	90 81       	ld	r25, Z
     edc:	90 32       	cpi	r25, 0x20	; 32
     ede:	b9 f0       	breq	.+46     	; 0xf0e <fat_dir_entry_read_callback+0x19e>
     ee0:	da 01       	movw	r26, r20
     ee2:	9d 93       	st	X+, r25
     ee4:	ad 01       	movw	r20, r26
     ee6:	d6 01       	movw	r26, r12
     ee8:	1c 96       	adiw	r26, 0x0c	; 12
     eea:	2c 91       	ld	r18, X
     eec:	23 ff       	sbrs	r18, 3
     eee:	0a c0       	rjmp	.+20     	; 0xf04 <fat_dir_entry_read_callback+0x194>
     ef0:	20 81       	ld	r18, Z
     ef2:	21 54       	subi	r18, 0x41	; 65
     ef4:	2a 31       	cpi	r18, 0x1A	; 26
     ef6:	30 f4       	brcc	.+12     	; 0xf04 <fat_dir_entry_read_callback+0x194>
     ef8:	9a 01       	movw	r18, r20
     efa:	21 50       	subi	r18, 0x01	; 1
     efc:	31 09       	sbc	r19, r1
     efe:	90 5e       	subi	r25, 0xE0	; 224
     f00:	d9 01       	movw	r26, r18
     f02:	9c 93       	st	X, r25
     f04:	8f 5f       	subi	r24, 0xFF	; 255
     f06:	88 30       	cpi	r24, 0x08	; 8
     f08:	39 f7       	brne	.-50     	; 0xed8 <fat_dir_entry_read_callback+0x168>
     f0a:	01 c0       	rjmp	.+2      	; 0xf0e <fat_dir_entry_read_callback+0x19e>
     f0c:	80 e0       	ldi	r24, 0x00	; 0
     f0e:	f5 01       	movw	r30, r10
     f10:	90 81       	ld	r25, Z
     f12:	95 30       	cpi	r25, 0x05	; 5
     f14:	11 f4       	brne	.+4      	; 0xf1a <fat_dir_entry_read_callback+0x1aa>
     f16:	95 ee       	ldi	r25, 0xE5	; 229
     f18:	90 83       	st	Z, r25
     f1a:	d6 01       	movw	r26, r12
     f1c:	18 96       	adiw	r26, 0x08	; 8
     f1e:	9c 91       	ld	r25, X
     f20:	18 97       	sbiw	r26, 0x08	; 8
     f22:	90 32       	cpi	r25, 0x20	; 32
     f24:	51 f1       	breq	.+84     	; 0xf7a <fat_dir_entry_read_callback+0x20a>
     f26:	91 e0       	ldi	r25, 0x01	; 1
     f28:	98 0f       	add	r25, r24
     f2a:	2e e2       	ldi	r18, 0x2E	; 46
     f2c:	f5 01       	movw	r30, r10
     f2e:	e8 0f       	add	r30, r24
     f30:	f1 1d       	adc	r31, r1
     f32:	20 83       	st	Z, r18
     f34:	18 96       	adiw	r26, 0x08	; 8
     f36:	2c 91       	ld	r18, X
     f38:	20 32       	cpi	r18, 0x20	; 32
     f3a:	e1 f0       	breq	.+56     	; 0xf74 <fat_dir_entry_read_callback+0x204>
     f3c:	f6 01       	movw	r30, r12
     f3e:	8c 5f       	subi	r24, 0xFC	; 252
     f40:	04 c0       	rjmp	.+8      	; 0xf4a <fat_dir_entry_read_callback+0x1da>
     f42:	31 96       	adiw	r30, 0x01	; 1
     f44:	20 85       	ldd	r18, Z+8	; 0x08
     f46:	20 32       	cpi	r18, 0x20	; 32
     f48:	b9 f0       	breq	.+46     	; 0xf78 <fat_dir_entry_read_callback+0x208>
     f4a:	a4 01       	movw	r20, r8
     f4c:	49 0f       	add	r20, r25
     f4e:	51 1d       	adc	r21, r1
     f50:	da 01       	movw	r26, r20
     f52:	2c 93       	st	X, r18
     f54:	d6 01       	movw	r26, r12
     f56:	1c 96       	adiw	r26, 0x0c	; 12
     f58:	3c 91       	ld	r19, X
     f5a:	34 ff       	sbrs	r19, 4
     f5c:	07 c0       	rjmp	.+14     	; 0xf6c <fat_dir_entry_read_callback+0x1fc>
     f5e:	30 85       	ldd	r19, Z+8	; 0x08
     f60:	31 54       	subi	r19, 0x41	; 65
     f62:	3a 31       	cpi	r19, 0x1A	; 26
     f64:	18 f4       	brcc	.+6      	; 0xf6c <fat_dir_entry_read_callback+0x1fc>
     f66:	20 5e       	subi	r18, 0xE0	; 224
     f68:	da 01       	movw	r26, r20
     f6a:	2c 93       	st	X, r18
     f6c:	9f 5f       	subi	r25, 0xFF	; 255
     f6e:	98 13       	cpse	r25, r24
     f70:	e8 cf       	rjmp	.-48     	; 0xf42 <fat_dir_entry_read_callback+0x1d2>
     f72:	03 c0       	rjmp	.+6      	; 0xf7a <fat_dir_entry_read_callback+0x20a>
     f74:	89 2f       	mov	r24, r25
     f76:	01 c0       	rjmp	.+2      	; 0xf7a <fat_dir_entry_read_callback+0x20a>
     f78:	89 2f       	mov	r24, r25
     f7a:	f5 01       	movw	r30, r10
     f7c:	e8 0f       	add	r30, r24
     f7e:	f1 1d       	adc	r31, r1
     f80:	10 82       	st	Z, r1
     f82:	f6 01       	movw	r30, r12
     f84:	83 85       	ldd	r24, Z+11	; 0x0b
     f86:	d5 01       	movw	r26, r10
     f88:	90 96       	adiw	r26, 0x20	; 32
     f8a:	8c 93       	st	X, r24
     f8c:	c6 01       	movw	r24, r12
     f8e:	4a 96       	adiw	r24, 0x1a	; 26
     f90:	0e 94 02 01 	call	0x204	; 0x204 <read16>
     f94:	a0 e0       	ldi	r26, 0x00	; 0
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	f5 01       	movw	r30, r10
     f9a:	81 a3       	std	Z+33, r24	; 0x21
     f9c:	92 a3       	std	Z+34, r25	; 0x22
     f9e:	a3 a3       	std	Z+35, r26	; 0x23
     fa0:	b4 a3       	std	Z+36, r27	; 0x24
     fa2:	c6 01       	movw	r24, r12
     fa4:	44 96       	adiw	r24, 0x14	; 20
     fa6:	0e 94 02 01 	call	0x204	; 0x204 <read16>
     faa:	a0 e0       	ldi	r26, 0x00	; 0
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	dc 01       	movw	r26, r24
     fb0:	99 27       	eor	r25, r25
     fb2:	88 27       	eor	r24, r24
     fb4:	f5 01       	movw	r30, r10
     fb6:	41 a1       	ldd	r20, Z+33	; 0x21
     fb8:	52 a1       	ldd	r21, Z+34	; 0x22
     fba:	63 a1       	ldd	r22, Z+35	; 0x23
     fbc:	74 a1       	ldd	r23, Z+36	; 0x24
     fbe:	84 2b       	or	r24, r20
     fc0:	95 2b       	or	r25, r21
     fc2:	a6 2b       	or	r26, r22
     fc4:	b7 2b       	or	r27, r23
     fc6:	81 a3       	std	Z+33, r24	; 0x21
     fc8:	92 a3       	std	Z+34, r25	; 0x22
     fca:	a3 a3       	std	Z+35, r26	; 0x23
     fcc:	b4 a3       	std	Z+36, r27	; 0x24
     fce:	c6 01       	movw	r24, r12
     fd0:	4c 96       	adiw	r24, 0x1c	; 28
     fd2:	0e 94 0c 01 	call	0x218	; 0x218 <read32>
     fd6:	d5 01       	movw	r26, r10
     fd8:	95 96       	adiw	r26, 0x25	; 37
     fda:	6d 93       	st	X+, r22
     fdc:	7d 93       	st	X+, r23
     fde:	8d 93       	st	X+, r24
     fe0:	9c 93       	st	X, r25
     fe2:	98 97       	sbiw	r26, 0x28	; 40
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	f7 01       	movw	r30, r14
     fe8:	85 83       	std	Z+5, r24	; 0x05
     fea:	80 e0       	ldi	r24, 0x00	; 0
     fec:	1d c0       	rjmp	.+58     	; 0x1028 <fat_dir_entry_read_callback+0x2b8>
     fee:	29 81       	ldd	r18, Y+1	; 0x01
     ff0:	fc 01       	movw	r30, r24
     ff2:	e2 0f       	add	r30, r18
     ff4:	f1 1d       	adc	r31, r1
     ff6:	20 81       	ld	r18, Z
     ff8:	f5 01       	movw	r30, r10
     ffa:	e6 0f       	add	r30, r22
     ffc:	f7 1f       	adc	r31, r23
     ffe:	20 83       	st	Z, r18
    1000:	fe 01       	movw	r30, r28
    1002:	32 96       	adiw	r30, 0x02	; 2
    1004:	db 01       	movw	r26, r22
    1006:	11 96       	adiw	r26, 0x01	; 1
    1008:	aa 0e       	add	r10, r26
    100a:	bb 1e       	adc	r11, r27
    100c:	4f e1       	ldi	r20, 0x1F	; 31
    100e:	50 e0       	ldi	r21, 0x00	; 0
    1010:	46 1b       	sub	r20, r22
    1012:	57 0b       	sbc	r21, r23
    1014:	01 e0       	ldi	r16, 0x01	; 1
    1016:	10 e0       	ldi	r17, 0x00	; 0
    1018:	0c 0f       	add	r16, r28
    101a:	1d 1f       	adc	r17, r29
    101c:	40 0f       	add	r20, r16
    101e:	51 1f       	adc	r21, r17
    1020:	be 01       	movw	r22, r28
    1022:	62 5f       	subi	r22, 0xF2	; 242
    1024:	7f 4f       	sbci	r23, 0xFF	; 255
    1026:	1a cf       	rjmp	.-460    	; 0xe5c <fat_dir_entry_read_callback+0xec>
    1028:	2d 96       	adiw	r28, 0x0d	; 13
    102a:	0f b6       	in	r0, 0x3f	; 63
    102c:	f8 94       	cli
    102e:	de bf       	out	0x3e, r29	; 62
    1030:	0f be       	out	0x3f, r0	; 63
    1032:	cd bf       	out	0x3d, r28	; 61
    1034:	df 91       	pop	r29
    1036:	cf 91       	pop	r28
    1038:	1f 91       	pop	r17
    103a:	0f 91       	pop	r16
    103c:	ff 90       	pop	r15
    103e:	ef 90       	pop	r14
    1040:	df 90       	pop	r13
    1042:	cf 90       	pop	r12
    1044:	bf 90       	pop	r11
    1046:	af 90       	pop	r10
    1048:	9f 90       	pop	r9
    104a:	8f 90       	pop	r8
    104c:	7f 90       	pop	r7
    104e:	6f 90       	pop	r6
    1050:	5f 90       	pop	r5
    1052:	4f 90       	pop	r4
    1054:	3f 90       	pop	r3
    1056:	2f 90       	pop	r2
    1058:	08 95       	ret

0000105a <fat_write_dir_entry>:
    105a:	2f 92       	push	r2
    105c:	3f 92       	push	r3
    105e:	4f 92       	push	r4
    1060:	5f 92       	push	r5
    1062:	6f 92       	push	r6
    1064:	7f 92       	push	r7
    1066:	8f 92       	push	r8
    1068:	9f 92       	push	r9
    106a:	af 92       	push	r10
    106c:	bf 92       	push	r11
    106e:	cf 92       	push	r12
    1070:	df 92       	push	r13
    1072:	ef 92       	push	r14
    1074:	ff 92       	push	r15
    1076:	0f 93       	push	r16
    1078:	1f 93       	push	r17
    107a:	cf 93       	push	r28
    107c:	df 93       	push	r29
    107e:	cd b7       	in	r28, 0x3d	; 61
    1080:	de b7       	in	r29, 0x3e	; 62
    1082:	a5 97       	sbiw	r28, 0x25	; 37
    1084:	0f b6       	in	r0, 0x3f	; 63
    1086:	f8 94       	cli
    1088:	de bf       	out	0x3e, r29	; 62
    108a:	0f be       	out	0x3f, r0	; 63
    108c:	cd bf       	out	0x3d, r28	; 61
    108e:	00 97       	sbiw	r24, 0x00	; 0
    1090:	09 f4       	brne	.+2      	; 0x1094 <fat_write_dir_entry+0x3a>
    1092:	6b c1       	rjmp	.+726    	; 0x136a <fat_write_dir_entry+0x310>
    1094:	61 15       	cp	r22, r1
    1096:	71 05       	cpc	r23, r1
    1098:	09 f4       	brne	.+2      	; 0x109c <fat_write_dir_entry+0x42>
    109a:	69 c1       	rjmp	.+722    	; 0x136e <fat_write_dir_entry+0x314>
    109c:	6b 01       	movw	r12, r22
    109e:	fc 01       	movw	r30, r24
    10a0:	01 90       	ld	r0, Z+
    10a2:	f0 81       	ld	r31, Z
    10a4:	e0 2d       	mov	r30, r0
    10a6:	84 81       	ldd	r24, Z+4	; 0x04
    10a8:	95 81       	ldd	r25, Z+5	; 0x05
    10aa:	9b a3       	std	Y+35, r25	; 0x23
    10ac:	8a a3       	std	Y+34, r24	; 0x22
    10ae:	db 01       	movw	r26, r22
    10b0:	99 96       	adiw	r26, 0x29	; 41
    10b2:	9c 90       	ld	r9, X
    10b4:	99 97       	sbiw	r26, 0x29	; 41
    10b6:	9a 96       	adiw	r26, 0x2a	; 42
    10b8:	8c 90       	ld	r8, X
    10ba:	9a 97       	sbiw	r26, 0x2a	; 42
    10bc:	9b 96       	adiw	r26, 0x2b	; 43
    10be:	7c 90       	ld	r7, X
    10c0:	9b 97       	sbiw	r26, 0x2b	; 43
    10c2:	9c 96       	adiw	r26, 0x2c	; 44
    10c4:	6c 90       	ld	r6, X
    10c6:	9c 97       	sbiw	r26, 0x2c	; 44
    10c8:	9d 96       	adiw	r26, 0x2d	; 45
    10ca:	5c 90       	ld	r5, X
    10cc:	9d 97       	sbiw	r26, 0x2d	; 45
    10ce:	9e 96       	adiw	r26, 0x2e	; 46
    10d0:	4c 90       	ld	r4, X
    10d2:	9e 97       	sbiw	r26, 0x2e	; 46
    10d4:	9f 96       	adiw	r26, 0x2f	; 47
    10d6:	3c 90       	ld	r3, X
    10d8:	9f 97       	sbiw	r26, 0x2f	; 47
    10da:	d0 96       	adiw	r26, 0x30	; 48
    10dc:	2c 90       	ld	r2, X
    10de:	7d a3       	std	Y+37, r23	; 0x25
    10e0:	6c a3       	std	Y+36, r22	; 0x24
    10e2:	fb 01       	movw	r30, r22
    10e4:	01 90       	ld	r0, Z+
    10e6:	00 20       	and	r0, r0
    10e8:	e9 f7       	brne	.-6      	; 0x10e4 <fat_write_dir_entry+0x8a>
    10ea:	31 97       	sbiw	r30, 0x01	; 1
    10ec:	5f 01       	movw	r10, r30
    10ee:	a6 1a       	sub	r10, r22
    10f0:	b7 0a       	sbc	r11, r23
    10f2:	1a 2d       	mov	r17, r10
    10f4:	c5 01       	movw	r24, r10
    10f6:	99 27       	eor	r25, r25
    10f8:	0c 96       	adiw	r24, 0x0c	; 12
    10fa:	6d e0       	ldi	r22, 0x0D	; 13
    10fc:	70 e0       	ldi	r23, 0x00	; 0
    10fe:	0e 94 86 26 	call	0x4d0c	; 0x4d0c <__divmodhi4>
    1102:	69 a3       	std	Y+33, r22	; 0x21
    1104:	4b e0       	ldi	r20, 0x0B	; 11
    1106:	50 e0       	ldi	r21, 0x00	; 0
    1108:	60 e2       	ldi	r22, 0x20	; 32
    110a:	70 e0       	ldi	r23, 0x00	; 0
    110c:	ce 01       	movw	r24, r28
    110e:	01 96       	adiw	r24, 0x01	; 1
    1110:	0e 94 a2 27 	call	0x4f44	; 0x4f44 <memset>
    1114:	6e e2       	ldi	r22, 0x2E	; 46
    1116:	70 e0       	ldi	r23, 0x00	; 0
    1118:	c6 01       	movw	r24, r12
    111a:	0e 94 ea 27 	call	0x4fd4	; 0x4fd4 <strrchr>
    111e:	00 97       	sbiw	r24, 0x00	; 0
    1120:	d1 f0       	breq	.+52     	; 0x1156 <fat_write_dir_entry+0xfc>
    1122:	fc 01       	movw	r30, r24
    1124:	21 81       	ldd	r18, Z+1	; 0x01
    1126:	22 23       	and	r18, r18
    1128:	b1 f0       	breq	.+44     	; 0x1156 <fat_write_dir_entry+0xfc>
    112a:	bc 01       	movw	r22, r24
    112c:	6f 5f       	subi	r22, 0xFF	; 255
    112e:	7f 4f       	sbci	r23, 0xFF	; 255
    1130:	fb 01       	movw	r30, r22
    1132:	01 90       	ld	r0, Z+
    1134:	00 20       	and	r0, r0
    1136:	e9 f7       	brne	.-6      	; 0x1132 <fat_write_dir_entry+0xd8>
    1138:	31 97       	sbiw	r30, 0x01	; 1
    113a:	e6 1b       	sub	r30, r22
    113c:	f7 0b       	sbc	r31, r23
    113e:	aa 94       	dec	r10
    1140:	1a 2d       	mov	r17, r10
    1142:	1e 1b       	sub	r17, r30
    1144:	e4 30       	cpi	r30, 0x04	; 4
    1146:	08 f0       	brcs	.+2      	; 0x114a <fat_write_dir_entry+0xf0>
    1148:	e3 e0       	ldi	r30, 0x03	; 3
    114a:	4e 2f       	mov	r20, r30
    114c:	50 e0       	ldi	r21, 0x00	; 0
    114e:	ce 01       	movw	r24, r28
    1150:	09 96       	adiw	r24, 0x09	; 9
    1152:	0e 94 99 27 	call	0x4f32	; 0x4f32 <memcpy>
    1156:	19 30       	cpi	r17, 0x09	; 9
    1158:	d0 f4       	brcc	.+52     	; 0x118e <fat_write_dir_entry+0x134>
    115a:	41 2f       	mov	r20, r17
    115c:	50 e0       	ldi	r21, 0x00	; 0
    115e:	b6 01       	movw	r22, r12
    1160:	ce 01       	movw	r24, r28
    1162:	01 96       	adiw	r24, 0x01	; 1
    1164:	0e 94 99 27 	call	0x4f32	; 0x4f32 <memcpy>
    1168:	d6 01       	movw	r26, r12
    116a:	8c 91       	ld	r24, X
    116c:	8e 32       	cpi	r24, 0x2E	; 46
    116e:	61 f5       	brne	.+88     	; 0x11c8 <fat_write_dir_entry+0x16e>
    1170:	11 96       	adiw	r26, 0x01	; 1
    1172:	8c 91       	ld	r24, X
    1174:	11 97       	sbiw	r26, 0x01	; 1
    1176:	8e 32       	cpi	r24, 0x2E	; 46
    1178:	31 f4       	brne	.+12     	; 0x1186 <fat_write_dir_entry+0x12c>
    117a:	12 96       	adiw	r26, 0x02	; 2
    117c:	8c 91       	ld	r24, X
    117e:	81 11       	cpse	r24, r1
    1180:	23 c0       	rjmp	.+70     	; 0x11c8 <fat_write_dir_entry+0x16e>
    1182:	19 a2       	std	Y+33, r1	; 0x21
    1184:	21 c0       	rjmp	.+66     	; 0x11c8 <fat_write_dir_entry+0x16e>
    1186:	81 11       	cpse	r24, r1
    1188:	1f c0       	rjmp	.+62     	; 0x11c8 <fat_write_dir_entry+0x16e>
    118a:	19 a2       	std	Y+33, r1	; 0x21
    118c:	1d c0       	rjmp	.+58     	; 0x11c8 <fat_write_dir_entry+0x16e>
    118e:	88 e0       	ldi	r24, 0x08	; 8
    1190:	f6 01       	movw	r30, r12
    1192:	de 01       	movw	r26, r28
    1194:	11 96       	adiw	r26, 0x01	; 1
    1196:	01 90       	ld	r0, Z+
    1198:	0d 92       	st	X+, r0
    119a:	8a 95       	dec	r24
    119c:	e1 f7       	brne	.-8      	; 0x1196 <fat_write_dir_entry+0x13c>
    119e:	f6 01       	movw	r30, r12
    11a0:	81 a1       	ldd	r24, Z+33	; 0x21
    11a2:	80 3a       	cpi	r24, 0xA0	; 160
    11a4:	28 f4       	brcc	.+10     	; 0x11b0 <fat_write_dir_entry+0x156>
    11a6:	98 2f       	mov	r25, r24
    11a8:	92 95       	swap	r25
    11aa:	9f 70       	andi	r25, 0x0F	; 15
    11ac:	90 5d       	subi	r25, 0xD0	; 208
    11ae:	04 c0       	rjmp	.+8      	; 0x11b8 <fat_write_dir_entry+0x15e>
    11b0:	98 2f       	mov	r25, r24
    11b2:	92 95       	swap	r25
    11b4:	9f 70       	andi	r25, 0x0F	; 15
    11b6:	9f 59       	subi	r25, 0x9F	; 159
    11b8:	9f 83       	std	Y+7, r25	; 0x07
    11ba:	8f 70       	andi	r24, 0x0F	; 15
    11bc:	8a 30       	cpi	r24, 0x0A	; 10
    11be:	10 f4       	brcc	.+4      	; 0x11c4 <fat_write_dir_entry+0x16a>
    11c0:	80 5d       	subi	r24, 0xD0	; 208
    11c2:	01 c0       	rjmp	.+2      	; 0x11c6 <fat_write_dir_entry+0x16c>
    11c4:	8f 59       	subi	r24, 0x9F	; 159
    11c6:	88 87       	std	Y+8, r24	; 0x08
    11c8:	89 81       	ldd	r24, Y+1	; 0x01
    11ca:	85 3e       	cpi	r24, 0xE5	; 229
    11cc:	11 f4       	brne	.+4      	; 0x11d2 <fat_write_dir_entry+0x178>
    11ce:	85 e0       	ldi	r24, 0x05	; 5
    11d0:	89 83       	std	Y+1, r24	; 0x01
    11d2:	fe 01       	movw	r30, r28
    11d4:	3c 96       	adiw	r30, 0x0c	; 12
    11d6:	85 e1       	ldi	r24, 0x15	; 21
    11d8:	df 01       	movw	r26, r30
    11da:	1d 92       	st	X+, r1
    11dc:	8a 95       	dec	r24
    11de:	e9 f7       	brne	.-6      	; 0x11da <fat_write_dir_entry+0x180>
    11e0:	f6 01       	movw	r30, r12
    11e2:	80 a1       	ldd	r24, Z+32	; 0x20
    11e4:	8c 87       	std	Y+12, r24	; 0x0c
    11e6:	81 a1       	ldd	r24, Z+33	; 0x21
    11e8:	92 a1       	ldd	r25, Z+34	; 0x22
    11ea:	a3 a1       	ldd	r26, Z+35	; 0x23
    11ec:	b4 a1       	ldd	r27, Z+36	; 0x24
    11ee:	bd 01       	movw	r22, r26
    11f0:	88 27       	eor	r24, r24
    11f2:	99 27       	eor	r25, r25
    11f4:	ce 01       	movw	r24, r28
    11f6:	45 96       	adiw	r24, 0x15	; 21
    11f8:	0e 94 1e 01 	call	0x23c	; 0x23c <write16>
    11fc:	d6 01       	movw	r26, r12
    11fe:	91 96       	adiw	r26, 0x21	; 33
    1200:	6d 91       	ld	r22, X+
    1202:	7c 91       	ld	r23, X
    1204:	92 97       	sbiw	r26, 0x22	; 34
    1206:	ce 01       	movw	r24, r28
    1208:	4b 96       	adiw	r24, 0x1b	; 27
    120a:	0e 94 1e 01 	call	0x23c	; 0x23c <write16>
    120e:	f6 01       	movw	r30, r12
    1210:	45 a1       	ldd	r20, Z+37	; 0x25
    1212:	56 a1       	ldd	r21, Z+38	; 0x26
    1214:	67 a1       	ldd	r22, Z+39	; 0x27
    1216:	70 a5       	ldd	r23, Z+40	; 0x28
    1218:	ce 01       	movw	r24, r28
    121a:	4d 96       	adiw	r24, 0x1d	; 29
    121c:	0e 94 22 01 	call	0x244	; 0x244 <write32>
    1220:	89 a1       	ldd	r24, Y+33	; 0x21
    1222:	f0 e2       	ldi	r31, 0x20	; 32
    1224:	8f 9f       	mul	r24, r31
    1226:	a0 01       	movw	r20, r0
    1228:	11 24       	eor	r1, r1
    122a:	24 2f       	mov	r18, r20
    122c:	35 2f       	mov	r19, r21
    122e:	40 e0       	ldi	r20, 0x00	; 0
    1230:	50 e0       	ldi	r21, 0x00	; 0
    1232:	60 e0       	ldi	r22, 0x00	; 0
    1234:	70 e0       	ldi	r23, 0x00	; 0
    1236:	80 e0       	ldi	r24, 0x00	; 0
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	a9 2c       	mov	r10, r9
    123c:	b8 2c       	mov	r11, r8
    123e:	c7 2c       	mov	r12, r7
    1240:	d6 2c       	mov	r13, r6
    1242:	e5 2c       	mov	r14, r5
    1244:	f4 2c       	mov	r15, r4
    1246:	03 2d       	mov	r16, r3
    1248:	12 2d       	mov	r17, r2
    124a:	0e 94 66 27 	call	0x4ecc	; 0x4ecc <__adddi3>
    124e:	68 94       	set
    1250:	ee 24       	eor	r14, r14
    1252:	e5 f8       	bld	r14, 5
    1254:	f1 2c       	mov	r15, r1
    1256:	8e 01       	movw	r16, r28
    1258:	0f 5f       	subi	r16, 0xFF	; 255
    125a:	1f 4f       	sbci	r17, 0xFF	; 255
    125c:	ea a1       	ldd	r30, Y+34	; 0x22
    125e:	fb a1       	ldd	r31, Y+35	; 0x23
    1260:	09 95       	icall
    1262:	88 23       	and	r24, r24
    1264:	09 f4       	brne	.+2      	; 0x1268 <fat_write_dir_entry+0x20e>
    1266:	8c c0       	rjmp	.+280    	; 0x1380 <fat_write_dir_entry+0x326>
    1268:	c8 01       	movw	r24, r16
    126a:	0e 94 22 06 	call	0xc44	; 0xc44 <fat_calc_83_checksum>
    126e:	a8 2e       	mov	r10, r24
    1270:	f9 a1       	ldd	r31, Y+33	; 0x21
    1272:	ff 23       	and	r31, r31
    1274:	09 f4       	brne	.+2      	; 0x1278 <fat_write_dir_entry+0x21e>
    1276:	7d c0       	rjmp	.+250    	; 0x1372 <fat_write_dir_entry+0x318>
    1278:	df 2e       	mov	r13, r31
    127a:	0f 2e       	mov	r0, r31
    127c:	fd e0       	ldi	r31, 0x0D	; 13
    127e:	bf 2e       	mov	r11, r31
    1280:	f0 2d       	mov	r31, r0
    1282:	0f 2e       	mov	r0, r31
    1284:	ff e0       	ldi	r31, 0x0F	; 15
    1286:	cf 2e       	mov	r12, r31
    1288:	f0 2d       	mov	r31, r0
    128a:	40 e2       	ldi	r20, 0x20	; 32
    128c:	50 e0       	ldi	r21, 0x00	; 0
    128e:	6f ef       	ldi	r22, 0xFF	; 255
    1290:	70 e0       	ldi	r23, 0x00	; 0
    1292:	ce 01       	movw	r24, r28
    1294:	01 96       	adiw	r24, 0x01	; 1
    1296:	0e 94 a2 27 	call	0x4f44	; 0x4f44 <memset>
    129a:	8d 2d       	mov	r24, r13
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	01 97       	sbiw	r24, 0x01	; 1
    12a0:	b8 9e       	mul	r11, r24
    12a2:	f0 01       	movw	r30, r0
    12a4:	b9 9e       	mul	r11, r25
    12a6:	f0 0d       	add	r31, r0
    12a8:	11 24       	eor	r1, r1
    12aa:	8c a1       	ldd	r24, Y+36	; 0x24
    12ac:	9d a1       	ldd	r25, Y+37	; 0x25
    12ae:	e8 0f       	add	r30, r24
    12b0:	f9 1f       	adc	r31, r25
    12b2:	bf 01       	movw	r22, r30
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	01 c0       	rjmp	.+2      	; 0x12ba <fat_write_dir_entry+0x260>
    12b8:	31 96       	adiw	r30, 0x01	; 1
    12ba:	91 e0       	ldi	r25, 0x01	; 1
    12bc:	98 0f       	add	r25, r24
    12be:	db 01       	movw	r26, r22
    12c0:	4d 91       	ld	r20, X+
    12c2:	bd 01       	movw	r22, r26
    12c4:	21 e0       	ldi	r18, 0x01	; 1
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	2c 0f       	add	r18, r28
    12ca:	3d 1f       	adc	r19, r29
    12cc:	28 0f       	add	r18, r24
    12ce:	31 1d       	adc	r19, r1
    12d0:	d9 01       	movw	r26, r18
    12d2:	4c 93       	st	X, r20
    12d4:	8e 5f       	subi	r24, 0xFE	; 254
    12d6:	21 e0       	ldi	r18, 0x01	; 1
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	2c 0f       	add	r18, r28
    12dc:	3d 1f       	adc	r19, r29
    12de:	29 0f       	add	r18, r25
    12e0:	31 1d       	adc	r19, r1
    12e2:	d9 01       	movw	r26, r18
    12e4:	1c 92       	st	X, r1
    12e6:	8b 30       	cpi	r24, 0x0B	; 11
    12e8:	09 f4       	brne	.+2      	; 0x12ec <fat_write_dir_entry+0x292>
    12ea:	45 c0       	rjmp	.+138    	; 0x1376 <fat_write_dir_entry+0x31c>
    12ec:	8a 31       	cpi	r24, 0x1A	; 26
    12ee:	11 f4       	brne	.+4      	; 0x12f4 <fat_write_dir_entry+0x29a>
    12f0:	8c e1       	ldi	r24, 0x1C	; 28
    12f2:	42 c0       	rjmp	.+132    	; 0x1378 <fat_write_dir_entry+0x31e>
    12f4:	90 81       	ld	r25, Z
    12f6:	99 23       	and	r25, r25
    12f8:	11 f0       	breq	.+4      	; 0x12fe <fat_write_dir_entry+0x2a4>
    12fa:	8f 31       	cpi	r24, 0x1F	; 31
    12fc:	e8 f2       	brcs	.-70     	; 0x12b8 <fat_write_dir_entry+0x25e>
    12fe:	d9 82       	std	Y+1, r13	; 0x01
    1300:	b9 a1       	ldd	r27, Y+33	; 0x21
    1302:	bd 11       	cpse	r27, r13
    1304:	03 c0       	rjmp	.+6      	; 0x130c <fat_write_dir_entry+0x2b2>
    1306:	8d 2d       	mov	r24, r13
    1308:	80 64       	ori	r24, 0x40	; 64
    130a:	89 83       	std	Y+1, r24	; 0x01
    130c:	cc 86       	std	Y+12, r12	; 0x0c
    130e:	ae 86       	std	Y+14, r10	; 0x0e
    1310:	1d 86       	std	Y+13, r1	; 0x0d
    1312:	1b 8e       	std	Y+27, r1	; 0x1b
    1314:	1c 8e       	std	Y+28, r1	; 0x1c
    1316:	68 94       	set
    1318:	ee 24       	eor	r14, r14
    131a:	e5 f8       	bld	r14, 5
    131c:	f1 2c       	mov	r15, r1
    131e:	8e 01       	movw	r16, r28
    1320:	0f 5f       	subi	r16, 0xFF	; 255
    1322:	1f 4f       	sbci	r17, 0xFF	; 255
    1324:	29 2d       	mov	r18, r9
    1326:	38 2d       	mov	r19, r8
    1328:	47 2d       	mov	r20, r7
    132a:	56 2d       	mov	r21, r6
    132c:	65 2d       	mov	r22, r5
    132e:	74 2d       	mov	r23, r4
    1330:	83 2d       	mov	r24, r3
    1332:	92 2d       	mov	r25, r2
    1334:	ea a1       	ldd	r30, Y+34	; 0x22
    1336:	fb a1       	ldd	r31, Y+35	; 0x23
    1338:	09 95       	icall
    133a:	29 2d       	mov	r18, r9
    133c:	38 2d       	mov	r19, r8
    133e:	47 2d       	mov	r20, r7
    1340:	56 2d       	mov	r21, r6
    1342:	65 2d       	mov	r22, r5
    1344:	74 2d       	mov	r23, r4
    1346:	83 2d       	mov	r24, r3
    1348:	92 2d       	mov	r25, r2
    134a:	a0 e2       	ldi	r26, 0x20	; 32
    134c:	0e 94 6f 27 	call	0x4ede	; 0x4ede <__adddi3_s8>
    1350:	92 2e       	mov	r9, r18
    1352:	83 2e       	mov	r8, r19
    1354:	74 2e       	mov	r7, r20
    1356:	65 2e       	mov	r6, r21
    1358:	56 2e       	mov	r5, r22
    135a:	47 2e       	mov	r4, r23
    135c:	38 2e       	mov	r3, r24
    135e:	29 2e       	mov	r2, r25
    1360:	da 94       	dec	r13
    1362:	d1 10       	cpse	r13, r1
    1364:	92 cf       	rjmp	.-220    	; 0x128a <fat_write_dir_entry+0x230>
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	0b c0       	rjmp	.+22     	; 0x1380 <fat_write_dir_entry+0x326>
    136a:	80 e0       	ldi	r24, 0x00	; 0
    136c:	09 c0       	rjmp	.+18     	; 0x1380 <fat_write_dir_entry+0x326>
    136e:	80 e0       	ldi	r24, 0x00	; 0
    1370:	07 c0       	rjmp	.+14     	; 0x1380 <fat_write_dir_entry+0x326>
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	05 c0       	rjmp	.+10     	; 0x1380 <fat_write_dir_entry+0x326>
    1376:	8e e0       	ldi	r24, 0x0E	; 14
    1378:	90 81       	ld	r25, Z
    137a:	91 11       	cpse	r25, r1
    137c:	9d cf       	rjmp	.-198    	; 0x12b8 <fat_write_dir_entry+0x25e>
    137e:	bf cf       	rjmp	.-130    	; 0x12fe <fat_write_dir_entry+0x2a4>
    1380:	a5 96       	adiw	r28, 0x25	; 37
    1382:	0f b6       	in	r0, 0x3f	; 63
    1384:	f8 94       	cli
    1386:	de bf       	out	0x3e, r29	; 62
    1388:	0f be       	out	0x3f, r0	; 63
    138a:	cd bf       	out	0x3d, r28	; 61
    138c:	df 91       	pop	r29
    138e:	cf 91       	pop	r28
    1390:	1f 91       	pop	r17
    1392:	0f 91       	pop	r16
    1394:	ff 90       	pop	r15
    1396:	ef 90       	pop	r14
    1398:	df 90       	pop	r13
    139a:	cf 90       	pop	r12
    139c:	bf 90       	pop	r11
    139e:	af 90       	pop	r10
    13a0:	9f 90       	pop	r9
    13a2:	8f 90       	pop	r8
    13a4:	7f 90       	pop	r7
    13a6:	6f 90       	pop	r6
    13a8:	5f 90       	pop	r5
    13aa:	4f 90       	pop	r4
    13ac:	3f 90       	pop	r3
    13ae:	2f 90       	pop	r2
    13b0:	08 95       	ret

000013b2 <fat_find_offset_for_dir_entry>:
    13b2:	2f 92       	push	r2
    13b4:	3f 92       	push	r3
    13b6:	4f 92       	push	r4
    13b8:	5f 92       	push	r5
    13ba:	6f 92       	push	r6
    13bc:	7f 92       	push	r7
    13be:	8f 92       	push	r8
    13c0:	9f 92       	push	r9
    13c2:	af 92       	push	r10
    13c4:	bf 92       	push	r11
    13c6:	cf 92       	push	r12
    13c8:	df 92       	push	r13
    13ca:	ef 92       	push	r14
    13cc:	ff 92       	push	r15
    13ce:	0f 93       	push	r16
    13d0:	1f 93       	push	r17
    13d2:	cf 93       	push	r28
    13d4:	df 93       	push	r29
    13d6:	cd b7       	in	r28, 0x3d	; 61
    13d8:	de b7       	in	r29, 0x3e	; 62
    13da:	a0 97       	sbiw	r28, 0x20	; 32
    13dc:	0f b6       	in	r0, 0x3f	; 63
    13de:	f8 94       	cli
    13e0:	de bf       	out	0x3e, r29	; 62
    13e2:	0f be       	out	0x3f, r0	; 63
    13e4:	cd bf       	out	0x3d, r28	; 61
    13e6:	fc 01       	movw	r30, r24
    13e8:	8b 01       	movw	r16, r22
    13ea:	89 2b       	or	r24, r25
    13ec:	09 f4       	brne	.+2      	; 0x13f0 <fat_find_offset_for_dir_entry+0x3e>
    13ee:	dc c1       	rjmp	.+952    	; 0x17a8 <fat_find_offset_for_dir_entry+0x3f6>
    13f0:	41 15       	cp	r20, r1
    13f2:	51 05       	cpc	r21, r1
    13f4:	09 f4       	brne	.+2      	; 0x13f8 <fat_find_offset_for_dir_entry+0x46>
    13f6:	e1 c1       	rjmp	.+962    	; 0x17ba <fat_find_offset_for_dir_entry+0x408>
    13f8:	da 01       	movw	r26, r20
    13fa:	0d 90       	ld	r0, X+
    13fc:	00 20       	and	r0, r0
    13fe:	e9 f7       	brne	.-6      	; 0x13fa <fat_find_offset_for_dir_entry+0x48>
    1400:	9d 01       	movw	r18, r26
    1402:	24 1b       	sub	r18, r20
    1404:	35 0b       	sbc	r19, r21
    1406:	25 5f       	subi	r18, 0xF5	; 245
    1408:	3f 4f       	sbci	r19, 0xFF	; 255
    140a:	a5 ec       	ldi	r26, 0xC5	; 197
    140c:	be e4       	ldi	r27, 0x4E	; 78
    140e:	0e 94 bc 26 	call	0x4d78	; 0x4d78 <__umulhisi3>
    1412:	96 95       	lsr	r25
    1414:	87 95       	ror	r24
    1416:	96 95       	lsr	r25
    1418:	87 95       	ror	r24
    141a:	21 e0       	ldi	r18, 0x01	; 1
    141c:	28 0f       	add	r18, r24
    141e:	28 a3       	std	Y+32, r18	; 0x20
    1420:	d8 01       	movw	r26, r16
    1422:	93 96       	adiw	r26, 0x23	; 35
    1424:	4d 91       	ld	r20, X+
    1426:	5d 91       	ld	r21, X+
    1428:	6d 91       	ld	r22, X+
    142a:	7c 91       	ld	r23, X
    142c:	96 97       	sbiw	r26, 0x26	; 38
    142e:	4c 8b       	std	Y+20, r20	; 0x14
    1430:	5d 8b       	std	Y+21, r21	; 0x15
    1432:	6e 8b       	std	Y+22, r22	; 0x16
    1434:	7f 8b       	std	Y+23, r23	; 0x17
    1436:	45 2b       	or	r20, r21
    1438:	46 2b       	or	r20, r22
    143a:	47 2b       	or	r20, r23
    143c:	09 f0       	breq	.+2      	; 0x1440 <fat_find_offset_for_dir_entry+0x8e>
    143e:	40 c0       	rjmp	.+128    	; 0x14c0 <fat_find_offset_for_dir_entry+0x10e>
    1440:	a0 81       	ld	r26, Z
    1442:	b1 81       	ldd	r27, Z+1	; 0x01
    1444:	18 96       	adiw	r26, 0x08	; 8
    1446:	8c 91       	ld	r24, X
    1448:	8b 30       	cpi	r24, 0x0B	; 11
    144a:	c9 f4       	brne	.+50     	; 0x147e <fat_find_offset_for_dir_entry+0xcc>
    144c:	02 a5       	ldd	r16, Z+42	; 0x2a
    144e:	13 a5       	ldd	r17, Z+43	; 0x2b
    1450:	24 a5       	ldd	r18, Z+44	; 0x2c
    1452:	35 a5       	ldd	r19, Z+45	; 0x2d
    1454:	0c 8b       	std	Y+20, r16	; 0x14
    1456:	1d 8b       	std	Y+21, r17	; 0x15
    1458:	2e 8b       	std	Y+22, r18	; 0x16
    145a:	3f 8b       	std	Y+23, r19	; 0x17
    145c:	18 8e       	std	Y+24, r1	; 0x18
    145e:	19 8e       	std	Y+25, r1	; 0x19
    1460:	1a 8e       	std	Y+26, r1	; 0x1a
    1462:	1b 8e       	std	Y+27, r1	; 0x1b
    1464:	1c 8e       	std	Y+28, r1	; 0x1c
    1466:	1d 8e       	std	Y+29, r1	; 0x1d
    1468:	1e 8e       	std	Y+30, r1	; 0x1e
    146a:	1f 8e       	std	Y+31, r1	; 0x1f
    146c:	1c 86       	std	Y+12, r1	; 0x0c
    146e:	1d 86       	std	Y+13, r1	; 0x0d
    1470:	1e 86       	std	Y+14, r1	; 0x0e
    1472:	1f 86       	std	Y+15, r1	; 0x0f
    1474:	18 8a       	std	Y+16, r1	; 0x10
    1476:	19 8a       	std	Y+17, r1	; 0x11
    1478:	1a 8a       	std	Y+18, r1	; 0x12
    147a:	1b 8a       	std	Y+19, r1	; 0x13
    147c:	31 c0       	rjmp	.+98     	; 0x14e0 <fat_find_offset_for_dir_entry+0x12e>
    147e:	12 a1       	ldd	r17, Z+34	; 0x22
    1480:	1c 87       	std	Y+12, r17	; 0x0c
    1482:	23 a1       	ldd	r18, Z+35	; 0x23
    1484:	2d 87       	std	Y+13, r18	; 0x0d
    1486:	34 a1       	ldd	r19, Z+36	; 0x24
    1488:	3e 87       	std	Y+14, r19	; 0x0e
    148a:	45 a1       	ldd	r20, Z+37	; 0x25
    148c:	4f 87       	std	Y+15, r20	; 0x0f
    148e:	56 a1       	ldd	r21, Z+38	; 0x26
    1490:	58 8b       	std	Y+16, r21	; 0x10
    1492:	67 a1       	ldd	r22, Z+39	; 0x27
    1494:	69 8b       	std	Y+17, r22	; 0x11
    1496:	70 a5       	ldd	r23, Z+40	; 0x28
    1498:	7a 8b       	std	Y+18, r23	; 0x12
    149a:	81 a5       	ldd	r24, Z+41	; 0x29
    149c:	8b 8b       	std	Y+19, r24	; 0x13
    149e:	92 8d       	ldd	r25, Z+26	; 0x1a
    14a0:	98 8f       	std	Y+24, r25	; 0x18
    14a2:	a3 8d       	ldd	r26, Z+27	; 0x1b
    14a4:	a9 8f       	std	Y+25, r26	; 0x19
    14a6:	b4 8d       	ldd	r27, Z+28	; 0x1c
    14a8:	ba 8f       	std	Y+26, r27	; 0x1a
    14aa:	05 8d       	ldd	r16, Z+29	; 0x1d
    14ac:	0b 8f       	std	Y+27, r16	; 0x1b
    14ae:	16 8d       	ldd	r17, Z+30	; 0x1e
    14b0:	1c 8f       	std	Y+28, r17	; 0x1c
    14b2:	27 8d       	ldd	r18, Z+31	; 0x1f
    14b4:	2d 8f       	std	Y+29, r18	; 0x1d
    14b6:	30 a1       	ldd	r19, Z+32	; 0x20
    14b8:	3e 8f       	std	Y+30, r19	; 0x1e
    14ba:	41 a1       	ldd	r20, Z+33	; 0x21
    14bc:	4f 8f       	std	Y+31, r20	; 0x1f
    14be:	10 c0       	rjmp	.+32     	; 0x14e0 <fat_find_offset_for_dir_entry+0x12e>
    14c0:	18 8e       	std	Y+24, r1	; 0x18
    14c2:	19 8e       	std	Y+25, r1	; 0x19
    14c4:	1a 8e       	std	Y+26, r1	; 0x1a
    14c6:	1b 8e       	std	Y+27, r1	; 0x1b
    14c8:	1c 8e       	std	Y+28, r1	; 0x1c
    14ca:	1d 8e       	std	Y+29, r1	; 0x1d
    14cc:	1e 8e       	std	Y+30, r1	; 0x1e
    14ce:	1f 8e       	std	Y+31, r1	; 0x1f
    14d0:	1c 86       	std	Y+12, r1	; 0x0c
    14d2:	1d 86       	std	Y+13, r1	; 0x0d
    14d4:	1e 86       	std	Y+14, r1	; 0x0e
    14d6:	1f 86       	std	Y+15, r1	; 0x0f
    14d8:	18 8a       	std	Y+16, r1	; 0x10
    14da:	19 8a       	std	Y+17, r1	; 0x11
    14dc:	1a 8a       	std	Y+18, r1	; 0x12
    14de:	1b 8a       	std	Y+19, r1	; 0x13
    14e0:	fb 83       	std	Y+3, r31	; 0x03
    14e2:	ea 83       	std	Y+2, r30	; 0x02
    14e4:	4c 84       	ldd	r4, Y+12	; 0x0c
    14e6:	5d 84       	ldd	r5, Y+13	; 0x0d
    14e8:	6e 84       	ldd	r6, Y+14	; 0x0e
    14ea:	7f 84       	ldd	r7, Y+15	; 0x0f
    14ec:	88 88       	ldd	r8, Y+16	; 0x10
    14ee:	99 88       	ldd	r9, Y+17	; 0x11
    14f0:	2a 88       	ldd	r2, Y+18	; 0x12
    14f2:	3b 88       	ldd	r3, Y+19	; 0x13
    14f4:	1c 82       	std	Y+4, r1	; 0x04
    14f6:	24 2d       	mov	r18, r4
    14f8:	35 2d       	mov	r19, r5
    14fa:	46 2d       	mov	r20, r6
    14fc:	57 2d       	mov	r21, r7
    14fe:	68 2d       	mov	r22, r8
    1500:	79 2d       	mov	r23, r9
    1502:	82 2d       	mov	r24, r2
    1504:	93 2d       	mov	r25, r3
    1506:	a8 8c       	ldd	r10, Y+24	; 0x18
    1508:	b9 8c       	ldd	r11, Y+25	; 0x19
    150a:	ca 8c       	ldd	r12, Y+26	; 0x1a
    150c:	db 8c       	ldd	r13, Y+27	; 0x1b
    150e:	ec 8c       	ldd	r14, Y+28	; 0x1c
    1510:	fd 8c       	ldd	r15, Y+29	; 0x1d
    1512:	0e 8d       	ldd	r16, Y+30	; 0x1e
    1514:	1f 8d       	ldd	r17, Y+31	; 0x1f
    1516:	0e 94 84 27 	call	0x4f08	; 0x4f08 <__cmpdi2>
    151a:	09 f0       	breq	.+2      	; 0x151e <fat_find_offset_for_dir_entry+0x16c>
    151c:	df c0       	rjmp	.+446    	; 0x16dc <fat_find_offset_for_dir_entry+0x32a>
    151e:	6c 89       	ldd	r22, Y+20	; 0x14
    1520:	7d 89       	ldd	r23, Y+21	; 0x15
    1522:	8e 89       	ldd	r24, Y+22	; 0x16
    1524:	9f 89       	ldd	r25, Y+23	; 0x17
    1526:	67 2b       	or	r22, r23
    1528:	68 2b       	or	r22, r24
    152a:	69 2b       	or	r22, r25
    152c:	09 f4       	brne	.+2      	; 0x1530 <fat_find_offset_for_dir_entry+0x17e>
    152e:	2a c1       	rjmp	.+596    	; 0x1784 <fat_find_offset_for_dir_entry+0x3d2>
    1530:	68 2d       	mov	r22, r8
    1532:	79 2d       	mov	r23, r9
    1534:	82 2d       	mov	r24, r2
    1536:	93 2d       	mov	r25, r3
    1538:	a0 e0       	ldi	r26, 0x00	; 0
    153a:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <__cmpdi2_s8>
    153e:	09 f4       	brne	.+2      	; 0x1542 <fat_find_offset_for_dir_entry+0x190>
    1540:	49 c1       	rjmp	.+658    	; 0x17d4 <fat_find_offset_for_dir_entry+0x422>
    1542:	4c 89       	ldd	r20, Y+20	; 0x14
    1544:	5d 89       	ldd	r21, Y+21	; 0x15
    1546:	6e 89       	ldd	r22, Y+22	; 0x16
    1548:	7f 89       	ldd	r23, Y+23	; 0x17
    154a:	8a 81       	ldd	r24, Y+2	; 0x02
    154c:	9b 81       	ldd	r25, Y+3	; 0x03
    154e:	0e 94 28 01 	call	0x250	; 0x250 <fat_get_next_cluster>
    1552:	61 15       	cp	r22, r1
    1554:	71 05       	cpc	r23, r1
    1556:	81 05       	cpc	r24, r1
    1558:	91 05       	cpc	r25, r1
    155a:	09 f0       	breq	.+2      	; 0x155e <fat_find_offset_for_dir_entry+0x1ac>
    155c:	37 c1       	rjmp	.+622    	; 0x17cc <fat_find_offset_for_dir_entry+0x41a>
    155e:	01 e0       	ldi	r16, 0x01	; 1
    1560:	10 e0       	ldi	r17, 0x00	; 0
    1562:	20 e0       	ldi	r18, 0x00	; 0
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	4c 89       	ldd	r20, Y+20	; 0x14
    1568:	5d 89       	ldd	r21, Y+21	; 0x15
    156a:	6e 89       	ldd	r22, Y+22	; 0x16
    156c:	7f 89       	ldd	r23, Y+23	; 0x17
    156e:	8a 81       	ldd	r24, Y+2	; 0x02
    1570:	9b 81       	ldd	r25, Y+3	; 0x03
    1572:	0e 94 a2 03 	call	0x744	; 0x744 <fat_append_clusters>
    1576:	2b 01       	movw	r4, r22
    1578:	3c 01       	movw	r6, r24
    157a:	61 15       	cp	r22, r1
    157c:	71 05       	cpc	r23, r1
    157e:	81 05       	cpc	r24, r1
    1580:	91 05       	cpc	r25, r1
    1582:	09 f4       	brne	.+2      	; 0x1586 <fat_find_offset_for_dir_entry+0x1d4>
    1584:	ff c0       	rjmp	.+510    	; 0x1784 <fat_find_offset_for_dir_entry+0x3d2>
    1586:	dc 01       	movw	r26, r24
    1588:	cb 01       	movw	r24, r22
    158a:	02 97       	sbiw	r24, 0x02	; 2
    158c:	a1 09       	sbc	r26, r1
    158e:	b1 09       	sbc	r27, r1
    1590:	8c 01       	movw	r16, r24
    1592:	9d 01       	movw	r18, r26
    1594:	40 e0       	ldi	r20, 0x00	; 0
    1596:	50 e0       	ldi	r21, 0x00	; 0
    1598:	ba 01       	movw	r22, r20
    159a:	8c 83       	std	Y+4, r24	; 0x04
    159c:	1d 83       	std	Y+5, r17	; 0x05
    159e:	2e 83       	std	Y+6, r18	; 0x06
    15a0:	3f 83       	std	Y+7, r19	; 0x07
    15a2:	48 87       	std	Y+8, r20	; 0x08
    15a4:	59 87       	std	Y+9, r21	; 0x09
    15a6:	6a 87       	std	Y+10, r22	; 0x0a
    15a8:	7b 87       	std	Y+11, r23	; 0x0b
    15aa:	aa 81       	ldd	r26, Y+2	; 0x02
    15ac:	bb 81       	ldd	r27, Y+3	; 0x03
    15ae:	58 96       	adiw	r26, 0x18	; 24
    15b0:	0d 91       	ld	r16, X+
    15b2:	1c 91       	ld	r17, X
    15b4:	59 97       	sbiw	r26, 0x19	; 25
    15b6:	a0 2e       	mov	r10, r16
    15b8:	b1 2e       	mov	r11, r17
    15ba:	c1 2c       	mov	r12, r1
    15bc:	d1 2c       	mov	r13, r1
    15be:	e1 2c       	mov	r14, r1
    15c0:	f1 2c       	mov	r15, r1
    15c2:	00 e0       	ldi	r16, 0x00	; 0
    15c4:	10 e0       	ldi	r17, 0x00	; 0
    15c6:	2c 81       	ldd	r18, Y+4	; 0x04
    15c8:	3d 81       	ldd	r19, Y+5	; 0x05
    15ca:	4e 81       	ldd	r20, Y+6	; 0x06
    15cc:	5f 81       	ldd	r21, Y+7	; 0x07
    15ce:	60 e0       	ldi	r22, 0x00	; 0
    15d0:	70 e0       	ldi	r23, 0x00	; 0
    15d2:	80 e0       	ldi	r24, 0x00	; 0
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	0e 94 d6 26 	call	0x4dac	; 0x4dac <__muldi3>
    15da:	ea 81       	ldd	r30, Y+2	; 0x02
    15dc:	fb 81       	ldd	r31, Y+3	; 0x03
    15de:	a2 8c       	ldd	r10, Z+26	; 0x1a
    15e0:	b3 8c       	ldd	r11, Z+27	; 0x1b
    15e2:	c4 8c       	ldd	r12, Z+28	; 0x1c
    15e4:	d5 8c       	ldd	r13, Z+29	; 0x1d
    15e6:	e6 8c       	ldd	r14, Z+30	; 0x1e
    15e8:	f7 8c       	ldd	r15, Z+31	; 0x1f
    15ea:	00 a1       	ldd	r16, Z+32	; 0x20
    15ec:	11 a1       	ldd	r17, Z+33	; 0x21
    15ee:	0e 94 66 27 	call	0x4ecc	; 0x4ecc <__adddi3>
    15f2:	2c 87       	std	Y+12, r18	; 0x0c
    15f4:	3d 87       	std	Y+13, r19	; 0x0d
    15f6:	4e 87       	std	Y+14, r20	; 0x0e
    15f8:	5f 87       	std	Y+15, r21	; 0x0f
    15fa:	68 8b       	std	Y+16, r22	; 0x10
    15fc:	79 8b       	std	Y+17, r23	; 0x11
    15fe:	8a 8b       	std	Y+18, r24	; 0x12
    1600:	9b 8b       	std	Y+19, r25	; 0x13
    1602:	b3 01       	movw	r22, r6
    1604:	a2 01       	movw	r20, r4
    1606:	cf 01       	movw	r24, r30
    1608:	0e 94 30 06 	call	0xc60	; 0xc60 <fat_clear_cluster>
    160c:	c4 c0       	rjmp	.+392    	; 0x1796 <fat_find_offset_for_dir_entry+0x3e4>
    160e:	8c 89       	ldd	r24, Y+20	; 0x14
    1610:	9d 89       	ldd	r25, Y+21	; 0x15
    1612:	ae 89       	ldd	r26, Y+22	; 0x16
    1614:	bf 89       	ldd	r27, Y+23	; 0x17
    1616:	02 97       	sbiw	r24, 0x02	; 2
    1618:	a1 09       	sbc	r26, r1
    161a:	b1 09       	sbc	r27, r1
    161c:	1c 01       	movw	r2, r24
    161e:	2d 01       	movw	r4, r26
    1620:	aa 81       	ldd	r26, Y+2	; 0x02
    1622:	bb 81       	ldd	r27, Y+3	; 0x03
    1624:	58 96       	adiw	r26, 0x18	; 24
    1626:	0d 91       	ld	r16, X+
    1628:	1c 91       	ld	r17, X
    162a:	59 97       	sbiw	r26, 0x19	; 25
    162c:	a0 2e       	mov	r10, r16
    162e:	b1 2e       	mov	r11, r17
    1630:	c1 2c       	mov	r12, r1
    1632:	d1 2c       	mov	r13, r1
    1634:	e1 2c       	mov	r14, r1
    1636:	f1 2c       	mov	r15, r1
    1638:	00 e0       	ldi	r16, 0x00	; 0
    163a:	10 e0       	ldi	r17, 0x00	; 0
    163c:	22 2d       	mov	r18, r2
    163e:	33 2d       	mov	r19, r3
    1640:	44 2d       	mov	r20, r4
    1642:	55 2d       	mov	r21, r5
    1644:	60 e0       	ldi	r22, 0x00	; 0
    1646:	70 e0       	ldi	r23, 0x00	; 0
    1648:	80 e0       	ldi	r24, 0x00	; 0
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	0e 94 d6 26 	call	0x4dac	; 0x4dac <__muldi3>
    1650:	ea 81       	ldd	r30, Y+2	; 0x02
    1652:	fb 81       	ldd	r31, Y+3	; 0x03
    1654:	a2 8c       	ldd	r10, Z+26	; 0x1a
    1656:	b3 8c       	ldd	r11, Z+27	; 0x1b
    1658:	c4 8c       	ldd	r12, Z+28	; 0x1c
    165a:	d5 8c       	ldd	r13, Z+29	; 0x1d
    165c:	e6 8c       	ldd	r14, Z+30	; 0x1e
    165e:	f7 8c       	ldd	r15, Z+31	; 0x1f
    1660:	00 a1       	ldd	r16, Z+32	; 0x20
    1662:	11 a1       	ldd	r17, Z+33	; 0x21
    1664:	0e 94 66 27 	call	0x4ecc	; 0x4ecc <__adddi3>
    1668:	2c 87       	std	Y+12, r18	; 0x0c
    166a:	3d 87       	std	Y+13, r19	; 0x0d
    166c:	4e 87       	std	Y+14, r20	; 0x0e
    166e:	5f 87       	std	Y+15, r21	; 0x0f
    1670:	68 8b       	std	Y+16, r22	; 0x10
    1672:	79 8b       	std	Y+17, r23	; 0x11
    1674:	8a 8b       	std	Y+18, r24	; 0x12
    1676:	9b 8b       	std	Y+19, r25	; 0x13
    1678:	08 c0       	rjmp	.+16     	; 0x168a <fat_find_offset_for_dir_entry+0x2d8>
    167a:	1c 86       	std	Y+12, r1	; 0x0c
    167c:	1d 86       	std	Y+13, r1	; 0x0d
    167e:	1e 86       	std	Y+14, r1	; 0x0e
    1680:	1f 86       	std	Y+15, r1	; 0x0f
    1682:	18 8a       	std	Y+16, r1	; 0x10
    1684:	19 8a       	std	Y+17, r1	; 0x11
    1686:	1a 8a       	std	Y+18, r1	; 0x12
    1688:	1b 8a       	std	Y+19, r1	; 0x13
    168a:	aa 81       	ldd	r26, Y+2	; 0x02
    168c:	bb 81       	ldd	r27, Y+3	; 0x03
    168e:	58 96       	adiw	r26, 0x18	; 24
    1690:	8d 90       	ld	r8, X+
    1692:	9c 90       	ld	r9, X
    1694:	59 97       	sbiw	r26, 0x19	; 25
    1696:	28 2d       	mov	r18, r8
    1698:	39 2d       	mov	r19, r9
    169a:	40 e0       	ldi	r20, 0x00	; 0
    169c:	50 e0       	ldi	r21, 0x00	; 0
    169e:	60 e0       	ldi	r22, 0x00	; 0
    16a0:	70 e0       	ldi	r23, 0x00	; 0
    16a2:	80 e0       	ldi	r24, 0x00	; 0
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	ac 84       	ldd	r10, Y+12	; 0x0c
    16a8:	bd 84       	ldd	r11, Y+13	; 0x0d
    16aa:	ce 84       	ldd	r12, Y+14	; 0x0e
    16ac:	df 84       	ldd	r13, Y+15	; 0x0f
    16ae:	e8 88       	ldd	r14, Y+16	; 0x10
    16b0:	f9 88       	ldd	r15, Y+17	; 0x11
    16b2:	0a 89       	ldd	r16, Y+18	; 0x12
    16b4:	1b 89       	ldd	r17, Y+19	; 0x13
    16b6:	0e 94 66 27 	call	0x4ecc	; 0x4ecc <__adddi3>
    16ba:	28 8f       	std	Y+24, r18	; 0x18
    16bc:	39 8f       	std	Y+25, r19	; 0x19
    16be:	4a 8f       	std	Y+26, r20	; 0x1a
    16c0:	5b 8f       	std	Y+27, r21	; 0x1b
    16c2:	6c 8f       	std	Y+28, r22	; 0x1c
    16c4:	7d 8f       	std	Y+29, r23	; 0x1d
    16c6:	8e 8f       	std	Y+30, r24	; 0x1e
    16c8:	9f 8f       	std	Y+31, r25	; 0x1f
    16ca:	4a 2c       	mov	r4, r10
    16cc:	5b 2c       	mov	r5, r11
    16ce:	6c 2c       	mov	r6, r12
    16d0:	7d 2c       	mov	r7, r13
    16d2:	8e 2c       	mov	r8, r14
    16d4:	9f 2c       	mov	r9, r15
    16d6:	20 2e       	mov	r2, r16
    16d8:	31 2e       	mov	r3, r17
    16da:	1c 82       	std	Y+4, r1	; 0x04
    16dc:	aa 81       	ldd	r26, Y+2	; 0x02
    16de:	bb 81       	ldd	r27, Y+3	; 0x03
    16e0:	ed 91       	ld	r30, X+
    16e2:	fc 91       	ld	r31, X
    16e4:	01 90       	ld	r0, Z+
    16e6:	f0 81       	ld	r31, Z
    16e8:	e0 2d       	mov	r30, r0
    16ea:	ee 24       	eor	r14, r14
    16ec:	e3 94       	inc	r14
    16ee:	f1 2c       	mov	r15, r1
    16f0:	8e 01       	movw	r16, r28
    16f2:	0f 5f       	subi	r16, 0xFF	; 255
    16f4:	1f 4f       	sbci	r17, 0xFF	; 255
    16f6:	24 2d       	mov	r18, r4
    16f8:	35 2d       	mov	r19, r5
    16fa:	46 2d       	mov	r20, r6
    16fc:	57 2d       	mov	r21, r7
    16fe:	68 2d       	mov	r22, r8
    1700:	79 2d       	mov	r23, r9
    1702:	82 2d       	mov	r24, r2
    1704:	93 2d       	mov	r25, r3
    1706:	09 95       	icall
    1708:	88 23       	and	r24, r24
    170a:	e1 f1       	breq	.+120    	; 0x1784 <fat_find_offset_for_dir_entry+0x3d2>
    170c:	89 81       	ldd	r24, Y+1	; 0x01
    170e:	85 3e       	cpi	r24, 0xE5	; 229
    1710:	11 f0       	breq	.+4      	; 0x1716 <fat_find_offset_for_dir_entry+0x364>
    1712:	81 11       	cpse	r24, r1
    1714:	1a c0       	rjmp	.+52     	; 0x174a <fat_find_offset_for_dir_entry+0x398>
    1716:	bc 81       	ldd	r27, Y+4	; 0x04
    1718:	bf 5f       	subi	r27, 0xFF	; 255
    171a:	bc 83       	std	Y+4, r27	; 0x04
    171c:	e8 a1       	ldd	r30, Y+32	; 0x20
    171e:	be 17       	cp	r27, r30
    1720:	d0 f5       	brcc	.+116    	; 0x1796 <fat_find_offset_for_dir_entry+0x3e4>
    1722:	24 2d       	mov	r18, r4
    1724:	35 2d       	mov	r19, r5
    1726:	46 2d       	mov	r20, r6
    1728:	57 2d       	mov	r21, r7
    172a:	68 2d       	mov	r22, r8
    172c:	79 2d       	mov	r23, r9
    172e:	82 2d       	mov	r24, r2
    1730:	93 2d       	mov	r25, r3
    1732:	a0 e2       	ldi	r26, 0x20	; 32
    1734:	0e 94 6f 27 	call	0x4ede	; 0x4ede <__adddi3_s8>
    1738:	42 2e       	mov	r4, r18
    173a:	53 2e       	mov	r5, r19
    173c:	64 2e       	mov	r6, r20
    173e:	75 2e       	mov	r7, r21
    1740:	86 2e       	mov	r8, r22
    1742:	97 2e       	mov	r9, r23
    1744:	28 2e       	mov	r2, r24
    1746:	39 2e       	mov	r3, r25
    1748:	d6 ce       	rjmp	.-596    	; 0x14f6 <fat_find_offset_for_dir_entry+0x144>
    174a:	24 2d       	mov	r18, r4
    174c:	35 2d       	mov	r19, r5
    174e:	46 2d       	mov	r20, r6
    1750:	57 2d       	mov	r21, r7
    1752:	68 2d       	mov	r22, r8
    1754:	79 2d       	mov	r23, r9
    1756:	82 2d       	mov	r24, r2
    1758:	93 2d       	mov	r25, r3
    175a:	a0 e2       	ldi	r26, 0x20	; 32
    175c:	0e 94 6f 27 	call	0x4ede	; 0x4ede <__adddi3_s8>
    1760:	2c 87       	std	Y+12, r18	; 0x0c
    1762:	3d 87       	std	Y+13, r19	; 0x0d
    1764:	4e 87       	std	Y+14, r20	; 0x0e
    1766:	5f 87       	std	Y+15, r21	; 0x0f
    1768:	68 8b       	std	Y+16, r22	; 0x10
    176a:	79 8b       	std	Y+17, r23	; 0x11
    176c:	8a 8b       	std	Y+18, r24	; 0x12
    176e:	9b 8b       	std	Y+19, r25	; 0x13
    1770:	42 2e       	mov	r4, r18
    1772:	53 2e       	mov	r5, r19
    1774:	64 2e       	mov	r6, r20
    1776:	75 2e       	mov	r7, r21
    1778:	86 2e       	mov	r8, r22
    177a:	97 2e       	mov	r9, r23
    177c:	28 2e       	mov	r2, r24
    177e:	39 2e       	mov	r3, r25
    1780:	1c 82       	std	Y+4, r1	; 0x04
    1782:	b9 ce       	rjmp	.-654    	; 0x14f6 <fat_find_offset_for_dir_entry+0x144>
    1784:	20 e0       	ldi	r18, 0x00	; 0
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	40 e0       	ldi	r20, 0x00	; 0
    178a:	50 e0       	ldi	r21, 0x00	; 0
    178c:	60 e0       	ldi	r22, 0x00	; 0
    178e:	70 e0       	ldi	r23, 0x00	; 0
    1790:	80 e0       	ldi	r24, 0x00	; 0
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	2a c0       	rjmp	.+84     	; 0x17ea <fat_find_offset_for_dir_entry+0x438>
    1796:	2c 85       	ldd	r18, Y+12	; 0x0c
    1798:	3d 85       	ldd	r19, Y+13	; 0x0d
    179a:	4e 85       	ldd	r20, Y+14	; 0x0e
    179c:	5f 85       	ldd	r21, Y+15	; 0x0f
    179e:	68 89       	ldd	r22, Y+16	; 0x10
    17a0:	79 89       	ldd	r23, Y+17	; 0x11
    17a2:	8a 89       	ldd	r24, Y+18	; 0x12
    17a4:	9b 89       	ldd	r25, Y+19	; 0x13
    17a6:	21 c0       	rjmp	.+66     	; 0x17ea <fat_find_offset_for_dir_entry+0x438>
    17a8:	20 e0       	ldi	r18, 0x00	; 0
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	40 e0       	ldi	r20, 0x00	; 0
    17ae:	50 e0       	ldi	r21, 0x00	; 0
    17b0:	60 e0       	ldi	r22, 0x00	; 0
    17b2:	70 e0       	ldi	r23, 0x00	; 0
    17b4:	80 e0       	ldi	r24, 0x00	; 0
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	18 c0       	rjmp	.+48     	; 0x17ea <fat_find_offset_for_dir_entry+0x438>
    17ba:	20 e0       	ldi	r18, 0x00	; 0
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	40 e0       	ldi	r20, 0x00	; 0
    17c0:	50 e0       	ldi	r21, 0x00	; 0
    17c2:	60 e0       	ldi	r22, 0x00	; 0
    17c4:	70 e0       	ldi	r23, 0x00	; 0
    17c6:	80 e0       	ldi	r24, 0x00	; 0
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	0f c0       	rjmp	.+30     	; 0x17ea <fat_find_offset_for_dir_entry+0x438>
    17cc:	6c 8b       	std	Y+20, r22	; 0x14
    17ce:	7d 8b       	std	Y+21, r23	; 0x15
    17d0:	8e 8b       	std	Y+22, r24	; 0x16
    17d2:	9f 8b       	std	Y+23, r25	; 0x17
    17d4:	0c 89       	ldd	r16, Y+20	; 0x14
    17d6:	1d 89       	ldd	r17, Y+21	; 0x15
    17d8:	2e 89       	ldd	r18, Y+22	; 0x16
    17da:	3f 89       	ldd	r19, Y+23	; 0x17
    17dc:	02 30       	cpi	r16, 0x02	; 2
    17de:	11 05       	cpc	r17, r1
    17e0:	21 05       	cpc	r18, r1
    17e2:	31 05       	cpc	r19, r1
    17e4:	08 f0       	brcs	.+2      	; 0x17e8 <fat_find_offset_for_dir_entry+0x436>
    17e6:	13 cf       	rjmp	.-474    	; 0x160e <fat_find_offset_for_dir_entry+0x25c>
    17e8:	48 cf       	rjmp	.-368    	; 0x167a <fat_find_offset_for_dir_entry+0x2c8>
    17ea:	a0 96       	adiw	r28, 0x20	; 32
    17ec:	0f b6       	in	r0, 0x3f	; 63
    17ee:	f8 94       	cli
    17f0:	de bf       	out	0x3e, r29	; 62
    17f2:	0f be       	out	0x3f, r0	; 63
    17f4:	cd bf       	out	0x3d, r28	; 61
    17f6:	df 91       	pop	r29
    17f8:	cf 91       	pop	r28
    17fa:	1f 91       	pop	r17
    17fc:	0f 91       	pop	r16
    17fe:	ff 90       	pop	r15
    1800:	ef 90       	pop	r14
    1802:	df 90       	pop	r13
    1804:	cf 90       	pop	r12
    1806:	bf 90       	pop	r11
    1808:	af 90       	pop	r10
    180a:	9f 90       	pop	r9
    180c:	8f 90       	pop	r8
    180e:	7f 90       	pop	r7
    1810:	6f 90       	pop	r6
    1812:	5f 90       	pop	r5
    1814:	4f 90       	pop	r4
    1816:	3f 90       	pop	r3
    1818:	2f 90       	pop	r2
    181a:	08 95       	ret

0000181c <fat_open>:
    181c:	2f 92       	push	r2
    181e:	3f 92       	push	r3
    1820:	4f 92       	push	r4
    1822:	5f 92       	push	r5
    1824:	6f 92       	push	r6
    1826:	7f 92       	push	r7
    1828:	8f 92       	push	r8
    182a:	9f 92       	push	r9
    182c:	af 92       	push	r10
    182e:	bf 92       	push	r11
    1830:	cf 92       	push	r12
    1832:	df 92       	push	r13
    1834:	ef 92       	push	r14
    1836:	ff 92       	push	r15
    1838:	0f 93       	push	r16
    183a:	1f 93       	push	r17
    183c:	cf 93       	push	r28
    183e:	df 93       	push	r29
    1840:	cd b7       	in	r28, 0x3d	; 61
    1842:	de b7       	in	r29, 0x3e	; 62
    1844:	c5 55       	subi	r28, 0x55	; 85
    1846:	d1 09       	sbc	r29, r1
    1848:	0f b6       	in	r0, 0x3f	; 63
    184a:	f8 94       	cli
    184c:	de bf       	out	0x3e, r29	; 62
    184e:	0f be       	out	0x3f, r0	; 63
    1850:	cd bf       	out	0x3d, r28	; 61
    1852:	00 97       	sbiw	r24, 0x00	; 0
    1854:	09 f4       	brne	.+2      	; 0x1858 <fat_open+0x3c>
    1856:	47 c2       	rjmp	.+1166   	; 0x1ce6 <fat_open+0x4ca>
    1858:	dc 01       	movw	r26, r24
    185a:	14 96       	adiw	r26, 0x04	; 4
    185c:	2d 91       	ld	r18, X+
    185e:	3c 91       	ld	r19, X
    1860:	15 97       	sbiw	r26, 0x05	; 5
    1862:	23 2b       	or	r18, r19
    1864:	09 f4       	brne	.+2      	; 0x1868 <fat_open+0x4c>
    1866:	42 c2       	rjmp	.+1156   	; 0x1cec <fat_open+0x4d0>
    1868:	16 96       	adiw	r26, 0x06	; 6
    186a:	2d 91       	ld	r18, X+
    186c:	3c 91       	ld	r19, X
    186e:	17 97       	sbiw	r26, 0x07	; 7
    1870:	23 2b       	or	r18, r19
    1872:	09 f4       	brne	.+2      	; 0x1876 <fat_open+0x5a>
    1874:	3e c2       	rjmp	.+1148   	; 0x1cf2 <fat_open+0x4d6>
    1876:	20 91 6d 02 	lds	r18, 0x026D	; 0x80026d <fat_fs_handles>
    187a:	30 91 6e 02 	lds	r19, 0x026E	; 0x80026e <fat_fs_handles+0x1>
    187e:	23 2b       	or	r18, r19
    1880:	09 f4       	brne	.+2      	; 0x1884 <fat_open+0x68>
    1882:	3a c2       	rjmp	.+1140   	; 0x1cf8 <fat_open+0x4dc>
    1884:	80 e0       	ldi	r24, 0x00	; 0
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	73 c2       	rjmp	.+1254   	; 0x1d70 <fat_open+0x554>
    188a:	ce 01       	movw	r24, r28
    188c:	01 96       	adiw	r24, 0x01	; 1
    188e:	0e 94 02 01 	call	0x204	; 0x204 <read16>
    1892:	98 af       	std	Y+56, r25	; 0x38
    1894:	8f ab       	std	Y+55, r24	; 0x37
    1896:	ce 01       	movw	r24, r28
    1898:	04 96       	adiw	r24, 0x04	; 4
    189a:	0e 94 02 01 	call	0x204	; 0x204 <read16>
    189e:	9a af       	std	Y+58, r25	; 0x3a
    18a0:	89 af       	std	Y+57, r24	; 0x39
    18a2:	bb 81       	ldd	r27, Y+3	; 0x03
    18a4:	2a 96       	adiw	r28, 0x0a	; 10
    18a6:	bf af       	std	Y+63, r27	; 0x3f
    18a8:	2a 97       	sbiw	r28, 0x0a	; 10
    18aa:	ee 81       	ldd	r30, Y+6	; 0x06
    18ac:	2b 96       	adiw	r28, 0x0b	; 11
    18ae:	ef af       	std	Y+63, r30	; 0x3f
    18b0:	2b 97       	sbiw	r28, 0x0b	; 11
    18b2:	ce 01       	movw	r24, r28
    18b4:	07 96       	adiw	r24, 0x07	; 7
    18b6:	0e 94 02 01 	call	0x204	; 0x204 <read16>
    18ba:	2d 96       	adiw	r28, 0x0d	; 13
    18bc:	9f af       	std	Y+63, r25	; 0x3f
    18be:	8e af       	std	Y+62, r24	; 0x3e
    18c0:	2d 97       	sbiw	r28, 0x0d	; 13
    18c2:	ce 01       	movw	r24, r28
    18c4:	09 96       	adiw	r24, 0x09	; 9
    18c6:	0e 94 02 01 	call	0x204	; 0x204 <read16>
    18ca:	7c 01       	movw	r14, r24
    18cc:	ce 01       	movw	r24, r28
    18ce:	0c 96       	adiw	r24, 0x0c	; 12
    18d0:	0e 94 02 01 	call	0x204	; 0x204 <read16>
    18d4:	29 96       	adiw	r28, 0x09	; 9
    18d6:	9f af       	std	Y+63, r25	; 0x3f
    18d8:	8e af       	std	Y+62, r24	; 0x3e
    18da:	29 97       	sbiw	r28, 0x09	; 9
    18dc:	ce 01       	movw	r24, r28
    18de:	46 96       	adiw	r24, 0x16	; 22
    18e0:	0e 94 0c 01 	call	0x218	; 0x218 <read32>
    18e4:	5b 01       	movw	r10, r22
    18e6:	6c 01       	movw	r12, r24
    18e8:	ce 01       	movw	r24, r28
    18ea:	4a 96       	adiw	r24, 0x1a	; 26
    18ec:	0e 94 0c 01 	call	0x218	; 0x218 <read32>
    18f0:	27 96       	adiw	r28, 0x07	; 7
    18f2:	6c af       	std	Y+60, r22	; 0x3c
    18f4:	7d af       	std	Y+61, r23	; 0x3d
    18f6:	8e af       	std	Y+62, r24	; 0x3e
    18f8:	9f af       	std	Y+63, r25	; 0x3f
    18fa:	27 97       	sbiw	r28, 0x07	; 7
    18fc:	ce 01       	movw	r24, r28
    18fe:	82 96       	adiw	r24, 0x22	; 34
    1900:	0e 94 0c 01 	call	0x218	; 0x218 <read32>
    1904:	65 96       	adiw	r28, 0x15	; 21
    1906:	6c af       	std	Y+60, r22	; 0x3c
    1908:	7d af       	std	Y+61, r23	; 0x3d
    190a:	8e af       	std	Y+62, r24	; 0x3e
    190c:	9f af       	std	Y+63, r25	; 0x3f
    190e:	65 97       	sbiw	r28, 0x15	; 21
    1910:	a1 14       	cp	r10, r1
    1912:	b1 04       	cpc	r11, r1
    1914:	c1 04       	cpc	r12, r1
    1916:	d1 04       	cpc	r13, r1
    1918:	39 f4       	brne	.+14     	; 0x1928 <fat_open+0x10c>
    191a:	e1 14       	cp	r14, r1
    191c:	f1 04       	cpc	r15, r1
    191e:	09 f4       	brne	.+2      	; 0x1922 <fat_open+0x106>
    1920:	1e c2       	rjmp	.+1084   	; 0x1d5e <fat_open+0x542>
    1922:	57 01       	movw	r10, r14
    1924:	c1 2c       	mov	r12, r1
    1926:	d1 2c       	mov	r13, r1
    1928:	29 96       	adiw	r28, 0x09	; 9
    192a:	ee ac       	ldd	r14, Y+62	; 0x3e
    192c:	ff ac       	ldd	r15, Y+63	; 0x3f
    192e:	29 97       	sbiw	r28, 0x09	; 9
    1930:	e1 14       	cp	r14, r1
    1932:	f1 04       	cpc	r15, r1
    1934:	51 f0       	breq	.+20     	; 0x194a <fat_open+0x12e>
    1936:	87 01       	movw	r16, r14
    1938:	20 e0       	ldi	r18, 0x00	; 0
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	27 96       	adiw	r28, 0x07	; 7
    193e:	0c af       	std	Y+60, r16	; 0x3c
    1940:	1d af       	std	Y+61, r17	; 0x3d
    1942:	2e af       	std	Y+62, r18	; 0x3e
    1944:	3f af       	std	Y+63, r19	; 0x3f
    1946:	27 97       	sbiw	r28, 0x07	; 7
    1948:	0b c0       	rjmp	.+22     	; 0x1960 <fat_open+0x144>
    194a:	27 96       	adiw	r28, 0x07	; 7
    194c:	4c ad       	ldd	r20, Y+60	; 0x3c
    194e:	5d ad       	ldd	r21, Y+61	; 0x3d
    1950:	6e ad       	ldd	r22, Y+62	; 0x3e
    1952:	7f ad       	ldd	r23, Y+63	; 0x3f
    1954:	27 97       	sbiw	r28, 0x07	; 7
    1956:	45 2b       	or	r20, r21
    1958:	46 2b       	or	r20, r22
    195a:	47 2b       	or	r20, r23
    195c:	09 f4       	brne	.+2      	; 0x1960 <fat_open+0x144>
    195e:	ff c1       	rjmp	.+1022   	; 0x1d5e <fat_open+0x542>
    1960:	2b 96       	adiw	r28, 0x0b	; 11
    1962:	5f ad       	ldd	r21, Y+63	; 0x3f
    1964:	2b 97       	sbiw	r28, 0x0b	; 11
    1966:	a5 2f       	mov	r26, r21
    1968:	b0 e0       	ldi	r27, 0x00	; 0
    196a:	27 96       	adiw	r28, 0x07	; 7
    196c:	2c ad       	ldd	r18, Y+60	; 0x3c
    196e:	3d ad       	ldd	r19, Y+61	; 0x3d
    1970:	4e ad       	ldd	r20, Y+62	; 0x3e
    1972:	5f ad       	ldd	r21, Y+63	; 0x3f
    1974:	27 97       	sbiw	r28, 0x07	; 7
    1976:	0e 94 cb 26 	call	0x4d96	; 0x4d96 <__muluhisi3>
    197a:	86 01       	movw	r16, r12
    197c:	75 01       	movw	r14, r10
    197e:	29 ad       	ldd	r18, Y+57	; 0x39
    1980:	3a ad       	ldd	r19, Y+58	; 0x3a
    1982:	e2 1a       	sub	r14, r18
    1984:	f3 0a       	sbc	r15, r19
    1986:	01 09       	sbc	r16, r1
    1988:	11 09       	sbc	r17, r1
    198a:	e6 1a       	sub	r14, r22
    198c:	f7 0a       	sbc	r15, r23
    198e:	08 0b       	sbc	r16, r24
    1990:	19 0b       	sbc	r17, r25
    1992:	8f a9       	ldd	r24, Y+55	; 0x37
    1994:	98 ad       	ldd	r25, Y+56	; 0x38
    1996:	01 97       	sbiw	r24, 0x01	; 1
    1998:	2d 96       	adiw	r28, 0x0d	; 13
    199a:	4e ad       	ldd	r20, Y+62	; 0x3e
    199c:	5f ad       	ldd	r21, Y+63	; 0x3f
    199e:	2d 97       	sbiw	r28, 0x0d	; 13
    19a0:	44 0f       	add	r20, r20
    19a2:	55 1f       	adc	r21, r21
    19a4:	42 95       	swap	r20
    19a6:	52 95       	swap	r21
    19a8:	50 7f       	andi	r21, 0xF0	; 240
    19aa:	54 27       	eor	r21, r20
    19ac:	40 7f       	andi	r20, 0xF0	; 240
    19ae:	54 27       	eor	r21, r20
    19b0:	84 0f       	add	r24, r20
    19b2:	95 1f       	adc	r25, r21
    19b4:	6f a9       	ldd	r22, Y+55	; 0x37
    19b6:	78 ad       	ldd	r23, Y+56	; 0x38
    19b8:	0e 94 72 26 	call	0x4ce4	; 0x4ce4 <__udivmodhi4>
    19bc:	e6 1a       	sub	r14, r22
    19be:	f7 0a       	sbc	r15, r23
    19c0:	01 09       	sbc	r16, r1
    19c2:	11 09       	sbc	r17, r1
    19c4:	c8 01       	movw	r24, r16
    19c6:	b7 01       	movw	r22, r14
    19c8:	2a 96       	adiw	r28, 0x0a	; 10
    19ca:	4f ad       	ldd	r20, Y+63	; 0x3f
    19cc:	2a 97       	sbiw	r28, 0x0a	; 10
    19ce:	04 2f       	mov	r16, r20
    19d0:	10 e0       	ldi	r17, 0x00	; 0
    19d2:	20 e0       	ldi	r18, 0x00	; 0
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	a9 01       	movw	r20, r18
    19d8:	98 01       	movw	r18, r16
    19da:	0e 94 9a 26 	call	0x4d34	; 0x4d34 <__udivmodsi4>
    19de:	61 96       	adiw	r28, 0x11	; 17
    19e0:	2c af       	std	Y+60, r18	; 0x3c
    19e2:	3d af       	std	Y+61, r19	; 0x3d
    19e4:	4e af       	std	Y+62, r20	; 0x3e
    19e6:	5f af       	std	Y+63, r21	; 0x3f
    19e8:	61 97       	sbiw	r28, 0x11	; 17
    19ea:	da 01       	movw	r26, r20
    19ec:	c9 01       	movw	r24, r18
    19ee:	85 3f       	cpi	r24, 0xF5	; 245
    19f0:	5f e0       	ldi	r21, 0x0F	; 15
    19f2:	95 07       	cpc	r25, r21
    19f4:	a1 05       	cpc	r26, r1
    19f6:	b1 05       	cpc	r27, r1
    19f8:	08 f4       	brcc	.+2      	; 0x19fc <fat_open+0x1e0>
    19fa:	b1 c1       	rjmp	.+866    	; 0x1d5e <fat_open+0x542>
    19fc:	85 3f       	cpi	r24, 0xF5	; 245
    19fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1a00:	a1 05       	cpc	r26, r1
    1a02:	b1 05       	cpc	r27, r1
    1a04:	28 f4       	brcc	.+10     	; 0x1a10 <fat_open+0x1f4>
    1a06:	86 e0       	ldi	r24, 0x06	; 6
    1a08:	d3 01       	movw	r26, r6
    1a0a:	18 96       	adiw	r26, 0x08	; 8
    1a0c:	8c 93       	st	X, r24
    1a0e:	03 c0       	rjmp	.+6      	; 0x1a16 <fat_open+0x1fa>
    1a10:	8b e0       	ldi	r24, 0x0B	; 11
    1a12:	f3 01       	movw	r30, r6
    1a14:	80 87       	std	Z+8, r24	; 0x08
    1a16:	8c e2       	ldi	r24, 0x2C	; 44
    1a18:	ef e6       	ldi	r30, 0x6F	; 111
    1a1a:	f2 e0       	ldi	r31, 0x02	; 2
    1a1c:	df 01       	movw	r26, r30
    1a1e:	1d 92       	st	X+, r1
    1a20:	8a 95       	dec	r24
    1a22:	e9 f7       	brne	.-6      	; 0x1a1e <fat_open+0x202>
    1a24:	0f a9       	ldd	r16, Y+55	; 0x37
    1a26:	18 ad       	ldd	r17, Y+56	; 0x38
    1a28:	78 01       	movw	r14, r16
    1a2a:	00 e0       	ldi	r16, 0x00	; 0
    1a2c:	10 e0       	ldi	r17, 0x00	; 0
    1a2e:	20 e0       	ldi	r18, 0x00	; 0
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	a9 01       	movw	r20, r18
    1a34:	ef a6       	std	Y+47, r14	; 0x2f
    1a36:	f8 aa       	std	Y+48, r15	; 0x30
    1a38:	09 ab       	std	Y+49, r16	; 0x31
    1a3a:	1a ab       	std	Y+50, r17	; 0x32
    1a3c:	2b ab       	std	Y+51, r18	; 0x33
    1a3e:	3c ab       	std	Y+52, r19	; 0x34
    1a40:	4d ab       	std	Y+53, r20	; 0x35
    1a42:	5e ab       	std	Y+54, r21	; 0x36
    1a44:	a6 01       	movw	r20, r12
    1a46:	95 01       	movw	r18, r10
    1a48:	60 e0       	ldi	r22, 0x00	; 0
    1a4a:	70 e0       	ldi	r23, 0x00	; 0
    1a4c:	cb 01       	movw	r24, r22
    1a4e:	ab ae       	std	Y+59, r10	; 0x3b
    1a50:	3c af       	std	Y+60, r19	; 0x3c
    1a52:	4d af       	std	Y+61, r20	; 0x3d
    1a54:	5e af       	std	Y+62, r21	; 0x3e
    1a56:	6f af       	std	Y+63, r22	; 0x3f
    1a58:	21 96       	adiw	r28, 0x01	; 1
    1a5a:	7f af       	std	Y+63, r23	; 0x3f
    1a5c:	21 97       	sbiw	r28, 0x01	; 1
    1a5e:	22 96       	adiw	r28, 0x02	; 2
    1a60:	8f af       	std	Y+63, r24	; 0x3f
    1a62:	22 97       	sbiw	r28, 0x02	; 2
    1a64:	23 96       	adiw	r28, 0x03	; 3
    1a66:	9f af       	std	Y+63, r25	; 0x3f
    1a68:	23 97       	sbiw	r28, 0x03	; 3
    1a6a:	ae 2c       	mov	r10, r14
    1a6c:	bf 2c       	mov	r11, r15
    1a6e:	c1 2c       	mov	r12, r1
    1a70:	d1 2c       	mov	r13, r1
    1a72:	e1 2c       	mov	r14, r1
    1a74:	f1 2c       	mov	r15, r1
    1a76:	00 e0       	ldi	r16, 0x00	; 0
    1a78:	10 e0       	ldi	r17, 0x00	; 0
    1a7a:	60 e0       	ldi	r22, 0x00	; 0
    1a7c:	70 e0       	ldi	r23, 0x00	; 0
    1a7e:	80 e0       	ldi	r24, 0x00	; 0
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	0e 94 d6 26 	call	0x4dac	; 0x4dac <__muldi3>
    1a86:	20 93 6f 02 	sts	0x026F, r18	; 0x80026f <fat_fs_handles+0x2>
    1a8a:	30 93 70 02 	sts	0x0270, r19	; 0x800270 <fat_fs_handles+0x3>
    1a8e:	40 93 71 02 	sts	0x0271, r20	; 0x800271 <fat_fs_handles+0x4>
    1a92:	50 93 72 02 	sts	0x0272, r21	; 0x800272 <fat_fs_handles+0x5>
    1a96:	60 93 73 02 	sts	0x0273, r22	; 0x800273 <fat_fs_handles+0x6>
    1a9a:	70 93 74 02 	sts	0x0274, r23	; 0x800274 <fat_fs_handles+0x7>
    1a9e:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <fat_fs_handles+0x8>
    1aa2:	90 93 76 02 	sts	0x0276, r25	; 0x800276 <fat_fs_handles+0x9>
    1aa6:	e9 ad       	ldd	r30, Y+57	; 0x39
    1aa8:	fa ad       	ldd	r31, Y+58	; 0x3a
    1aaa:	af 01       	movw	r20, r30
    1aac:	2e 2f       	mov	r18, r30
    1aae:	35 2f       	mov	r19, r21
    1ab0:	40 e0       	ldi	r20, 0x00	; 0
    1ab2:	50 e0       	ldi	r21, 0x00	; 0
    1ab4:	60 e0       	ldi	r22, 0x00	; 0
    1ab6:	70 e0       	ldi	r23, 0x00	; 0
    1ab8:	80 e0       	ldi	r24, 0x00	; 0
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	0e 94 d6 26 	call	0x4dac	; 0x4dac <__muldi3>
    1ac0:	a2 2c       	mov	r10, r2
    1ac2:	b3 2c       	mov	r11, r3
    1ac4:	c4 2c       	mov	r12, r4
    1ac6:	d5 2c       	mov	r13, r5
    1ac8:	ee a0       	ldd	r14, Y+38	; 0x26
    1aca:	fe a4       	ldd	r15, Y+46	; 0x2e
    1acc:	08 2d       	mov	r16, r8
    1ace:	19 2d       	mov	r17, r9
    1ad0:	0e 94 66 27 	call	0x4ecc	; 0x4ecc <__adddi3>
    1ad4:	2e a7       	std	Y+46, r18	; 0x2e
    1ad6:	39 af       	std	Y+57, r19	; 0x39
    1ad8:	54 2e       	mov	r5, r20
    1ada:	45 2e       	mov	r4, r21
    1adc:	36 2e       	mov	r3, r22
    1ade:	27 2e       	mov	r2, r23
    1ae0:	8b af       	std	Y+59, r24	; 0x3b
    1ae2:	66 96       	adiw	r28, 0x16	; 22
    1ae4:	9f af       	std	Y+63, r25	; 0x3f
    1ae6:	66 97       	sbiw	r28, 0x16	; 22
    1ae8:	20 93 77 02 	sts	0x0277, r18	; 0x800277 <fat_fs_handles+0xa>
    1aec:	30 93 78 02 	sts	0x0278, r19	; 0x800278 <fat_fs_handles+0xb>
    1af0:	40 93 79 02 	sts	0x0279, r20	; 0x800279 <fat_fs_handles+0xc>
    1af4:	50 93 7a 02 	sts	0x027A, r21	; 0x80027a <fat_fs_handles+0xd>
    1af8:	60 93 7b 02 	sts	0x027B, r22	; 0x80027b <fat_fs_handles+0xe>
    1afc:	70 93 7c 02 	sts	0x027C, r23	; 0x80027c <fat_fs_handles+0xf>
    1b00:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <fat_fs_handles+0x10>
    1b04:	90 93 7e 02 	sts	0x027E, r25	; 0x80027e <fat_fs_handles+0x11>
    1b08:	61 96       	adiw	r28, 0x11	; 17
    1b0a:	2c ad       	ldd	r18, Y+60	; 0x3c
    1b0c:	3d ad       	ldd	r19, Y+61	; 0x3d
    1b0e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1b10:	5f ad       	ldd	r21, Y+63	; 0x3f
    1b12:	61 97       	sbiw	r28, 0x11	; 17
    1b14:	2e 5f       	subi	r18, 0xFE	; 254
    1b16:	3f 4f       	sbci	r19, 0xFF	; 255
    1b18:	4f 4f       	sbci	r20, 0xFF	; 255
    1b1a:	5f 4f       	sbci	r21, 0xFF	; 255
    1b1c:	d3 01       	movw	r26, r6
    1b1e:	18 96       	adiw	r26, 0x08	; 8
    1b20:	8c 91       	ld	r24, X
    1b22:	86 30       	cpi	r24, 0x06	; 6
    1b24:	29 f0       	breq	.+10     	; 0x1b30 <fat_open+0x314>
    1b26:	64 e0       	ldi	r22, 0x04	; 4
    1b28:	70 e0       	ldi	r23, 0x00	; 0
    1b2a:	80 e0       	ldi	r24, 0x00	; 0
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	04 c0       	rjmp	.+8      	; 0x1b38 <fat_open+0x31c>
    1b30:	62 e0       	ldi	r22, 0x02	; 2
    1b32:	70 e0       	ldi	r23, 0x00	; 0
    1b34:	80 e0       	ldi	r24, 0x00	; 0
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	ed e6       	ldi	r30, 0x6D	; 109
    1b3a:	f2 e0       	ldi	r31, 0x02	; 2
    1b3c:	0e 94 62 26 	call	0x4cc4	; 0x4cc4 <__mulsi3>
    1b40:	62 8b       	std	Z+18, r22	; 0x12
    1b42:	73 8b       	std	Z+19, r23	; 0x13
    1b44:	84 8b       	std	Z+20, r24	; 0x14
    1b46:	95 8b       	std	Z+21, r25	; 0x15
    1b48:	af a8       	ldd	r10, Y+55	; 0x37
    1b4a:	b8 ac       	ldd	r11, Y+56	; 0x38
    1b4c:	b7 8a       	std	Z+23, r11	; 0x17
    1b4e:	a6 8a       	std	Z+22, r10	; 0x16
    1b50:	2a 96       	adiw	r28, 0x0a	; 10
    1b52:	cf ac       	ldd	r12, Y+63	; 0x3f
    1b54:	2a 97       	sbiw	r28, 0x0a	; 10
    1b56:	ca 9c       	mul	r12, r10
    1b58:	c0 01       	movw	r24, r0
    1b5a:	cb 9c       	mul	r12, r11
    1b5c:	90 0d       	add	r25, r0
    1b5e:	11 24       	eor	r1, r1
    1b60:	91 8f       	std	Z+25, r25	; 0x19
    1b62:	80 8f       	std	Z+24, r24	; 0x18
    1b64:	d3 01       	movw	r26, r6
    1b66:	18 96       	adiw	r26, 0x08	; 8
    1b68:	8c 91       	ld	r24, X
    1b6a:	86 30       	cpi	r24, 0x06	; 6
    1b6c:	09 f0       	breq	.+2      	; 0x1b70 <fat_open+0x354>
    1b6e:	56 c0       	rjmp	.+172    	; 0x1c1c <fat_open+0x400>
    1b70:	29 96       	adiw	r28, 0x09	; 9
    1b72:	ee ad       	ldd	r30, Y+62	; 0x3e
    1b74:	ff ad       	ldd	r31, Y+63	; 0x3f
    1b76:	29 97       	sbiw	r28, 0x09	; 9
    1b78:	af 01       	movw	r20, r30
    1b7a:	af a4       	ldd	r10, Y+47	; 0x2f
    1b7c:	b8 a8       	ldd	r11, Y+48	; 0x30
    1b7e:	c1 2c       	mov	r12, r1
    1b80:	d1 2c       	mov	r13, r1
    1b82:	e1 2c       	mov	r14, r1
    1b84:	f1 2c       	mov	r15, r1
    1b86:	00 e0       	ldi	r16, 0x00	; 0
    1b88:	10 e0       	ldi	r17, 0x00	; 0
    1b8a:	2e 2f       	mov	r18, r30
    1b8c:	35 2f       	mov	r19, r21
    1b8e:	40 e0       	ldi	r20, 0x00	; 0
    1b90:	50 e0       	ldi	r21, 0x00	; 0
    1b92:	60 e0       	ldi	r22, 0x00	; 0
    1b94:	70 e0       	ldi	r23, 0x00	; 0
    1b96:	80 e0       	ldi	r24, 0x00	; 0
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	0e 94 d6 26 	call	0x4dac	; 0x4dac <__muldi3>
    1b9e:	2b 96       	adiw	r28, 0x0b	; 11
    1ba0:	af ac       	ldd	r10, Y+63	; 0x3f
    1ba2:	2b 97       	sbiw	r28, 0x0b	; 11
    1ba4:	b1 2c       	mov	r11, r1
    1ba6:	0e 94 d6 26 	call	0x4dac	; 0x4dac <__muldi3>
    1baa:	ae a4       	ldd	r10, Y+46	; 0x2e
    1bac:	b9 ac       	ldd	r11, Y+57	; 0x39
    1bae:	c5 2c       	mov	r12, r5
    1bb0:	d4 2c       	mov	r13, r4
    1bb2:	e3 2c       	mov	r14, r3
    1bb4:	f2 2c       	mov	r15, r2
    1bb6:	0b ad       	ldd	r16, Y+59	; 0x3b
    1bb8:	66 96       	adiw	r28, 0x16	; 22
    1bba:	1f ad       	ldd	r17, Y+63	; 0x3f
    1bbc:	66 97       	sbiw	r28, 0x16	; 22
    1bbe:	0e 94 66 27 	call	0x4ecc	; 0x4ecc <__adddi3>
    1bc2:	a2 2e       	mov	r10, r18
    1bc4:	b3 2e       	mov	r11, r19
    1bc6:	c4 2e       	mov	r12, r20
    1bc8:	d5 2e       	mov	r13, r21
    1bca:	e6 2e       	mov	r14, r22
    1bcc:	f7 2e       	mov	r15, r23
    1bce:	a8 2f       	mov	r26, r24
    1bd0:	19 2f       	mov	r17, r25
    1bd2:	ed e6       	ldi	r30, 0x6D	; 109
    1bd4:	f2 e0       	ldi	r31, 0x02	; 2
    1bd6:	22 a3       	std	Z+34, r18	; 0x22
    1bd8:	33 a3       	std	Z+35, r19	; 0x23
    1bda:	44 a3       	std	Z+36, r20	; 0x24
    1bdc:	55 a3       	std	Z+37, r21	; 0x25
    1bde:	66 a3       	std	Z+38, r22	; 0x26
    1be0:	77 a3       	std	Z+39, r23	; 0x27
    1be2:	80 a7       	std	Z+40, r24	; 0x28
    1be4:	91 a7       	std	Z+41, r25	; 0x29
    1be6:	2d 96       	adiw	r28, 0x0d	; 13
    1be8:	2e ad       	ldd	r18, Y+62	; 0x3e
    1bea:	3f ad       	ldd	r19, Y+63	; 0x3f
    1bec:	2d 97       	sbiw	r28, 0x0d	; 13
    1bee:	19 01       	movw	r2, r18
    1bf0:	33 2d       	mov	r19, r3
    1bf2:	40 e0       	ldi	r20, 0x00	; 0
    1bf4:	50 e0       	ldi	r21, 0x00	; 0
    1bf6:	60 e0       	ldi	r22, 0x00	; 0
    1bf8:	70 e0       	ldi	r23, 0x00	; 0
    1bfa:	80 e0       	ldi	r24, 0x00	; 0
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	05 e0       	ldi	r16, 0x05	; 5
    1c00:	0e 94 2f 27 	call	0x4e5e	; 0x4e5e <__ashldi3>
    1c04:	0a 2f       	mov	r16, r26
    1c06:	0e 94 66 27 	call	0x4ecc	; 0x4ecc <__adddi3>
    1c0a:	22 8f       	std	Z+26, r18	; 0x1a
    1c0c:	33 8f       	std	Z+27, r19	; 0x1b
    1c0e:	44 8f       	std	Z+28, r20	; 0x1c
    1c10:	55 8f       	std	Z+29, r21	; 0x1d
    1c12:	66 8f       	std	Z+30, r22	; 0x1e
    1c14:	77 8f       	std	Z+31, r23	; 0x1f
    1c16:	80 a3       	std	Z+32, r24	; 0x20
    1c18:	91 a3       	std	Z+33, r25	; 0x21
    1c1a:	a8 c0       	rjmp	.+336    	; 0x1d6c <fat_open+0x550>
    1c1c:	0f 2e       	mov	r0, r31
    1c1e:	fd e6       	ldi	r31, 0x6D	; 109
    1c20:	8f 2e       	mov	r8, r31
    1c22:	f2 e0       	ldi	r31, 0x02	; 2
    1c24:	9f 2e       	mov	r9, r31
    1c26:	f0 2d       	mov	r31, r0
    1c28:	af a4       	ldd	r10, Y+47	; 0x2f
    1c2a:	b8 a8       	ldd	r11, Y+48	; 0x30
    1c2c:	c1 2c       	mov	r12, r1
    1c2e:	d1 2c       	mov	r13, r1
    1c30:	e1 2c       	mov	r14, r1
    1c32:	f1 2c       	mov	r15, r1
    1c34:	00 e0       	ldi	r16, 0x00	; 0
    1c36:	10 e0       	ldi	r17, 0x00	; 0
    1c38:	2b 96       	adiw	r28, 0x0b	; 11
    1c3a:	2f ad       	ldd	r18, Y+63	; 0x3f
    1c3c:	2b 97       	sbiw	r28, 0x0b	; 11
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	40 e0       	ldi	r20, 0x00	; 0
    1c42:	50 e0       	ldi	r21, 0x00	; 0
    1c44:	60 e0       	ldi	r22, 0x00	; 0
    1c46:	70 e0       	ldi	r23, 0x00	; 0
    1c48:	80 e0       	ldi	r24, 0x00	; 0
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	0e 94 d6 26 	call	0x4dac	; 0x4dac <__muldi3>
    1c50:	27 96       	adiw	r28, 0x07	; 7
    1c52:	cc ac       	ldd	r12, Y+60	; 0x3c
    1c54:	dd ac       	ldd	r13, Y+61	; 0x3d
    1c56:	ee ac       	ldd	r14, Y+62	; 0x3e
    1c58:	ff ac       	ldd	r15, Y+63	; 0x3f
    1c5a:	27 97       	sbiw	r28, 0x07	; 7
    1c5c:	56 01       	movw	r10, r12
    1c5e:	67 01       	movw	r12, r14
    1c60:	e1 2c       	mov	r14, r1
    1c62:	f1 2c       	mov	r15, r1
    1c64:	87 01       	movw	r16, r14
    1c66:	ae a2       	std	Y+38, r10	; 0x26
    1c68:	bf a2       	std	Y+39, r11	; 0x27
    1c6a:	c8 a6       	std	Y+40, r12	; 0x28
    1c6c:	d9 a6       	std	Y+41, r13	; 0x29
    1c6e:	ea a6       	std	Y+42, r14	; 0x2a
    1c70:	fb a6       	std	Y+43, r15	; 0x2b
    1c72:	0c a7       	std	Y+44, r16	; 0x2c
    1c74:	1d a7       	std	Y+45, r17	; 0x2d
    1c76:	e1 2c       	mov	r14, r1
    1c78:	f1 2c       	mov	r15, r1
    1c7a:	00 e0       	ldi	r16, 0x00	; 0
    1c7c:	10 e0       	ldi	r17, 0x00	; 0
    1c7e:	0e 94 d6 26 	call	0x4dac	; 0x4dac <__muldi3>
    1c82:	ae a4       	ldd	r10, Y+46	; 0x2e
    1c84:	b9 ac       	ldd	r11, Y+57	; 0x39
    1c86:	c5 2c       	mov	r12, r5
    1c88:	d4 2c       	mov	r13, r4
    1c8a:	e3 2c       	mov	r14, r3
    1c8c:	f2 2c       	mov	r15, r2
    1c8e:	0b ad       	ldd	r16, Y+59	; 0x3b
    1c90:	66 96       	adiw	r28, 0x16	; 22
    1c92:	1f ad       	ldd	r17, Y+63	; 0x3f
    1c94:	66 97       	sbiw	r28, 0x16	; 22
    1c96:	0e 94 66 27 	call	0x4ecc	; 0x4ecc <__adddi3>
    1c9a:	d4 01       	movw	r26, r8
    1c9c:	5a 96       	adiw	r26, 0x1a	; 26
    1c9e:	2c 93       	st	X, r18
    1ca0:	5a 97       	sbiw	r26, 0x1a	; 26
    1ca2:	5b 96       	adiw	r26, 0x1b	; 27
    1ca4:	3c 93       	st	X, r19
    1ca6:	5b 97       	sbiw	r26, 0x1b	; 27
    1ca8:	5c 96       	adiw	r26, 0x1c	; 28
    1caa:	4c 93       	st	X, r20
    1cac:	5c 97       	sbiw	r26, 0x1c	; 28
    1cae:	5d 96       	adiw	r26, 0x1d	; 29
    1cb0:	5c 93       	st	X, r21
    1cb2:	5d 97       	sbiw	r26, 0x1d	; 29
    1cb4:	5e 96       	adiw	r26, 0x1e	; 30
    1cb6:	6c 93       	st	X, r22
    1cb8:	5e 97       	sbiw	r26, 0x1e	; 30
    1cba:	5f 96       	adiw	r26, 0x1f	; 31
    1cbc:	7c 93       	st	X, r23
    1cbe:	5f 97       	sbiw	r26, 0x1f	; 31
    1cc0:	90 96       	adiw	r26, 0x20	; 32
    1cc2:	8c 93       	st	X, r24
    1cc4:	90 97       	sbiw	r26, 0x20	; 32
    1cc6:	91 96       	adiw	r26, 0x21	; 33
    1cc8:	9c 93       	st	X, r25
    1cca:	91 97       	sbiw	r26, 0x21	; 33
    1ccc:	65 96       	adiw	r28, 0x15	; 21
    1cce:	ac ac       	ldd	r10, Y+60	; 0x3c
    1cd0:	bd ac       	ldd	r11, Y+61	; 0x3d
    1cd2:	ce ac       	ldd	r12, Y+62	; 0x3e
    1cd4:	df ac       	ldd	r13, Y+63	; 0x3f
    1cd6:	65 97       	sbiw	r28, 0x15	; 21
    1cd8:	9a 96       	adiw	r26, 0x2a	; 42
    1cda:	ad 92       	st	X+, r10
    1cdc:	bd 92       	st	X+, r11
    1cde:	cd 92       	st	X+, r12
    1ce0:	dc 92       	st	X, r13
    1ce2:	9d 97       	sbiw	r26, 0x2d	; 45
    1ce4:	43 c0       	rjmp	.+134    	; 0x1d6c <fat_open+0x550>
    1ce6:	80 e0       	ldi	r24, 0x00	; 0
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	42 c0       	rjmp	.+132    	; 0x1d70 <fat_open+0x554>
    1cec:	80 e0       	ldi	r24, 0x00	; 0
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	3f c0       	rjmp	.+126    	; 0x1d70 <fat_open+0x554>
    1cf2:	80 e0       	ldi	r24, 0x00	; 0
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	3c c0       	rjmp	.+120    	; 0x1d70 <fat_open+0x554>
    1cf8:	3c 01       	movw	r6, r24
    1cfa:	ed e6       	ldi	r30, 0x6D	; 109
    1cfc:	f2 e0       	ldi	r31, 0x02	; 2
    1cfe:	82 e3       	ldi	r24, 0x32	; 50
    1d00:	df 01       	movw	r26, r30
    1d02:	1d 92       	st	X+, r1
    1d04:	8a 95       	dec	r24
    1d06:	e9 f7       	brne	.-6      	; 0x1d02 <fat_open+0x4e6>
    1d08:	71 82       	std	Z+1, r7	; 0x01
    1d0a:	60 82       	st	Z, r6
    1d0c:	f3 01       	movw	r30, r6
    1d0e:	81 84       	ldd	r8, Z+9	; 0x09
    1d10:	92 84       	ldd	r9, Z+10	; 0x0a
    1d12:	a3 84       	ldd	r10, Z+11	; 0x0b
    1d14:	b4 84       	ldd	r11, Z+12	; 0x0c
    1d16:	28 2d       	mov	r18, r8
    1d18:	39 2d       	mov	r19, r9
    1d1a:	4a 2d       	mov	r20, r10
    1d1c:	5b 2d       	mov	r21, r11
    1d1e:	60 e0       	ldi	r22, 0x00	; 0
    1d20:	70 e0       	ldi	r23, 0x00	; 0
    1d22:	80 e0       	ldi	r24, 0x00	; 0
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	09 e0       	ldi	r16, 0x09	; 9
    1d28:	0e 94 2f 27 	call	0x4e5e	; 0x4e5e <__ashldi3>
    1d2c:	22 2e       	mov	r2, r18
    1d2e:	33 2e       	mov	r3, r19
    1d30:	44 2e       	mov	r4, r20
    1d32:	55 2e       	mov	r5, r21
    1d34:	6e a3       	std	Y+38, r22	; 0x26
    1d36:	7e a7       	std	Y+46, r23	; 0x2e
    1d38:	88 2e       	mov	r8, r24
    1d3a:	99 2e       	mov	r9, r25
    1d3c:	ab e0       	ldi	r26, 0x0B	; 11
    1d3e:	0e 94 6f 27 	call	0x4ede	; 0x4ede <__adddi3_s8>
    1d42:	01 90       	ld	r0, Z+
    1d44:	f0 81       	ld	r31, Z
    1d46:	e0 2d       	mov	r30, r0
    1d48:	0f 2e       	mov	r0, r31
    1d4a:	f5 e2       	ldi	r31, 0x25	; 37
    1d4c:	ef 2e       	mov	r14, r31
    1d4e:	f1 2c       	mov	r15, r1
    1d50:	f0 2d       	mov	r31, r0
    1d52:	8e 01       	movw	r16, r28
    1d54:	0f 5f       	subi	r16, 0xFF	; 255
    1d56:	1f 4f       	sbci	r17, 0xFF	; 255
    1d58:	09 95       	icall
    1d5a:	81 11       	cpse	r24, r1
    1d5c:	96 cd       	rjmp	.-1236   	; 0x188a <fat_open+0x6e>
    1d5e:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <fat_fs_handles+0x1>
    1d62:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <fat_fs_handles>
    1d66:	80 e0       	ldi	r24, 0x00	; 0
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	02 c0       	rjmp	.+4      	; 0x1d70 <fat_open+0x554>
    1d6c:	8d e6       	ldi	r24, 0x6D	; 109
    1d6e:	92 e0       	ldi	r25, 0x02	; 2
    1d70:	cb 5a       	subi	r28, 0xAB	; 171
    1d72:	df 4f       	sbci	r29, 0xFF	; 255
    1d74:	0f b6       	in	r0, 0x3f	; 63
    1d76:	f8 94       	cli
    1d78:	de bf       	out	0x3e, r29	; 62
    1d7a:	0f be       	out	0x3f, r0	; 63
    1d7c:	cd bf       	out	0x3d, r28	; 61
    1d7e:	df 91       	pop	r29
    1d80:	cf 91       	pop	r28
    1d82:	1f 91       	pop	r17
    1d84:	0f 91       	pop	r16
    1d86:	ff 90       	pop	r15
    1d88:	ef 90       	pop	r14
    1d8a:	df 90       	pop	r13
    1d8c:	cf 90       	pop	r12
    1d8e:	bf 90       	pop	r11
    1d90:	af 90       	pop	r10
    1d92:	9f 90       	pop	r9
    1d94:	8f 90       	pop	r8
    1d96:	7f 90       	pop	r7
    1d98:	6f 90       	pop	r6
    1d9a:	5f 90       	pop	r5
    1d9c:	4f 90       	pop	r4
    1d9e:	3f 90       	pop	r3
    1da0:	2f 90       	pop	r2
    1da2:	08 95       	ret

00001da4 <fat_open_file>:
    1da4:	cf 93       	push	r28
    1da6:	df 93       	push	r29
    1da8:	00 97       	sbiw	r24, 0x00	; 0
    1daa:	81 f0       	breq	.+32     	; 0x1dcc <fat_open_file+0x28>
    1dac:	61 15       	cp	r22, r1
    1dae:	71 05       	cpc	r23, r1
    1db0:	81 f0       	breq	.+32     	; 0x1dd2 <fat_open_file+0x2e>
    1db2:	eb 01       	movw	r28, r22
    1db4:	28 a1       	ldd	r18, Y+32	; 0x20
    1db6:	24 fd       	sbrc	r18, 4
    1db8:	0f c0       	rjmp	.+30     	; 0x1dd8 <fat_open_file+0x34>
    1dba:	20 91 2e 02 	lds	r18, 0x022E	; 0x80022e <fat_file_handles>
    1dbe:	30 91 2f 02 	lds	r19, 0x022F	; 0x80022f <fat_file_handles+0x1>
    1dc2:	23 2b       	or	r18, r19
    1dc4:	61 f0       	breq	.+24     	; 0x1dde <fat_open_file+0x3a>
    1dc6:	80 e0       	ldi	r24, 0x00	; 0
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	27 c0       	rjmp	.+78     	; 0x1e1a <fat_open_file+0x76>
    1dcc:	80 e0       	ldi	r24, 0x00	; 0
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	24 c0       	rjmp	.+72     	; 0x1e1a <fat_open_file+0x76>
    1dd2:	80 e0       	ldi	r24, 0x00	; 0
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	21 c0       	rjmp	.+66     	; 0x1e1a <fat_open_file+0x76>
    1dd8:	80 e0       	ldi	r24, 0x00	; 0
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	1e c0       	rjmp	.+60     	; 0x1e1a <fat_open_file+0x76>
    1dde:	21 e3       	ldi	r18, 0x31	; 49
    1de0:	fb 01       	movw	r30, r22
    1de2:	a0 e3       	ldi	r26, 0x30	; 48
    1de4:	b2 e0       	ldi	r27, 0x02	; 2
    1de6:	01 90       	ld	r0, Z+
    1de8:	0d 92       	st	X+, r0
    1dea:	2a 95       	dec	r18
    1dec:	e1 f7       	brne	.-8      	; 0x1de6 <fat_open_file+0x42>
    1dee:	ee e2       	ldi	r30, 0x2E	; 46
    1df0:	f2 e0       	ldi	r31, 0x02	; 2
    1df2:	91 83       	std	Z+1, r25	; 0x01
    1df4:	80 83       	st	Z, r24
    1df6:	13 aa       	std	Z+51, r1	; 0x33
    1df8:	14 aa       	std	Z+52, r1	; 0x34
    1dfa:	15 aa       	std	Z+53, r1	; 0x35
    1dfc:	16 aa       	std	Z+54, r1	; 0x36
    1dfe:	17 aa       	std	Z+55, r1	; 0x37
    1e00:	10 ae       	std	Z+56, r1	; 0x38
    1e02:	11 ae       	std	Z+57, r1	; 0x39
    1e04:	12 ae       	std	Z+58, r1	; 0x3a
    1e06:	eb 01       	movw	r28, r22
    1e08:	89 a1       	ldd	r24, Y+33	; 0x21
    1e0a:	9a a1       	ldd	r25, Y+34	; 0x22
    1e0c:	ab a1       	ldd	r26, Y+35	; 0x23
    1e0e:	bc a1       	ldd	r27, Y+36	; 0x24
    1e10:	83 af       	std	Z+59, r24	; 0x3b
    1e12:	94 af       	std	Z+60, r25	; 0x3c
    1e14:	a5 af       	std	Z+61, r26	; 0x3d
    1e16:	b6 af       	std	Z+62, r27	; 0x3e
    1e18:	cf 01       	movw	r24, r30
    1e1a:	df 91       	pop	r29
    1e1c:	cf 91       	pop	r28
    1e1e:	08 95       	ret

00001e20 <fat_close_file>:
    1e20:	00 97       	sbiw	r24, 0x00	; 0
    1e22:	19 f0       	breq	.+6      	; 0x1e2a <fat_close_file+0xa>
    1e24:	fc 01       	movw	r30, r24
    1e26:	11 82       	std	Z+1, r1	; 0x01
    1e28:	10 82       	st	Z, r1
    1e2a:	08 95       	ret

00001e2c <fat_write_file>:
 * \param[in] buffer_len The amount of data to write.
 * \returns The number of bytes written (0 or something less than \c buffer_len on disk full) or -1 on failure.
 * \see fat_read_file
 */
intptr_t fat_write_file(struct fat_file_struct* fd, const uint8_t* buffer, uintptr_t buffer_len)
{
    1e2c:	2f 92       	push	r2
    1e2e:	3f 92       	push	r3
    1e30:	4f 92       	push	r4
    1e32:	5f 92       	push	r5
    1e34:	6f 92       	push	r6
    1e36:	7f 92       	push	r7
    1e38:	8f 92       	push	r8
    1e3a:	9f 92       	push	r9
    1e3c:	af 92       	push	r10
    1e3e:	bf 92       	push	r11
    1e40:	cf 92       	push	r12
    1e42:	df 92       	push	r13
    1e44:	ef 92       	push	r14
    1e46:	ff 92       	push	r15
    1e48:	0f 93       	push	r16
    1e4a:	1f 93       	push	r17
    1e4c:	cf 93       	push	r28
    1e4e:	df 93       	push	r29
    1e50:	cd b7       	in	r28, 0x3d	; 61
    1e52:	de b7       	in	r29, 0x3e	; 62
    1e54:	66 97       	sbiw	r28, 0x16	; 22
    1e56:	0f b6       	in	r0, 0x3f	; 63
    1e58:	f8 94       	cli
    1e5a:	de bf       	out	0x3e, r29	; 62
    1e5c:	0f be       	out	0x3f, r0	; 63
    1e5e:	cd bf       	out	0x3d, r28	; 61
    1e60:	9e 8b       	std	Y+22, r25	; 0x16
    1e62:	8d 8b       	std	Y+21, r24	; 0x15
    1e64:	78 8b       	std	Y+16, r23	; 0x10
    1e66:	6f 87       	std	Y+15, r22	; 0x0f
    1e68:	5c 8b       	std	Y+20, r21	; 0x14
    1e6a:	4b 8b       	std	Y+19, r20	; 0x13
    /* check arguments */
    if(!fd || !buffer || buffer_len < 1)
    1e6c:	00 97       	sbiw	r24, 0x00	; 0
    1e6e:	09 f4       	brne	.+2      	; 0x1e72 <fat_write_file+0x46>
    1e70:	63 c2       	rjmp	.+1222   	; 0x2338 <fat_write_file+0x50c>
    1e72:	67 2b       	or	r22, r23
    1e74:	09 f4       	brne	.+2      	; 0x1e78 <fat_write_file+0x4c>
    1e76:	63 c2       	rjmp	.+1222   	; 0x233e <fat_write_file+0x512>
    1e78:	45 2b       	or	r20, r21
    1e7a:	09 f4       	brne	.+2      	; 0x1e7e <fat_write_file+0x52>
    1e7c:	63 c2       	rjmp	.+1222   	; 0x2344 <fat_write_file+0x518>
        return -1;
    if(fd->pos > fd->dir_entry.file_size)
    1e7e:	dc 01       	movw	r26, r24
    1e80:	d3 96       	adiw	r26, 0x33	; 51
    1e82:	bc 91       	ld	r27, X
    1e84:	b9 83       	std	Y+1, r27	; 0x01
    1e86:	fc 01       	movw	r30, r24
    1e88:	f4 a9       	ldd	r31, Z+52	; 0x34
    1e8a:	fa 83       	std	Y+2, r31	; 0x02
    1e8c:	dc 01       	movw	r26, r24
    1e8e:	d5 96       	adiw	r26, 0x35	; 53
    1e90:	bc 91       	ld	r27, X
    1e92:	bb 83       	std	Y+3, r27	; 0x03
    1e94:	fc 01       	movw	r30, r24
    1e96:	f6 a9       	ldd	r31, Z+54	; 0x36
    1e98:	fc 83       	std	Y+4, r31	; 0x04
    1e9a:	dc 01       	movw	r26, r24
    1e9c:	d7 96       	adiw	r26, 0x37	; 55
    1e9e:	bc 91       	ld	r27, X
    1ea0:	bd 83       	std	Y+5, r27	; 0x05
    1ea2:	fc 01       	movw	r30, r24
    1ea4:	f0 ad       	ldd	r31, Z+56	; 0x38
    1ea6:	fe 83       	std	Y+6, r31	; 0x06
    1ea8:	dc 01       	movw	r26, r24
    1eaa:	d9 96       	adiw	r26, 0x39	; 57
    1eac:	bc 91       	ld	r27, X
    1eae:	bf 83       	std	Y+7, r27	; 0x07
    1eb0:	fc 01       	movw	r30, r24
    1eb2:	f2 ad       	ldd	r31, Z+58	; 0x3a
    1eb4:	f8 87       	std	Y+8, r31	; 0x08
    1eb6:	fc 01       	movw	r30, r24
    1eb8:	87 a1       	ldd	r24, Z+39	; 0x27
    1eba:	90 a5       	ldd	r25, Z+40	; 0x28
    1ebc:	a1 a5       	ldd	r26, Z+41	; 0x29
    1ebe:	b2 a5       	ldd	r27, Z+42	; 0x2a
    1ec0:	1c 01       	movw	r2, r24
    1ec2:	2d 01       	movw	r4, r26
    1ec4:	29 81       	ldd	r18, Y+1	; 0x01
    1ec6:	3a 81       	ldd	r19, Y+2	; 0x02
    1ec8:	4b 81       	ldd	r20, Y+3	; 0x03
    1eca:	5c 81       	ldd	r21, Y+4	; 0x04
    1ecc:	6d 81       	ldd	r22, Y+5	; 0x05
    1ece:	7e 81       	ldd	r23, Y+6	; 0x06
    1ed0:	8f 81       	ldd	r24, Y+7	; 0x07
    1ed2:	98 85       	ldd	r25, Y+8	; 0x08
    1ed4:	a2 2c       	mov	r10, r2
    1ed6:	b3 2c       	mov	r11, r3
    1ed8:	c4 2c       	mov	r12, r4
    1eda:	d5 2c       	mov	r13, r5
    1edc:	e1 2c       	mov	r14, r1
    1ede:	f1 2c       	mov	r15, r1
    1ee0:	00 e0       	ldi	r16, 0x00	; 0
    1ee2:	10 e0       	ldi	r17, 0x00	; 0
    1ee4:	0e 94 84 27 	call	0x4f08	; 0x4f08 <__cmpdi2>
    1ee8:	11 f0       	breq	.+4      	; 0x1eee <fat_write_file+0xc2>
    1eea:	08 f0       	brcs	.+2      	; 0x1eee <fat_write_file+0xc2>
    1eec:	2e c2       	rjmp	.+1116   	; 0x234a <fat_write_file+0x51e>
        return -1;

    uint16_t cluster_size = fd->fs->header.cluster_size;
    1eee:	01 90       	ld	r0, Z+
    1ef0:	f0 81       	ld	r31, Z
    1ef2:	e0 2d       	mov	r30, r0
    1ef4:	e0 8c       	ldd	r14, Z+24	; 0x18
    1ef6:	f1 8c       	ldd	r15, Z+25	; 0x19
    1ef8:	fa 8a       	std	Y+18, r15	; 0x12
    1efa:	e9 8a       	std	Y+17, r14	; 0x11
    cluster_t cluster_num = fd->pos_cluster;
    1efc:	ad 89       	ldd	r26, Y+21	; 0x15
    1efe:	be 89       	ldd	r27, Y+22	; 0x16
    1f00:	db 96       	adiw	r26, 0x3b	; 59
    1f02:	0d 91       	ld	r16, X+
    1f04:	1d 91       	ld	r17, X+
    1f06:	2d 91       	ld	r18, X+
    1f08:	3c 91       	ld	r19, X
    1f0a:	de 97       	sbiw	r26, 0x3e	; 62
    1f0c:	0b 87       	std	Y+11, r16	; 0x0b
    1f0e:	1c 87       	std	Y+12, r17	; 0x0c
    1f10:	2d 87       	std	Y+13, r18	; 0x0d
    1f12:	3e 87       	std	Y+14, r19	; 0x0e
    uintptr_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));
    1f14:	c7 01       	movw	r24, r14
    1f16:	01 97       	sbiw	r24, 0x01	; 1
    1f18:	e9 80       	ldd	r14, Y+1	; 0x01
    1f1a:	fa 80       	ldd	r15, Y+2	; 0x02
    1f1c:	e8 22       	and	r14, r24
    1f1e:	f9 22       	and	r15, r25
    1f20:	fa 86       	std	Y+10, r15	; 0x0a
    1f22:	e9 86       	std	Y+9, r14	; 0x09
	
	
    /* find cluster in which to start writing */
    if(!cluster_num)
    1f24:	01 2b       	or	r16, r17
    1f26:	02 2b       	or	r16, r18
    1f28:	03 2b       	or	r16, r19
    1f2a:	09 f0       	breq	.+2      	; 0x1f2e <fat_write_file+0x102>
    1f2c:	89 c0       	rjmp	.+274    	; 0x2040 <fat_write_file+0x214>
	{
        cluster_num = fd->dir_entry.cluster;
    1f2e:	93 96       	adiw	r26, 0x23	; 35
    1f30:	0d 91       	ld	r16, X+
    1f32:	1d 91       	ld	r17, X+
    1f34:	2d 91       	ld	r18, X+
    1f36:	3c 91       	ld	r19, X
    1f38:	96 97       	sbiw	r26, 0x26	; 38
    1f3a:	0b 87       	std	Y+11, r16	; 0x0b
    1f3c:	1c 87       	std	Y+12, r17	; 0x0c
    1f3e:	2d 87       	std	Y+13, r18	; 0x0d
    1f40:	3e 87       	std	Y+14, r19	; 0x0e
        
        if(!cluster_num)
    1f42:	01 2b       	or	r16, r17
    1f44:	02 2b       	or	r16, r18
    1f46:	03 2b       	or	r16, r19
    1f48:	11 f5       	brne	.+68     	; 0x1f8e <fat_write_file+0x162>
        {
            if(!fd->pos)
    1f4a:	29 81       	ldd	r18, Y+1	; 0x01
    1f4c:	3a 81       	ldd	r19, Y+2	; 0x02
    1f4e:	8f 81       	ldd	r24, Y+7	; 0x07
    1f50:	98 85       	ldd	r25, Y+8	; 0x08
    1f52:	a0 e0       	ldi	r26, 0x00	; 0
    1f54:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <__cmpdi2_s8>
    1f58:	09 f0       	breq	.+2      	; 0x1f5c <fat_write_file+0x130>
    1f5a:	fa c1       	rjmp	.+1012   	; 0x2350 <fat_write_file+0x524>
            { 
				
                /* empty file */
                fd->dir_entry.cluster = cluster_num = fat_append_clusters(fd->fs, 0, 1);
    1f5c:	01 e0       	ldi	r16, 0x01	; 1
    1f5e:	10 e0       	ldi	r17, 0x00	; 0
    1f60:	20 e0       	ldi	r18, 0x00	; 0
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	40 e0       	ldi	r20, 0x00	; 0
    1f66:	50 e0       	ldi	r21, 0x00	; 0
    1f68:	ba 01       	movw	r22, r20
    1f6a:	cf 01       	movw	r24, r30
    1f6c:	0e 94 a2 03 	call	0x744	; 0x744 <fat_append_clusters>
    1f70:	6b 87       	std	Y+11, r22	; 0x0b
    1f72:	7c 87       	std	Y+12, r23	; 0x0c
    1f74:	8d 87       	std	Y+13, r24	; 0x0d
    1f76:	9e 87       	std	Y+14, r25	; 0x0e
    1f78:	ed 89       	ldd	r30, Y+21	; 0x15
    1f7a:	fe 89       	ldd	r31, Y+22	; 0x16
    1f7c:	63 a3       	std	Z+35, r22	; 0x23
    1f7e:	74 a3       	std	Z+36, r23	; 0x24
    1f80:	85 a3       	std	Z+37, r24	; 0x25
    1f82:	96 a3       	std	Z+38, r25	; 0x26
                if(!cluster_num)
    1f84:	67 2b       	or	r22, r23
    1f86:	68 2b       	or	r22, r24
    1f88:	69 2b       	or	r22, r25
    1f8a:	09 f4       	brne	.+2      	; 0x1f8e <fat_write_file+0x162>
    1f8c:	e4 c1       	rjmp	.+968    	; 0x2356 <fat_write_file+0x52a>
            {
                return -1;
            }
        }

        if(fd->pos)
    1f8e:	ad 89       	ldd	r26, Y+21	; 0x15
    1f90:	be 89       	ldd	r27, Y+22	; 0x16
    1f92:	d3 96       	adiw	r26, 0x33	; 51
    1f94:	1c 91       	ld	r17, X
    1f96:	d3 97       	sbiw	r26, 0x33	; 51
    1f98:	d4 96       	adiw	r26, 0x34	; 52
    1f9a:	bc 91       	ld	r27, X
    1f9c:	ed 89       	ldd	r30, Y+21	; 0x15
    1f9e:	fe 89       	ldd	r31, Y+22	; 0x16
    1fa0:	05 a9       	ldd	r16, Z+53	; 0x35
    1fa2:	f6 a8       	ldd	r15, Z+54	; 0x36
    1fa4:	67 a9       	ldd	r22, Z+55	; 0x37
    1fa6:	70 ad       	ldd	r23, Z+56	; 0x38
    1fa8:	21 2f       	mov	r18, r17
    1faa:	3b 2f       	mov	r19, r27
    1fac:	40 2f       	mov	r20, r16
    1fae:	5f 2d       	mov	r21, r15
    1fb0:	81 ad       	ldd	r24, Z+57	; 0x39
    1fb2:	92 ad       	ldd	r25, Z+58	; 0x3a
    1fb4:	a0 e0       	ldi	r26, 0x00	; 0
    1fb6:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <__cmpdi2_s8>
    1fba:	09 f4       	brne	.+2      	; 0x1fbe <fat_write_file+0x192>
    1fbc:	41 c0       	rjmp	.+130    	; 0x2040 <fat_write_file+0x214>
        {
			
            uint32_t pos = fd->pos;
    1fbe:	c1 2e       	mov	r12, r17
    1fc0:	db 2e       	mov	r13, r27
    1fc2:	e0 2e       	mov	r14, r16
			cluster_t cluster_num_next;
            while(pos >= cluster_size)
    1fc4:	09 89       	ldd	r16, Y+17	; 0x11
    1fc6:	1a 89       	ldd	r17, Y+18	; 0x12
    1fc8:	28 01       	movw	r4, r16
    1fca:	61 2c       	mov	r6, r1
    1fcc:	71 2c       	mov	r7, r1
    1fce:	8b 84       	ldd	r8, Y+11	; 0x0b
    1fd0:	9c 84       	ldd	r9, Y+12	; 0x0c
    1fd2:	ad 84       	ldd	r10, Y+13	; 0x0d
    1fd4:	be 84       	ldd	r11, Y+14	; 0x0e
    1fd6:	2b c0       	rjmp	.+86     	; 0x202e <fat_write_file+0x202>
    1fd8:	c4 18       	sub	r12, r4
    1fda:	d5 08       	sbc	r13, r5
    1fdc:	e6 08       	sbc	r14, r6
    1fde:	f7 08       	sbc	r15, r7
            {
                pos -= cluster_size;
                cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
    1fe0:	b5 01       	movw	r22, r10
    1fe2:	a4 01       	movw	r20, r8
    1fe4:	ad 89       	ldd	r26, Y+21	; 0x15
    1fe6:	be 89       	ldd	r27, Y+22	; 0x16
    1fe8:	8d 91       	ld	r24, X+
    1fea:	9c 91       	ld	r25, X
    1fec:	0e 94 28 01 	call	0x250	; 0x250 <fat_get_next_cluster>
                if(!cluster_num_next)
    1ff0:	61 15       	cp	r22, r1
    1ff2:	71 05       	cpc	r23, r1
    1ff4:	81 05       	cpc	r24, r1
    1ff6:	91 05       	cpc	r25, r1
    1ff8:	c1 f4       	brne	.+48     	; 0x202a <fat_write_file+0x1fe>
                {
                    if(pos != 0)
    1ffa:	c1 14       	cp	r12, r1
    1ffc:	d1 04       	cpc	r13, r1
    1ffe:	e1 04       	cpc	r14, r1
    2000:	f1 04       	cpc	r15, r1
    2002:	09 f0       	breq	.+2      	; 0x2006 <fat_write_file+0x1da>
    2004:	ab c1       	rjmp	.+854    	; 0x235c <fat_write_file+0x530>
                        return -1; /* current file position points beyond end of file */

                    /* the file exactly ends on a cluster boundary, and we append to it */
                    cluster_num_next = fat_append_clusters(fd->fs, cluster_num, 1);
    2006:	01 e0       	ldi	r16, 0x01	; 1
    2008:	10 e0       	ldi	r17, 0x00	; 0
    200a:	20 e0       	ldi	r18, 0x00	; 0
    200c:	30 e0       	ldi	r19, 0x00	; 0
    200e:	b5 01       	movw	r22, r10
    2010:	a4 01       	movw	r20, r8
    2012:	ed 89       	ldd	r30, Y+21	; 0x15
    2014:	fe 89       	ldd	r31, Y+22	; 0x16
    2016:	80 81       	ld	r24, Z
    2018:	91 81       	ldd	r25, Z+1	; 0x01
    201a:	0e 94 a2 03 	call	0x744	; 0x744 <fat_append_clusters>
                    if(!cluster_num_next)
    201e:	61 15       	cp	r22, r1
    2020:	71 05       	cpc	r23, r1
    2022:	81 05       	cpc	r24, r1
    2024:	91 05       	cpc	r25, r1
    2026:	09 f4       	brne	.+2      	; 0x202a <fat_write_file+0x1fe>
    2028:	9c c1       	rjmp	.+824    	; 0x2362 <fat_write_file+0x536>
 * \param[in] buffer_len The amount of data to write.
 * \returns The number of bytes written (0 or something less than \c buffer_len on disk full) or -1 on failure.
 * \see fat_read_file
 */
intptr_t fat_write_file(struct fat_file_struct* fd, const uint8_t* buffer, uintptr_t buffer_len)
{
    202a:	4b 01       	movw	r8, r22
    202c:	5c 01       	movw	r10, r24
        if(fd->pos)
        {
			
            uint32_t pos = fd->pos;
			cluster_t cluster_num_next;
            while(pos >= cluster_size)
    202e:	c4 14       	cp	r12, r4
    2030:	d5 04       	cpc	r13, r5
    2032:	e6 04       	cpc	r14, r6
    2034:	f7 04       	cpc	r15, r7
    2036:	80 f6       	brcc	.-96     	; 0x1fd8 <fat_write_file+0x1ac>
    2038:	8b 86       	std	Y+11, r8	; 0x0b
    203a:	9c 86       	std	Y+12, r9	; 0x0c
    203c:	ad 86       	std	Y+13, r10	; 0x0d
    203e:	be 86       	std	Y+14, r11	; 0x0e
                fd->pos_cluster = 0;
                break;
            }

            cluster_num = cluster_num_next;
            first_cluster_offset = 0;
    2040:	2b 88       	ldd	r2, Y+19	; 0x13
    2042:	3c 88       	ldd	r3, Y+20	; 0x14
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
        return 0;
    2044:	91 2c       	mov	r9, r1
                fd->pos_cluster = 0;
                break;
            }

            cluster_num = cluster_num_next;
            first_cluster_offset = 0;
    2046:	81 2c       	mov	r8, r1
    
    /* write data */
    do
    {
        /* calculate data size to write to cluster */
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
    2048:	ad 89       	ldd	r26, Y+21	; 0x15
    204a:	be 89       	ldd	r27, Y+22	; 0x16
    204c:	6d 90       	ld	r6, X+
    204e:	7c 90       	ld	r7, X
 * \param[in] cluster_num The cluster whose offset to calculate.
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
    2050:	61 14       	cp	r6, r1
    2052:	71 04       	cpc	r7, r1
    2054:	09 f4       	brne	.+2      	; 0x2058 <fat_write_file+0x22c>
    2056:	47 c0       	rjmp	.+142    	; 0x20e6 <fat_write_file+0x2ba>
    2058:	0b 85       	ldd	r16, Y+11	; 0x0b
    205a:	1c 85       	ldd	r17, Y+12	; 0x0c
    205c:	2d 85       	ldd	r18, Y+13	; 0x0d
    205e:	3e 85       	ldd	r19, Y+14	; 0x0e
    2060:	02 30       	cpi	r16, 0x02	; 2
    2062:	11 05       	cpc	r17, r1
    2064:	21 05       	cpc	r18, r1
    2066:	31 05       	cpc	r19, r1
    2068:	08 f4       	brcc	.+2      	; 0x206c <fat_write_file+0x240>
    206a:	46 c0       	rjmp	.+140    	; 0x20f8 <fat_write_file+0x2cc>
        return 0;

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
    206c:	d9 01       	movw	r26, r18
    206e:	c8 01       	movw	r24, r16
    2070:	02 97       	sbiw	r24, 0x02	; 2
    2072:	a1 09       	sbc	r26, r1
    2074:	b1 09       	sbc	r27, r1
    2076:	7c 01       	movw	r14, r24
    2078:	8d 01       	movw	r16, r26
    207a:	20 e0       	ldi	r18, 0x00	; 0
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	a9 01       	movw	r20, r18
    2080:	89 83       	std	Y+1, r24	; 0x01
    2082:	fa 82       	std	Y+2, r15	; 0x02
    2084:	0b 83       	std	Y+3, r16	; 0x03
    2086:	1c 83       	std	Y+4, r17	; 0x04
    2088:	2d 83       	std	Y+5, r18	; 0x05
    208a:	3e 83       	std	Y+6, r19	; 0x06
    208c:	4f 83       	std	Y+7, r20	; 0x07
    208e:	58 87       	std	Y+8, r21	; 0x08
    2090:	d3 01       	movw	r26, r6
    2092:	58 96       	adiw	r26, 0x18	; 24
    2094:	0d 91       	ld	r16, X+
    2096:	1c 91       	ld	r17, X
    2098:	59 97       	sbiw	r26, 0x19	; 25
    209a:	a0 2e       	mov	r10, r16
    209c:	b1 2e       	mov	r11, r17
    209e:	c9 2c       	mov	r12, r9
    20a0:	d9 2c       	mov	r13, r9
    20a2:	e9 2c       	mov	r14, r9
    20a4:	f9 2c       	mov	r15, r9
    20a6:	09 2d       	mov	r16, r9
    20a8:	19 2d       	mov	r17, r9
    20aa:	29 81       	ldd	r18, Y+1	; 0x01
    20ac:	3a 81       	ldd	r19, Y+2	; 0x02
    20ae:	4b 81       	ldd	r20, Y+3	; 0x03
    20b0:	5c 81       	ldd	r21, Y+4	; 0x04
    20b2:	69 2d       	mov	r22, r9
    20b4:	79 2d       	mov	r23, r9
    20b6:	89 2d       	mov	r24, r9
    20b8:	99 2d       	mov	r25, r9
    20ba:	0e 94 d6 26 	call	0x4dac	; 0x4dac <__muldi3>
    20be:	f3 01       	movw	r30, r6
    20c0:	a2 8c       	ldd	r10, Z+26	; 0x1a
    20c2:	b3 8c       	ldd	r11, Z+27	; 0x1b
    20c4:	c4 8c       	ldd	r12, Z+28	; 0x1c
    20c6:	d5 8c       	ldd	r13, Z+29	; 0x1d
    20c8:	e6 8c       	ldd	r14, Z+30	; 0x1e
    20ca:	f7 8c       	ldd	r15, Z+31	; 0x1f
    20cc:	00 a1       	ldd	r16, Z+32	; 0x20
    20ce:	11 a1       	ldd	r17, Z+33	; 0x21
    20d0:	0e 94 66 27 	call	0x4ecc	; 0x4ecc <__adddi3>
    20d4:	a2 2e       	mov	r10, r18
    20d6:	b3 2e       	mov	r11, r19
    20d8:	c4 2e       	mov	r12, r20
    20da:	d5 2e       	mov	r13, r21
    20dc:	e6 2e       	mov	r14, r22
    20de:	f7 2e       	mov	r15, r23
    20e0:	08 2f       	mov	r16, r24
    20e2:	19 2f       	mov	r17, r25
    20e4:	11 c0       	rjmp	.+34     	; 0x2108 <fat_write_file+0x2dc>
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
        return 0;
    20e6:	a9 2c       	mov	r10, r9
    20e8:	b9 2c       	mov	r11, r9
    20ea:	c9 2c       	mov	r12, r9
    20ec:	d9 2c       	mov	r13, r9
    20ee:	e9 2c       	mov	r14, r9
    20f0:	f9 2c       	mov	r15, r9
    20f2:	09 2d       	mov	r16, r9
    20f4:	19 2d       	mov	r17, r9
    20f6:	08 c0       	rjmp	.+16     	; 0x2108 <fat_write_file+0x2dc>
    20f8:	a9 2c       	mov	r10, r9
    20fa:	b9 2c       	mov	r11, r9
    20fc:	c9 2c       	mov	r12, r9
    20fe:	d9 2c       	mov	r13, r9
    2100:	e9 2c       	mov	r14, r9
    2102:	f9 2c       	mov	r15, r9
    2104:	09 2d       	mov	r16, r9
    2106:	19 2d       	mov	r17, r9
    /* write data */
    do
    {
        /* calculate data size to write to cluster */
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
        uint16_t write_length = cluster_size - first_cluster_offset;
    2108:	89 89       	ldd	r24, Y+17	; 0x11
    210a:	9a 89       	ldd	r25, Y+18	; 0x12
    210c:	29 85       	ldd	r18, Y+9	; 0x09
    210e:	3a 85       	ldd	r19, Y+10	; 0x0a
    2110:	82 1b       	sub	r24, r18
    2112:	93 0b       	sbc	r25, r19
    2114:	21 01       	movw	r4, r2
    2116:	82 15       	cp	r24, r2
    2118:	93 05       	cpc	r25, r3
    211a:	08 f4       	brcc	.+2      	; 0x211e <fat_write_file+0x2f2>
    211c:	2c 01       	movw	r4, r24
        if(write_length > buffer_left)
            write_length = buffer_left;

        /* write data which fits into the current cluster */
        if(!fd->fs->partition->device_write(cluster_offset, buffer, write_length))
    211e:	e9 85       	ldd	r30, Y+9	; 0x09
    2120:	fa 85       	ldd	r31, Y+10	; 0x0a
    2122:	af 01       	movw	r20, r30
    2124:	2e 2f       	mov	r18, r30
    2126:	35 2f       	mov	r19, r21
    2128:	49 2d       	mov	r20, r9
    212a:	59 2d       	mov	r21, r9
    212c:	69 2d       	mov	r22, r9
    212e:	79 2d       	mov	r23, r9
    2130:	89 2d       	mov	r24, r9
    2132:	99 2d       	mov	r25, r9
    2134:	0e 94 66 27 	call	0x4ecc	; 0x4ecc <__adddi3>
    2138:	d3 01       	movw	r26, r6
    213a:	ed 91       	ld	r30, X+
    213c:	fc 91       	ld	r31, X
    213e:	04 80       	ldd	r0, Z+4	; 0x04
    2140:	f5 81       	ldd	r31, Z+5	; 0x05
    2142:	e0 2d       	mov	r30, r0
    2144:	72 01       	movw	r14, r4
    2146:	0f 85       	ldd	r16, Y+15	; 0x0f
    2148:	18 89       	ldd	r17, Y+16	; 0x10
    214a:	09 95       	icall
    214c:	88 23       	and	r24, r24
    214e:	09 f4       	brne	.+2      	; 0x2152 <fat_write_file+0x326>
    2150:	93 c0       	rjmp	.+294    	; 0x2278 <fat_write_file+0x44c>
            break;

        /* calculate new file position */
        buffer += write_length;
    2152:	ef 85       	ldd	r30, Y+15	; 0x0f
    2154:	f8 89       	ldd	r31, Y+16	; 0x10
    2156:	e4 0d       	add	r30, r4
    2158:	f5 1d       	adc	r31, r5
    215a:	f8 8b       	std	Y+16, r31	; 0x10
    215c:	ef 87       	std	Y+15, r30	; 0x0f
        buffer_left -= write_length;
    215e:	24 18       	sub	r2, r4
    2160:	35 08       	sbc	r3, r5
        fd->pos += write_length;
    2162:	a2 01       	movw	r20, r4
    2164:	24 2d       	mov	r18, r4
    2166:	35 2f       	mov	r19, r21
    2168:	49 2d       	mov	r20, r9
    216a:	59 2d       	mov	r21, r9
    216c:	69 2d       	mov	r22, r9
    216e:	79 2d       	mov	r23, r9
    2170:	89 2d       	mov	r24, r9
    2172:	99 2d       	mov	r25, r9
    2174:	ad 89       	ldd	r26, Y+21	; 0x15
    2176:	be 89       	ldd	r27, Y+22	; 0x16
    2178:	d3 96       	adiw	r26, 0x33	; 51
    217a:	ac 90       	ld	r10, X
    217c:	d3 97       	sbiw	r26, 0x33	; 51
    217e:	d4 96       	adiw	r26, 0x34	; 52
    2180:	bc 90       	ld	r11, X
    2182:	d4 97       	sbiw	r26, 0x34	; 52
    2184:	d5 96       	adiw	r26, 0x35	; 53
    2186:	cc 90       	ld	r12, X
    2188:	d5 97       	sbiw	r26, 0x35	; 53
    218a:	d6 96       	adiw	r26, 0x36	; 54
    218c:	dc 90       	ld	r13, X
    218e:	d6 97       	sbiw	r26, 0x36	; 54
    2190:	d7 96       	adiw	r26, 0x37	; 55
    2192:	ec 90       	ld	r14, X
    2194:	d7 97       	sbiw	r26, 0x37	; 55
    2196:	d8 96       	adiw	r26, 0x38	; 56
    2198:	fc 90       	ld	r15, X
    219a:	d8 97       	sbiw	r26, 0x38	; 56
    219c:	d9 96       	adiw	r26, 0x39	; 57
    219e:	0c 91       	ld	r16, X
    21a0:	d9 97       	sbiw	r26, 0x39	; 57
    21a2:	da 96       	adiw	r26, 0x3a	; 58
    21a4:	1c 91       	ld	r17, X
    21a6:	da 97       	sbiw	r26, 0x3a	; 58
    21a8:	0e 94 66 27 	call	0x4ecc	; 0x4ecc <__adddi3>
    21ac:	d3 96       	adiw	r26, 0x33	; 51
    21ae:	2c 93       	st	X, r18
    21b0:	d3 97       	sbiw	r26, 0x33	; 51
    21b2:	d4 96       	adiw	r26, 0x34	; 52
    21b4:	3c 93       	st	X, r19
    21b6:	d4 97       	sbiw	r26, 0x34	; 52
    21b8:	d5 96       	adiw	r26, 0x35	; 53
    21ba:	4c 93       	st	X, r20
    21bc:	d5 97       	sbiw	r26, 0x35	; 53
    21be:	d6 96       	adiw	r26, 0x36	; 54
    21c0:	5c 93       	st	X, r21
    21c2:	d6 97       	sbiw	r26, 0x36	; 54
    21c4:	d7 96       	adiw	r26, 0x37	; 55
    21c6:	6c 93       	st	X, r22
    21c8:	d7 97       	sbiw	r26, 0x37	; 55
    21ca:	d8 96       	adiw	r26, 0x38	; 56
    21cc:	7c 93       	st	X, r23
    21ce:	d8 97       	sbiw	r26, 0x38	; 56
    21d0:	d9 96       	adiw	r26, 0x39	; 57
    21d2:	8c 93       	st	X, r24
    21d4:	d9 97       	sbiw	r26, 0x39	; 57
    21d6:	da 96       	adiw	r26, 0x3a	; 58
    21d8:	9c 93       	st	X, r25
    21da:	da 97       	sbiw	r26, 0x3a	; 58

        if(first_cluster_offset + write_length >= cluster_size)
    21dc:	e9 85       	ldd	r30, Y+9	; 0x09
    21de:	fa 85       	ldd	r31, Y+10	; 0x0a
    21e0:	4e 0e       	add	r4, r30
    21e2:	5f 1e       	adc	r5, r31
    21e4:	e9 88       	ldd	r14, Y+17	; 0x11
    21e6:	fa 88       	ldd	r15, Y+18	; 0x12
    21e8:	4e 14       	cp	r4, r14
    21ea:	5f 04       	cpc	r5, r15
    21ec:	a0 f1       	brcs	.+104    	; 0x2256 <fat_write_file+0x42a>
        {
            /* we are on a cluster boundary, so get the next cluster */
            cluster_t cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
    21ee:	4b 85       	ldd	r20, Y+11	; 0x0b
    21f0:	5c 85       	ldd	r21, Y+12	; 0x0c
    21f2:	6d 85       	ldd	r22, Y+13	; 0x0d
    21f4:	7e 85       	ldd	r23, Y+14	; 0x0e
    21f6:	8d 91       	ld	r24, X+
    21f8:	9c 91       	ld	r25, X
    21fa:	0e 94 28 01 	call	0x250	; 0x250 <fat_get_next_cluster>
            if(!cluster_num_next && buffer_left > 0)
    21fe:	61 15       	cp	r22, r1
    2200:	71 05       	cpc	r23, r1
    2202:	81 05       	cpc	r24, r1
    2204:	91 05       	cpc	r25, r1
    2206:	09 f5       	brne	.+66     	; 0x224a <fat_write_file+0x41e>
    2208:	21 14       	cp	r2, r1
    220a:	31 04       	cpc	r3, r1
    220c:	b9 f0       	breq	.+46     	; 0x223c <fat_write_file+0x410>
                /* we reached the last cluster, append a new one */
                cluster_num_next = fat_append_clusters(fd->fs, cluster_num, 1);
    220e:	01 e0       	ldi	r16, 0x01	; 1
    2210:	10 e0       	ldi	r17, 0x00	; 0
    2212:	20 e0       	ldi	r18, 0x00	; 0
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	4b 85       	ldd	r20, Y+11	; 0x0b
    2218:	5c 85       	ldd	r21, Y+12	; 0x0c
    221a:	6d 85       	ldd	r22, Y+13	; 0x0d
    221c:	7e 85       	ldd	r23, Y+14	; 0x0e
    221e:	ad 89       	ldd	r26, Y+21	; 0x15
    2220:	be 89       	ldd	r27, Y+22	; 0x16
    2222:	8d 91       	ld	r24, X+
    2224:	9c 91       	ld	r25, X
    2226:	0e 94 a2 03 	call	0x744	; 0x744 <fat_append_clusters>
    222a:	6b 87       	std	Y+11, r22	; 0x0b
    222c:	7c 87       	std	Y+12, r23	; 0x0c
    222e:	8d 87       	std	Y+13, r24	; 0x0d
    2230:	9e 87       	std	Y+14, r25	; 0x0e
            if(!cluster_num_next)
    2232:	67 2b       	or	r22, r23
    2234:	68 2b       	or	r22, r24
    2236:	69 2b       	or	r22, r25
    2238:	09 f0       	breq	.+2      	; 0x223c <fat_write_file+0x410>
    223a:	96 c0       	rjmp	.+300    	; 0x2368 <fat_write_file+0x53c>
    223c:	ed 89       	ldd	r30, Y+21	; 0x15
    223e:	fe 89       	ldd	r31, Y+22	; 0x16
            {
                fd->pos_cluster = 0;
    2240:	13 ae       	std	Z+59, r1	; 0x3b
    2242:	14 ae       	std	Z+60, r1	; 0x3c
    2244:	15 ae       	std	Z+61, r1	; 0x3d
    2246:	16 ae       	std	Z+62, r1	; 0x3e
                break;
    2248:	17 c0       	rjmp	.+46     	; 0x2278 <fat_write_file+0x44c>
        fd->pos += write_length;

        if(first_cluster_offset + write_length >= cluster_size)
        {
            /* we are on a cluster boundary, so get the next cluster */
            cluster_t cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
    224a:	6b 87       	std	Y+11, r22	; 0x0b
    224c:	7c 87       	std	Y+12, r23	; 0x0c
    224e:	8d 87       	std	Y+13, r24	; 0x0d
    2250:	9e 87       	std	Y+14, r25	; 0x0e
                fd->pos_cluster = 0;
                break;
            }

            cluster_num = cluster_num_next;
            first_cluster_offset = 0;
    2252:	89 86       	std	Y+9, r8	; 0x09
    2254:	1a 86       	std	Y+10, r1	; 0x0a
        }

        fd->pos_cluster = cluster_num;
    2256:	eb 84       	ldd	r14, Y+11	; 0x0b
    2258:	fc 84       	ldd	r15, Y+12	; 0x0c
    225a:	0d 85       	ldd	r16, Y+13	; 0x0d
    225c:	1e 85       	ldd	r17, Y+14	; 0x0e
    225e:	ad 89       	ldd	r26, Y+21	; 0x15
    2260:	be 89       	ldd	r27, Y+22	; 0x16
    2262:	db 96       	adiw	r26, 0x3b	; 59
    2264:	ed 92       	st	X+, r14
    2266:	fd 92       	st	X+, r15
    2268:	0d 93       	st	X+, r16
    226a:	1c 93       	st	X, r17
    226c:	de 97       	sbiw	r26, 0x3e	; 62

    } while(buffer_left > 0); /* check if we are done */
    226e:	21 14       	cp	r2, r1
    2270:	31 04       	cpc	r3, r1
    2272:	09 f0       	breq	.+2      	; 0x2276 <fat_write_file+0x44a>
    2274:	e9 ce       	rjmp	.-558    	; 0x2048 <fat_write_file+0x21c>
    2276:	00 c0       	rjmp	.+0      	; 0x2278 <fat_write_file+0x44c>

    /* update directory entry */
    if(fd->pos > fd->dir_entry.file_size)
    2278:	ed 89       	ldd	r30, Y+21	; 0x15
    227a:	fe 89       	ldd	r31, Y+22	; 0x16
    227c:	b3 a9       	ldd	r27, Z+51	; 0x33
    227e:	a4 a9       	ldd	r26, Z+52	; 0x34
    2280:	95 a8       	ldd	r9, Z+53	; 0x35
    2282:	86 a8       	ldd	r8, Z+54	; 0x36
    2284:	67 a9       	ldd	r22, Z+55	; 0x37
    2286:	70 ad       	ldd	r23, Z+56	; 0x38
    2288:	47 a0       	ldd	r4, Z+39	; 0x27
    228a:	50 a4       	ldd	r5, Z+40	; 0x28
    228c:	61 a4       	ldd	r6, Z+41	; 0x29
    228e:	72 a4       	ldd	r7, Z+42	; 0x2a
    2290:	83 01       	movw	r16, r6
    2292:	72 01       	movw	r14, r4
    2294:	20 e0       	ldi	r18, 0x00	; 0
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	a9 01       	movw	r20, r18
    229a:	49 82       	std	Y+1, r4	; 0x01
    229c:	fa 82       	std	Y+2, r15	; 0x02
    229e:	0b 83       	std	Y+3, r16	; 0x03
    22a0:	1c 83       	std	Y+4, r17	; 0x04
    22a2:	2d 83       	std	Y+5, r18	; 0x05
    22a4:	3e 83       	std	Y+6, r19	; 0x06
    22a6:	4f 83       	std	Y+7, r20	; 0x07
    22a8:	58 87       	std	Y+8, r21	; 0x08
    22aa:	2b 2f       	mov	r18, r27
    22ac:	3a 2f       	mov	r19, r26
    22ae:	49 2d       	mov	r20, r9
    22b0:	58 2d       	mov	r21, r8
    22b2:	81 ad       	ldd	r24, Z+57	; 0x39
    22b4:	92 ad       	ldd	r25, Z+58	; 0x3a
    22b6:	a4 2c       	mov	r10, r4
    22b8:	bf 2c       	mov	r11, r15
    22ba:	c0 2e       	mov	r12, r16
    22bc:	d1 2e       	mov	r13, r17
    22be:	e1 2c       	mov	r14, r1
    22c0:	f1 2c       	mov	r15, r1
    22c2:	00 e0       	ldi	r16, 0x00	; 0
    22c4:	10 e0       	ldi	r17, 0x00	; 0
    22c6:	0e 94 84 27 	call	0x4f08	; 0x4f08 <__cmpdi2>
    22ca:	89 f1       	breq	.+98     	; 0x232e <fat_write_file+0x502>
    22cc:	80 f1       	brcs	.+96     	; 0x232e <fat_write_file+0x502>
#if !FAT_DELAY_DIRENTRY_UPDATE
        uint32_t size_old = fd->dir_entry.file_size;
#endif

        /* update file size */
        fd->dir_entry.file_size = fd->pos;
    22ce:	b7 a3       	std	Z+39, r27	; 0x27
    22d0:	a0 a7       	std	Z+40, r26	; 0x28
    22d2:	91 a6       	std	Z+41, r9	; 0x29
    22d4:	82 a6       	std	Z+42, r8	; 0x2a

#if !FAT_DELAY_DIRENTRY_UPDATE
        /* write directory entry */
        if(!fat_write_dir_entry(fd->fs, &fd->dir_entry))
    22d6:	bf 01       	movw	r22, r30
    22d8:	6e 5f       	subi	r22, 0xFE	; 254
    22da:	7f 4f       	sbci	r23, 0xFF	; 255
    22dc:	80 81       	ld	r24, Z
    22de:	91 81       	ldd	r25, Z+1	; 0x01
    22e0:	0e 94 2d 08 	call	0x105a	; 0x105a <fat_write_dir_entry>
    22e4:	81 11       	cpse	r24, r1
    22e6:	23 c0       	rjmp	.+70     	; 0x232e <fat_write_file+0x502>
        {
            /* We do not return an error here since we actually wrote
             * some data to disk. So we calculate the amount of data
             * we wrote to disk and which lies within the old file size.
             */
            buffer_left = fd->pos - size_old;
    22e8:	ad 89       	ldd	r26, Y+21	; 0x15
    22ea:	be 89       	ldd	r27, Y+22	; 0x16
    22ec:	d3 96       	adiw	r26, 0x33	; 51
    22ee:	2d 90       	ld	r2, X+
    22f0:	3c 90       	ld	r3, X
    22f2:	d4 97       	sbiw	r26, 0x34	; 52
    22f4:	24 18       	sub	r2, r4
    22f6:	35 08       	sbc	r3, r5
            fd->pos = size_old;
    22f8:	e9 81       	ldd	r30, Y+1	; 0x01
    22fa:	d3 96       	adiw	r26, 0x33	; 51
    22fc:	ec 93       	st	X, r30
    22fe:	d3 97       	sbiw	r26, 0x33	; 51
    2300:	fa 81       	ldd	r31, Y+2	; 0x02
    2302:	d4 96       	adiw	r26, 0x34	; 52
    2304:	fc 93       	st	X, r31
    2306:	d4 97       	sbiw	r26, 0x34	; 52
    2308:	eb 80       	ldd	r14, Y+3	; 0x03
    230a:	d5 96       	adiw	r26, 0x35	; 53
    230c:	ec 92       	st	X, r14
    230e:	d5 97       	sbiw	r26, 0x35	; 53
    2310:	fc 80       	ldd	r15, Y+4	; 0x04
    2312:	d6 96       	adiw	r26, 0x36	; 54
    2314:	fc 92       	st	X, r15
    2316:	d6 97       	sbiw	r26, 0x36	; 54
    2318:	d7 96       	adiw	r26, 0x37	; 55
    231a:	1c 92       	st	X, r1
    231c:	d7 97       	sbiw	r26, 0x37	; 55
    231e:	d8 96       	adiw	r26, 0x38	; 56
    2320:	1c 92       	st	X, r1
    2322:	d8 97       	sbiw	r26, 0x38	; 56
    2324:	d9 96       	adiw	r26, 0x39	; 57
    2326:	1c 92       	st	X, r1
    2328:	d9 97       	sbiw	r26, 0x39	; 57
    232a:	da 96       	adiw	r26, 0x3a	; 58
    232c:	1c 92       	st	X, r1
        }
#endif
    }

    return buffer_len - buffer_left;
    232e:	8b 89       	ldd	r24, Y+19	; 0x13
    2330:	9c 89       	ldd	r25, Y+20	; 0x14
    2332:	82 19       	sub	r24, r2
    2334:	93 09       	sbc	r25, r3
    2336:	27 c0       	rjmp	.+78     	; 0x2386 <fat_write_file+0x55a>
 */
intptr_t fat_write_file(struct fat_file_struct* fd, const uint8_t* buffer, uintptr_t buffer_len)
{
    /* check arguments */
    if(!fd || !buffer || buffer_len < 1)
        return -1;
    2338:	8f ef       	ldi	r24, 0xFF	; 255
    233a:	9f ef       	ldi	r25, 0xFF	; 255
    233c:	24 c0       	rjmp	.+72     	; 0x2386 <fat_write_file+0x55a>
    233e:	8f ef       	ldi	r24, 0xFF	; 255
    2340:	9f ef       	ldi	r25, 0xFF	; 255
    2342:	21 c0       	rjmp	.+66     	; 0x2386 <fat_write_file+0x55a>
    2344:	8f ef       	ldi	r24, 0xFF	; 255
    2346:	9f ef       	ldi	r25, 0xFF	; 255
    2348:	1e c0       	rjmp	.+60     	; 0x2386 <fat_write_file+0x55a>
    if(fd->pos > fd->dir_entry.file_size)
        return -1;
    234a:	8f ef       	ldi	r24, 0xFF	; 255
    234c:	9f ef       	ldi	r25, 0xFF	; 255
    234e:	1b c0       	rjmp	.+54     	; 0x2386 <fat_write_file+0x55a>
                if(!cluster_num)
                    return 0;
            }
            else
            {
                return -1;
    2350:	8f ef       	ldi	r24, 0xFF	; 255
    2352:	9f ef       	ldi	r25, 0xFF	; 255
    2354:	18 c0       	rjmp	.+48     	; 0x2386 <fat_write_file+0x55a>
            { 
				
                /* empty file */
                fd->dir_entry.cluster = cluster_num = fat_append_clusters(fd->fs, 0, 1);
                if(!cluster_num)
                    return 0;
    2356:	80 e0       	ldi	r24, 0x00	; 0
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	15 c0       	rjmp	.+42     	; 0x2386 <fat_write_file+0x55a>
                pos -= cluster_size;
                cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
                if(!cluster_num_next)
                {
                    if(pos != 0)
                        return -1; /* current file position points beyond end of file */
    235c:	8f ef       	ldi	r24, 0xFF	; 255
    235e:	9f ef       	ldi	r25, 0xFF	; 255
    2360:	12 c0       	rjmp	.+36     	; 0x2386 <fat_write_file+0x55a>

                    /* the file exactly ends on a cluster boundary, and we append to it */
                    cluster_num_next = fat_append_clusters(fd->fs, cluster_num, 1);
                    if(!cluster_num_next)
                        return 0;
    2362:	80 e0       	ldi	r24, 0x00	; 0
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	0f c0       	rjmp	.+30     	; 0x2386 <fat_write_file+0x55a>

            cluster_num = cluster_num_next;
            first_cluster_offset = 0;
        }

        fd->pos_cluster = cluster_num;
    2368:	0b 85       	ldd	r16, Y+11	; 0x0b
    236a:	1c 85       	ldd	r17, Y+12	; 0x0c
    236c:	2d 85       	ldd	r18, Y+13	; 0x0d
    236e:	3e 85       	ldd	r19, Y+14	; 0x0e
    2370:	ad 89       	ldd	r26, Y+21	; 0x15
    2372:	be 89       	ldd	r27, Y+22	; 0x16
    2374:	db 96       	adiw	r26, 0x3b	; 59
    2376:	0d 93       	st	X+, r16
    2378:	1d 93       	st	X+, r17
    237a:	2d 93       	st	X+, r18
    237c:	3c 93       	st	X, r19
    237e:	de 97       	sbiw	r26, 0x3e	; 62
                fd->pos_cluster = 0;
                break;
            }

            cluster_num = cluster_num_next;
            first_cluster_offset = 0;
    2380:	89 86       	std	Y+9, r8	; 0x09
    2382:	1a 86       	std	Y+10, r1	; 0x0a
    2384:	61 ce       	rjmp	.-830    	; 0x2048 <fat_write_file+0x21c>
        }
#endif
    }

    return buffer_len - buffer_left;
}
    2386:	66 96       	adiw	r28, 0x16	; 22
    2388:	0f b6       	in	r0, 0x3f	; 63
    238a:	f8 94       	cli
    238c:	de bf       	out	0x3e, r29	; 62
    238e:	0f be       	out	0x3f, r0	; 63
    2390:	cd bf       	out	0x3d, r28	; 61
    2392:	df 91       	pop	r29
    2394:	cf 91       	pop	r28
    2396:	1f 91       	pop	r17
    2398:	0f 91       	pop	r16
    239a:	ff 90       	pop	r15
    239c:	ef 90       	pop	r14
    239e:	df 90       	pop	r13
    23a0:	cf 90       	pop	r12
    23a2:	bf 90       	pop	r11
    23a4:	af 90       	pop	r10
    23a6:	9f 90       	pop	r9
    23a8:	8f 90       	pop	r8
    23aa:	7f 90       	pop	r7
    23ac:	6f 90       	pop	r6
    23ae:	5f 90       	pop	r5
    23b0:	4f 90       	pop	r4
    23b2:	3f 90       	pop	r3
    23b4:	2f 90       	pop	r2
    23b6:	08 95       	ret

000023b8 <fat_resize_file>:
 * \param[in] fd The file decriptor of the file which to resize.
 * \param[in] size The new size of the file.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_resize_file(struct fat_file_struct* fd, uint32_t size)
{
    23b8:	2f 92       	push	r2
    23ba:	3f 92       	push	r3
    23bc:	4f 92       	push	r4
    23be:	5f 92       	push	r5
    23c0:	6f 92       	push	r6
    23c2:	7f 92       	push	r7
    23c4:	8f 92       	push	r8
    23c6:	9f 92       	push	r9
    23c8:	af 92       	push	r10
    23ca:	bf 92       	push	r11
    23cc:	cf 92       	push	r12
    23ce:	df 92       	push	r13
    23d0:	ef 92       	push	r14
    23d2:	ff 92       	push	r15
    23d4:	0f 93       	push	r16
    23d6:	1f 93       	push	r17
    23d8:	cf 93       	push	r28
    23da:	df 93       	push	r29
    23dc:	cd b7       	in	r28, 0x3d	; 61
    23de:	de b7       	in	r29, 0x3e	; 62
    23e0:	60 97       	sbiw	r28, 0x10	; 16
    23e2:	0f b6       	in	r0, 0x3f	; 63
    23e4:	f8 94       	cli
    23e6:	de bf       	out	0x3e, r29	; 62
    23e8:	0f be       	out	0x3f, r0	; 63
    23ea:	cd bf       	out	0x3d, r28	; 61
    if(!fd)
    23ec:	00 97       	sbiw	r24, 0x00	; 0
    23ee:	09 f4       	brne	.+2      	; 0x23f2 <fat_resize_file+0x3a>
    23f0:	a0 c1       	rjmp	.+832    	; 0x2732 <fat_resize_file+0x37a>
    23f2:	4d 87       	std	Y+13, r20	; 0x0d
    23f4:	5e 87       	std	Y+14, r21	; 0x0e
    23f6:	6f 87       	std	Y+15, r22	; 0x0f
    23f8:	78 8b       	std	Y+16, r23	; 0x10
    23fa:	1c 01       	movw	r2, r24
        return 0;

    cluster_t cluster_num = fd->dir_entry.cluster;
    23fc:	dc 01       	movw	r26, r24
    23fe:	93 96       	adiw	r26, 0x23	; 35
    2400:	2d 91       	ld	r18, X+
    2402:	3d 91       	ld	r19, X+
    2404:	4d 91       	ld	r20, X+
    2406:	5c 91       	ld	r21, X
    2408:	96 97       	sbiw	r26, 0x26	; 38
    240a:	2d 83       	std	Y+5, r18	; 0x05
    240c:	3e 83       	std	Y+6, r19	; 0x06
    240e:	4f 83       	std	Y+7, r20	; 0x07
    2410:	58 87       	std	Y+8, r21	; 0x08
    uint16_t cluster_size = fd->fs->header.cluster_size;
    uint32_t size_new = size;

    do
    {
        if(cluster_num == 0 && size_new == 0)
    2412:	23 2b       	or	r18, r19
    2414:	24 2b       	or	r18, r20
    2416:	25 2b       	or	r18, r21
    2418:	09 f0       	breq	.+2      	; 0x241c <fat_resize_file+0x64>
    241a:	bf c1       	rjmp	.+894    	; 0x279a <fat_resize_file+0x3e2>
    241c:	2d 85       	ldd	r18, Y+13	; 0x0d
    241e:	3e 85       	ldd	r19, Y+14	; 0x0e
    2420:	4f 85       	ldd	r20, Y+15	; 0x0f
    2422:	58 89       	ldd	r21, Y+16	; 0x10
    2424:	23 2b       	or	r18, r19
    2426:	24 2b       	or	r18, r20
    2428:	25 2b       	or	r18, r21
    242a:	09 f4       	brne	.+2      	; 0x242e <fat_resize_file+0x76>
    242c:	31 c1       	rjmp	.+610    	; 0x2690 <fat_resize_file+0x2d8>
    242e:	ce c1       	rjmp	.+924    	; 0x27cc <fat_resize_file+0x414>
 * \param[in] fd The file decriptor of the file which to resize.
 * \param[in] size The new size of the file.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_resize_file(struct fat_file_struct* fd, uint32_t size)
{
    2430:	4d 84       	ldd	r4, Y+13	; 0x0d
    2432:	5e 84       	ldd	r5, Y+14	; 0x0e
    2434:	6f 84       	ldd	r6, Y+15	; 0x0f
    2436:	78 88       	ldd	r7, Y+16	; 0x10

        /* seek to the next cluster as long as we need the space */
        while(size_new > cluster_size)
        {
            /* get next cluster of file */
            cluster_t cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
    2438:	4d 81       	ldd	r20, Y+5	; 0x05
    243a:	5e 81       	ldd	r21, Y+6	; 0x06
    243c:	6f 81       	ldd	r22, Y+7	; 0x07
    243e:	78 85       	ldd	r23, Y+8	; 0x08
    2440:	d1 01       	movw	r26, r2
    2442:	8d 91       	ld	r24, X+
    2444:	9c 91       	ld	r25, X
    2446:	0e 94 28 01 	call	0x250	; 0x250 <fat_get_next_cluster>
    244a:	6b 01       	movw	r12, r22
    244c:	7c 01       	movw	r14, r24
            if(cluster_num_next)
    244e:	61 15       	cp	r22, r1
    2450:	71 05       	cpc	r23, r1
    2452:	81 05       	cpc	r24, r1
    2454:	91 05       	cpc	r25, r1
    2456:	71 f0       	breq	.+28     	; 0x2474 <fat_resize_file+0xbc>
            {
                cluster_num = cluster_num_next;
                size_new -= cluster_size;
    2458:	48 18       	sub	r4, r8
    245a:	59 08       	sbc	r5, r9
    245c:	6a 08       	sbc	r6, r10
    245e:	7b 08       	sbc	r7, r11

        /* seek to the next cluster as long as we need the space */
        while(size_new > cluster_size)
        {
            /* get next cluster of file */
            cluster_t cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
    2460:	6d 83       	std	Y+5, r22	; 0x05
    2462:	7e 83       	std	Y+6, r23	; 0x06
    2464:	8f 83       	std	Y+7, r24	; 0x07
    2466:	98 87       	std	Y+8, r25	; 0x08
        if(cluster_num == 0 && size_new == 0)
            /* the file stays empty */
            break;

        /* seek to the next cluster as long as we need the space */
        while(size_new > cluster_size)
    2468:	84 14       	cp	r8, r4
    246a:	95 04       	cpc	r9, r5
    246c:	a6 04       	cpc	r10, r6
    246e:	b7 04       	cpc	r11, r7
    2470:	18 f3       	brcs	.-58     	; 0x2438 <fat_resize_file+0x80>
    2472:	47 c0       	rjmp	.+142    	; 0x2502 <fat_resize_file+0x14a>
            {
                break;
            }
        }

        if(size_new > cluster_size || cluster_num == 0)
    2474:	84 14       	cp	r8, r4
    2476:	95 04       	cpc	r9, r5
    2478:	a6 04       	cpc	r10, r6
    247a:	b7 04       	cpc	r11, r7
    247c:	68 f0       	brcs	.+26     	; 0x2498 <fat_resize_file+0xe0>
    247e:	2d 81       	ldd	r18, Y+5	; 0x05
    2480:	3e 81       	ldd	r19, Y+6	; 0x06
    2482:	4f 81       	ldd	r20, Y+7	; 0x07
    2484:	58 85       	ldd	r21, Y+8	; 0x08
    2486:	21 15       	cp	r18, r1
    2488:	31 05       	cpc	r19, r1
    248a:	41 05       	cpc	r20, r1
    248c:	51 05       	cpc	r21, r1
    248e:	09 f4       	brne	.+2      	; 0x2492 <fat_resize_file+0xda>
    2490:	58 c1       	rjmp	.+688    	; 0x2742 <fat_resize_file+0x38a>
    2492:	69 01       	movw	r12, r18
    2494:	7a 01       	movw	r14, r20
    2496:	35 c0       	rjmp	.+106    	; 0x2502 <fat_resize_file+0x14a>
        {
            /* Allocate new cluster chain and append
             * it to the existing one, if available.
             */
            cluster_t cluster_count = (size_new + cluster_size - 1) / cluster_size;
            cluster_t cluster_new_chain = fat_append_clusters(fd->fs, cluster_num, cluster_count);
    2498:	d5 01       	movw	r26, r10
    249a:	c4 01       	movw	r24, r8
    249c:	01 97       	sbiw	r24, 0x01	; 1
    249e:	a1 09       	sbc	r26, r1
    24a0:	b1 09       	sbc	r27, r1
    24a2:	bc 01       	movw	r22, r24
    24a4:	cd 01       	movw	r24, r26
    24a6:	64 0d       	add	r22, r4
    24a8:	75 1d       	adc	r23, r5
    24aa:	86 1d       	adc	r24, r6
    24ac:	97 1d       	adc	r25, r7
    24ae:	a5 01       	movw	r20, r10
    24b0:	94 01       	movw	r18, r8
    24b2:	0e 94 9a 26 	call	0x4d34	; 0x4d34 <__udivmodsi4>
    24b6:	89 01       	movw	r16, r18
    24b8:	9a 01       	movw	r18, r20
    24ba:	4d 81       	ldd	r20, Y+5	; 0x05
    24bc:	5e 81       	ldd	r21, Y+6	; 0x06
    24be:	6f 81       	ldd	r22, Y+7	; 0x07
    24c0:	78 85       	ldd	r23, Y+8	; 0x08
    24c2:	d1 01       	movw	r26, r2
    24c4:	8d 91       	ld	r24, X+
    24c6:	9c 91       	ld	r25, X
    24c8:	0e 94 a2 03 	call	0x744	; 0x744 <fat_append_clusters>
    24cc:	6b 01       	movw	r12, r22
    24ce:	7c 01       	movw	r14, r24
            if(!cluster_new_chain)
    24d0:	67 2b       	or	r22, r23
    24d2:	68 2b       	or	r22, r24
    24d4:	69 2b       	or	r22, r25
    24d6:	09 f4       	brne	.+2      	; 0x24da <fat_resize_file+0x122>
    24d8:	2e c1       	rjmp	.+604    	; 0x2736 <fat_resize_file+0x37e>
                return 0;

            if(!cluster_num)
    24da:	2d 81       	ldd	r18, Y+5	; 0x05
    24dc:	3e 81       	ldd	r19, Y+6	; 0x06
    24de:	4f 81       	ldd	r20, Y+7	; 0x07
    24e0:	58 85       	ldd	r21, Y+8	; 0x08
    24e2:	23 2b       	or	r18, r19
    24e4:	24 2b       	or	r18, r20
    24e6:	25 2b       	or	r18, r21
    24e8:	41 f4       	brne	.+16     	; 0x24fa <fat_resize_file+0x142>
            {
                cluster_num = cluster_new_chain;
                fd->dir_entry.cluster = cluster_num;
    24ea:	d1 01       	movw	r26, r2
    24ec:	93 96       	adiw	r26, 0x23	; 35
    24ee:	cd 92       	st	X+, r12
    24f0:	dd 92       	st	X+, r13
    24f2:	ed 92       	st	X+, r14
    24f4:	fc 92       	st	X, r15
    24f6:	96 97       	sbiw	r26, 0x26	; 38
    24f8:	04 c0       	rjmp	.+8      	; 0x2502 <fat_resize_file+0x14a>
    24fa:	cd 80       	ldd	r12, Y+5	; 0x05
    24fc:	de 80       	ldd	r13, Y+6	; 0x06
    24fe:	ef 80       	ldd	r14, Y+7	; 0x07
    2500:	f8 84       	ldd	r15, Y+8	; 0x08
            }
        }

        /* write new directory entry */
        fd->dir_entry.file_size = size;
    2502:	2d 85       	ldd	r18, Y+13	; 0x0d
    2504:	3e 85       	ldd	r19, Y+14	; 0x0e
    2506:	4f 85       	ldd	r20, Y+15	; 0x0f
    2508:	58 89       	ldd	r21, Y+16	; 0x10
    250a:	d1 01       	movw	r26, r2
    250c:	97 96       	adiw	r26, 0x27	; 39
    250e:	2d 93       	st	X+, r18
    2510:	3d 93       	st	X+, r19
    2512:	4d 93       	st	X+, r20
    2514:	5c 93       	st	X, r21
    2516:	9a 97       	sbiw	r26, 0x2a	; 42
        if(size == 0)
    2518:	23 2b       	or	r18, r19
    251a:	24 2b       	or	r18, r20
    251c:	25 2b       	or	r18, r21
    251e:	09 f0       	breq	.+2      	; 0x2522 <fat_resize_file+0x16a>
    2520:	31 c1       	rjmp	.+610    	; 0x2784 <fat_resize_file+0x3cc>
            fd->dir_entry.cluster = 0;
    2522:	f1 01       	movw	r30, r2
    2524:	13 a2       	std	Z+35, r1	; 0x23
    2526:	14 a2       	std	Z+36, r1	; 0x24
    2528:	15 a2       	std	Z+37, r1	; 0x25
    252a:	16 a2       	std	Z+38, r1	; 0x26
        if(!fat_write_dir_entry(fd->fs, &fd->dir_entry))
    252c:	b1 01       	movw	r22, r2
    252e:	6e 5f       	subi	r22, 0xFE	; 254
    2530:	7f 4f       	sbci	r23, 0xFF	; 255
    2532:	80 81       	ld	r24, Z
    2534:	91 81       	ldd	r25, Z+1	; 0x01
    2536:	0e 94 2d 08 	call	0x105a	; 0x105a <fat_write_dir_entry>
    253a:	88 23       	and	r24, r24
    253c:	09 f4       	brne	.+2      	; 0x2540 <fat_resize_file+0x188>
    253e:	5b c1       	rjmp	.+694    	; 0x27f6 <fat_resize_file+0x43e>
            return 0;

        if(size == 0)
        {
            /* free all clusters of file */
            fat_free_clusters(fd->fs, cluster_num);
    2540:	b7 01       	movw	r22, r14
    2542:	a6 01       	movw	r20, r12
    2544:	d1 01       	movw	r26, r2
    2546:	8d 91       	ld	r24, X+
    2548:	9c 91       	ld	r25, X
    254a:	0e 94 da 01 	call	0x3b4	; 0x3b4 <fat_free_clusters>
    254e:	a0 c0       	rjmp	.+320    	; 0x2690 <fat_resize_file+0x2d8>
        }
        else if(size_new <= cluster_size)
    2550:	84 14       	cp	r8, r4
    2552:	95 04       	cpc	r9, r5
    2554:	a6 04       	cpc	r10, r6
    2556:	b7 04       	cpc	r11, r7
    2558:	08 f4       	brcc	.+2      	; 0x255c <fat_resize_file+0x1a4>
    255a:	9a c0       	rjmp	.+308    	; 0x2690 <fat_resize_file+0x2d8>
        {
            /* free all clusters no longer needed */
            fat_terminate_clusters(fd->fs, cluster_num);
    255c:	f1 01       	movw	r30, r2
    255e:	80 80       	ld	r8, Z
    2560:	91 80       	ldd	r9, Z+1	; 0x01
 * \returns 0 on failure, 1 on success.
 * \see fat_free_clusters
 */
uint8_t fat_terminate_clusters(struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
    2562:	81 14       	cp	r8, r1
    2564:	91 04       	cpc	r9, r1
    2566:	09 f4       	brne	.+2      	; 0x256a <fat_resize_file+0x1b2>
    2568:	93 c0       	rjmp	.+294    	; 0x2690 <fat_resize_file+0x2d8>
    256a:	f2 e0       	ldi	r31, 0x02	; 2
    256c:	cf 16       	cp	r12, r31
    256e:	d1 04       	cpc	r13, r1
    2570:	e1 04       	cpc	r14, r1
    2572:	f1 04       	cpc	r15, r1
    2574:	08 f4       	brcc	.+2      	; 0x2578 <fat_resize_file+0x1c0>
    2576:	8c c0       	rjmp	.+280    	; 0x2690 <fat_resize_file+0x2d8>
        return 0;

    /* fetch next cluster before overwriting the cluster entry */
    cluster_t cluster_num_next = fat_get_next_cluster(fs, cluster_num);
    2578:	b7 01       	movw	r22, r14
    257a:	a6 01       	movw	r20, r12
    257c:	c4 01       	movw	r24, r8
    257e:	0e 94 28 01 	call	0x250	; 0x250 <fat_get_next_cluster>
    2582:	2b 01       	movw	r4, r22
    2584:	3c 01       	movw	r6, r24

    /* mark cluster as the last one */
#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
    2586:	d4 01       	movw	r26, r8
    2588:	ed 91       	ld	r30, X+
    258a:	fc 91       	ld	r31, X
    258c:	80 85       	ldd	r24, Z+8	; 0x08
    258e:	8b 30       	cpi	r24, 0x0B	; 11
    2590:	e9 f5       	brne	.+122    	; 0x260c <fat_resize_file+0x254>
    {
        uint32_t fat_entry = HTOL32(FAT32_CLUSTER_LAST_MAX);
    2592:	8f ef       	ldi	r24, 0xFF	; 255
    2594:	9f ef       	ldi	r25, 0xFF	; 255
    2596:	af ef       	ldi	r26, 0xFF	; 255
    2598:	bf e0       	ldi	r27, 0x0F	; 15
    259a:	89 83       	std	Y+1, r24	; 0x01
    259c:	9a 83       	std	Y+2, r25	; 0x02
    259e:	ab 83       	std	Y+3, r26	; 0x03
    25a0:	bc 83       	std	Y+4, r27	; 0x04
        if(!fs->partition->device_write(fs->header.fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
    25a2:	56 01       	movw	r10, r12
    25a4:	67 01       	movw	r12, r14
    25a6:	2a 2d       	mov	r18, r10
    25a8:	3b 2d       	mov	r19, r11
    25aa:	4c 2d       	mov	r20, r12
    25ac:	5d 2d       	mov	r21, r13
    25ae:	60 e0       	ldi	r22, 0x00	; 0
    25b0:	70 e0       	ldi	r23, 0x00	; 0
    25b2:	80 e0       	ldi	r24, 0x00	; 0
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	02 e0       	ldi	r16, 0x02	; 2
    25b8:	0e 94 2f 27 	call	0x4e5e	; 0x4e5e <__ashldi3>
    25bc:	d4 01       	movw	r26, r8
    25be:	1a 96       	adiw	r26, 0x0a	; 10
    25c0:	ac 90       	ld	r10, X
    25c2:	1a 97       	sbiw	r26, 0x0a	; 10
    25c4:	1b 96       	adiw	r26, 0x0b	; 11
    25c6:	bc 90       	ld	r11, X
    25c8:	1b 97       	sbiw	r26, 0x0b	; 11
    25ca:	1c 96       	adiw	r26, 0x0c	; 12
    25cc:	cc 90       	ld	r12, X
    25ce:	1c 97       	sbiw	r26, 0x0c	; 12
    25d0:	1d 96       	adiw	r26, 0x0d	; 13
    25d2:	dc 90       	ld	r13, X
    25d4:	1d 97       	sbiw	r26, 0x0d	; 13
    25d6:	1e 96       	adiw	r26, 0x0e	; 14
    25d8:	ec 90       	ld	r14, X
    25da:	1e 97       	sbiw	r26, 0x0e	; 14
    25dc:	1f 96       	adiw	r26, 0x0f	; 15
    25de:	fc 90       	ld	r15, X
    25e0:	1f 97       	sbiw	r26, 0x0f	; 15
    25e2:	50 96       	adiw	r26, 0x10	; 16
    25e4:	0c 91       	ld	r16, X
    25e6:	50 97       	sbiw	r26, 0x10	; 16
    25e8:	51 96       	adiw	r26, 0x11	; 17
    25ea:	1c 91       	ld	r17, X
    25ec:	0e 94 66 27 	call	0x4ecc	; 0x4ecc <__adddi3>
    25f0:	04 80       	ldd	r0, Z+4	; 0x04
    25f2:	f5 81       	ldd	r31, Z+5	; 0x05
    25f4:	e0 2d       	mov	r30, r0
    25f6:	68 94       	set
    25f8:	ee 24       	eor	r14, r14
    25fa:	e2 f8       	bld	r14, 2
    25fc:	f1 2c       	mov	r15, r1
    25fe:	8e 01       	movw	r16, r28
    2600:	0f 5f       	subi	r16, 0xFF	; 255
    2602:	1f 4f       	sbci	r17, 0xFF	; 255
    2604:	09 95       	icall
    2606:	81 11       	cpse	r24, r1
    2608:	39 c0       	rjmp	.+114    	; 0x267c <fat_resize_file+0x2c4>
    260a:	42 c0       	rjmp	.+132    	; 0x2690 <fat_resize_file+0x2d8>
            return 0;
    }
    else
#endif
    {
        uint16_t fat_entry = HTOL16(FAT16_CLUSTER_LAST_MAX);
    260c:	8f ef       	ldi	r24, 0xFF	; 255
    260e:	9f ef       	ldi	r25, 0xFF	; 255
    2610:	9a 83       	std	Y+2, r25	; 0x02
    2612:	89 83       	std	Y+1, r24	; 0x01
        if(!fs->partition->device_write(fs->header.fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
    2614:	56 01       	movw	r10, r12
    2616:	67 01       	movw	r12, r14
    2618:	2a 2d       	mov	r18, r10
    261a:	3b 2d       	mov	r19, r11
    261c:	4c 2d       	mov	r20, r12
    261e:	5d 2d       	mov	r21, r13
    2620:	60 e0       	ldi	r22, 0x00	; 0
    2622:	70 e0       	ldi	r23, 0x00	; 0
    2624:	80 e0       	ldi	r24, 0x00	; 0
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	01 e0       	ldi	r16, 0x01	; 1
    262a:	0e 94 2f 27 	call	0x4e5e	; 0x4e5e <__ashldi3>
    262e:	d4 01       	movw	r26, r8
    2630:	1a 96       	adiw	r26, 0x0a	; 10
    2632:	ac 90       	ld	r10, X
    2634:	1a 97       	sbiw	r26, 0x0a	; 10
    2636:	1b 96       	adiw	r26, 0x0b	; 11
    2638:	bc 90       	ld	r11, X
    263a:	1b 97       	sbiw	r26, 0x0b	; 11
    263c:	1c 96       	adiw	r26, 0x0c	; 12
    263e:	cc 90       	ld	r12, X
    2640:	1c 97       	sbiw	r26, 0x0c	; 12
    2642:	1d 96       	adiw	r26, 0x0d	; 13
    2644:	dc 90       	ld	r13, X
    2646:	1d 97       	sbiw	r26, 0x0d	; 13
    2648:	1e 96       	adiw	r26, 0x0e	; 14
    264a:	ec 90       	ld	r14, X
    264c:	1e 97       	sbiw	r26, 0x0e	; 14
    264e:	1f 96       	adiw	r26, 0x0f	; 15
    2650:	fc 90       	ld	r15, X
    2652:	1f 97       	sbiw	r26, 0x0f	; 15
    2654:	50 96       	adiw	r26, 0x10	; 16
    2656:	0c 91       	ld	r16, X
    2658:	50 97       	sbiw	r26, 0x10	; 16
    265a:	51 96       	adiw	r26, 0x11	; 17
    265c:	1c 91       	ld	r17, X
    265e:	0e 94 66 27 	call	0x4ecc	; 0x4ecc <__adddi3>
    2662:	04 80       	ldd	r0, Z+4	; 0x04
    2664:	f5 81       	ldd	r31, Z+5	; 0x05
    2666:	e0 2d       	mov	r30, r0
    2668:	68 94       	set
    266a:	ee 24       	eor	r14, r14
    266c:	e1 f8       	bld	r14, 1
    266e:	f1 2c       	mov	r15, r1
    2670:	8e 01       	movw	r16, r28
    2672:	0f 5f       	subi	r16, 0xFF	; 255
    2674:	1f 4f       	sbci	r17, 0xFF	; 255
    2676:	09 95       	icall
    2678:	88 23       	and	r24, r24
    267a:	51 f0       	breq	.+20     	; 0x2690 <fat_resize_file+0x2d8>
            return 0;
    }

    /* free remaining clusters */
    if(cluster_num_next)
    267c:	41 14       	cp	r4, r1
    267e:	51 04       	cpc	r5, r1
    2680:	61 04       	cpc	r6, r1
    2682:	71 04       	cpc	r7, r1
    2684:	29 f0       	breq	.+10     	; 0x2690 <fat_resize_file+0x2d8>
        return fat_free_clusters(fs, cluster_num_next);
    2686:	b3 01       	movw	r22, r6
    2688:	a2 01       	movw	r20, r4
    268a:	c4 01       	movw	r24, r8
    268c:	0e 94 da 01 	call	0x3b4	; 0x3b4 <fat_free_clusters>
        }

    } while(0);

    /* correct file position */
    if(size < fd->pos)
    2690:	4d 85       	ldd	r20, Y+13	; 0x0d
    2692:	5e 85       	ldd	r21, Y+14	; 0x0e
    2694:	6f 85       	ldd	r22, Y+15	; 0x0f
    2696:	78 89       	ldd	r23, Y+16	; 0x10
    2698:	9a 01       	movw	r18, r20
    269a:	ab 01       	movw	r20, r22
    269c:	60 e0       	ldi	r22, 0x00	; 0
    269e:	70 e0       	ldi	r23, 0x00	; 0
    26a0:	cb 01       	movw	r24, r22
    26a2:	2d 83       	std	Y+5, r18	; 0x05
    26a4:	3e 83       	std	Y+6, r19	; 0x06
    26a6:	4f 83       	std	Y+7, r20	; 0x07
    26a8:	58 87       	std	Y+8, r21	; 0x08
    26aa:	69 87       	std	Y+9, r22	; 0x09
    26ac:	7a 87       	std	Y+10, r23	; 0x0a
    26ae:	8b 87       	std	Y+11, r24	; 0x0b
    26b0:	9c 87       	std	Y+12, r25	; 0x0c
    26b2:	d1 01       	movw	r26, r2
    26b4:	d3 96       	adiw	r26, 0x33	; 51
    26b6:	ac 90       	ld	r10, X
    26b8:	d3 97       	sbiw	r26, 0x33	; 51
    26ba:	d4 96       	adiw	r26, 0x34	; 52
    26bc:	bc 90       	ld	r11, X
    26be:	d4 97       	sbiw	r26, 0x34	; 52
    26c0:	d5 96       	adiw	r26, 0x35	; 53
    26c2:	cc 90       	ld	r12, X
    26c4:	d5 97       	sbiw	r26, 0x35	; 53
    26c6:	d6 96       	adiw	r26, 0x36	; 54
    26c8:	dc 90       	ld	r13, X
    26ca:	d6 97       	sbiw	r26, 0x36	; 54
    26cc:	d7 96       	adiw	r26, 0x37	; 55
    26ce:	ec 90       	ld	r14, X
    26d0:	d7 97       	sbiw	r26, 0x37	; 55
    26d2:	d8 96       	adiw	r26, 0x38	; 56
    26d4:	fc 90       	ld	r15, X
    26d6:	d8 97       	sbiw	r26, 0x38	; 56
    26d8:	d9 96       	adiw	r26, 0x39	; 57
    26da:	0c 91       	ld	r16, X
    26dc:	d9 97       	sbiw	r26, 0x39	; 57
    26de:	da 96       	adiw	r26, 0x3a	; 58
    26e0:	1c 91       	ld	r17, X
    26e2:	da 97       	sbiw	r26, 0x3a	; 58
    26e4:	60 e0       	ldi	r22, 0x00	; 0
    26e6:	70 e0       	ldi	r23, 0x00	; 0
    26e8:	80 e0       	ldi	r24, 0x00	; 0
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	0e 94 84 27 	call	0x4f08	; 0x4f08 <__cmpdi2>
    26f0:	20 f5       	brcc	.+72     	; 0x273a <fat_resize_file+0x382>
    {
        fd->pos = size;
    26f2:	d3 96       	adiw	r26, 0x33	; 51
    26f4:	2c 93       	st	X, r18
    26f6:	d3 97       	sbiw	r26, 0x33	; 51
    26f8:	d4 96       	adiw	r26, 0x34	; 52
    26fa:	3c 93       	st	X, r19
    26fc:	d4 97       	sbiw	r26, 0x34	; 52
    26fe:	d5 96       	adiw	r26, 0x35	; 53
    2700:	4c 93       	st	X, r20
    2702:	d5 97       	sbiw	r26, 0x35	; 53
    2704:	d6 96       	adiw	r26, 0x36	; 54
    2706:	5c 93       	st	X, r21
    2708:	d6 97       	sbiw	r26, 0x36	; 54
    270a:	d7 96       	adiw	r26, 0x37	; 55
    270c:	1c 92       	st	X, r1
    270e:	d7 97       	sbiw	r26, 0x37	; 55
    2710:	d8 96       	adiw	r26, 0x38	; 56
    2712:	1c 92       	st	X, r1
    2714:	d8 97       	sbiw	r26, 0x38	; 56
    2716:	d9 96       	adiw	r26, 0x39	; 57
    2718:	1c 92       	st	X, r1
    271a:	d9 97       	sbiw	r26, 0x39	; 57
    271c:	da 96       	adiw	r26, 0x3a	; 58
    271e:	1c 92       	st	X, r1
    2720:	da 97       	sbiw	r26, 0x3a	; 58
        fd->pos_cluster = 0;
    2722:	db 96       	adiw	r26, 0x3b	; 59
    2724:	1d 92       	st	X+, r1
    2726:	1d 92       	st	X+, r1
    2728:	1d 92       	st	X+, r1
    272a:	1c 92       	st	X, r1
    272c:	de 97       	sbiw	r26, 0x3e	; 62
    }

    return 1;
    272e:	81 e0       	ldi	r24, 0x01	; 1
    2730:	62 c0       	rjmp	.+196    	; 0x27f6 <fat_resize_file+0x43e>
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_resize_file(struct fat_file_struct* fd, uint32_t size)
{
    if(!fd)
        return 0;
    2732:	80 e0       	ldi	r24, 0x00	; 0
    2734:	60 c0       	rjmp	.+192    	; 0x27f6 <fat_resize_file+0x43e>
             * it to the existing one, if available.
             */
            cluster_t cluster_count = (size_new + cluster_size - 1) / cluster_size;
            cluster_t cluster_new_chain = fat_append_clusters(fd->fs, cluster_num, cluster_count);
            if(!cluster_new_chain)
                return 0;
    2736:	80 e0       	ldi	r24, 0x00	; 0
    2738:	5e c0       	rjmp	.+188    	; 0x27f6 <fat_resize_file+0x43e>
    {
        fd->pos = size;
        fd->pos_cluster = 0;
    }

    return 1;
    273a:	81 e0       	ldi	r24, 0x01	; 1
    273c:	5c c0       	rjmp	.+184    	; 0x27f6 <fat_resize_file+0x43e>
             * it to the existing one, if available.
             */
            cluster_t cluster_count = (size_new + cluster_size - 1) / cluster_size;
            cluster_t cluster_new_chain = fat_append_clusters(fd->fs, cluster_num, cluster_count);
            if(!cluster_new_chain)
                return 0;
    273e:	80 e0       	ldi	r24, 0x00	; 0
    2740:	5a c0       	rjmp	.+180    	; 0x27f6 <fat_resize_file+0x43e>
        {
            /* Allocate new cluster chain and append
             * it to the existing one, if available.
             */
            cluster_t cluster_count = (size_new + cluster_size - 1) / cluster_size;
            cluster_t cluster_new_chain = fat_append_clusters(fd->fs, cluster_num, cluster_count);
    2742:	d5 01       	movw	r26, r10
    2744:	c4 01       	movw	r24, r8
    2746:	01 97       	sbiw	r24, 0x01	; 1
    2748:	a1 09       	sbc	r26, r1
    274a:	b1 09       	sbc	r27, r1
    274c:	bc 01       	movw	r22, r24
    274e:	cd 01       	movw	r24, r26
    2750:	64 0d       	add	r22, r4
    2752:	75 1d       	adc	r23, r5
    2754:	86 1d       	adc	r24, r6
    2756:	97 1d       	adc	r25, r7
    2758:	a5 01       	movw	r20, r10
    275a:	94 01       	movw	r18, r8
    275c:	0e 94 9a 26 	call	0x4d34	; 0x4d34 <__udivmodsi4>
    2760:	89 01       	movw	r16, r18
    2762:	9a 01       	movw	r18, r20
    2764:	40 e0       	ldi	r20, 0x00	; 0
    2766:	50 e0       	ldi	r21, 0x00	; 0
    2768:	ba 01       	movw	r22, r20
    276a:	f1 01       	movw	r30, r2
    276c:	80 81       	ld	r24, Z
    276e:	91 81       	ldd	r25, Z+1	; 0x01
    2770:	0e 94 a2 03 	call	0x744	; 0x744 <fat_append_clusters>
    2774:	6b 01       	movw	r12, r22
    2776:	7c 01       	movw	r14, r24
            if(!cluster_new_chain)
    2778:	67 2b       	or	r22, r23
    277a:	68 2b       	or	r22, r24
    277c:	69 2b       	or	r22, r25
    277e:	09 f0       	breq	.+2      	; 0x2782 <fat_resize_file+0x3ca>
    2780:	b4 ce       	rjmp	.-664    	; 0x24ea <fat_resize_file+0x132>
    2782:	dd cf       	rjmp	.-70     	; 0x273e <fat_resize_file+0x386>

        /* write new directory entry */
        fd->dir_entry.file_size = size;
        if(size == 0)
            fd->dir_entry.cluster = 0;
        if(!fat_write_dir_entry(fd->fs, &fd->dir_entry))
    2784:	b1 01       	movw	r22, r2
    2786:	6e 5f       	subi	r22, 0xFE	; 254
    2788:	7f 4f       	sbci	r23, 0xFF	; 255
    278a:	d1 01       	movw	r26, r2
    278c:	8d 91       	ld	r24, X+
    278e:	9c 91       	ld	r25, X
    2790:	0e 94 2d 08 	call	0x105a	; 0x105a <fat_write_dir_entry>
    2794:	81 11       	cpse	r24, r1
    2796:	dc ce       	rjmp	.-584    	; 0x2550 <fat_resize_file+0x198>
    2798:	2e c0       	rjmp	.+92     	; 0x27f6 <fat_resize_file+0x43e>
{
    if(!fd)
        return 0;

    cluster_t cluster_num = fd->dir_entry.cluster;
    uint16_t cluster_size = fd->fs->header.cluster_size;
    279a:	dc 01       	movw	r26, r24
    279c:	ed 91       	ld	r30, X+
    279e:	fc 91       	ld	r31, X
        if(cluster_num == 0 && size_new == 0)
            /* the file stays empty */
            break;

        /* seek to the next cluster as long as we need the space */
        while(size_new > cluster_size)
    27a0:	80 8d       	ldd	r24, Z+24	; 0x18
    27a2:	91 8d       	ldd	r25, Z+25	; 0x19
    27a4:	4c 01       	movw	r8, r24
    27a6:	a1 2c       	mov	r10, r1
    27a8:	b1 2c       	mov	r11, r1
    27aa:	2d 85       	ldd	r18, Y+13	; 0x0d
    27ac:	3e 85       	ldd	r19, Y+14	; 0x0e
    27ae:	4f 85       	ldd	r20, Y+15	; 0x0f
    27b0:	58 89       	ldd	r21, Y+16	; 0x10
    27b2:	82 16       	cp	r8, r18
    27b4:	93 06       	cpc	r9, r19
    27b6:	a4 06       	cpc	r10, r20
    27b8:	b5 06       	cpc	r11, r21
    27ba:	08 f4       	brcc	.+2      	; 0x27be <fat_resize_file+0x406>
    27bc:	39 ce       	rjmp	.-910    	; 0x2430 <fat_resize_file+0x78>
    27be:	29 01       	movw	r4, r18
    27c0:	3a 01       	movw	r6, r20
    27c2:	cd 80       	ldd	r12, Y+5	; 0x05
    27c4:	de 80       	ldd	r13, Y+6	; 0x06
    27c6:	ef 80       	ldd	r14, Y+7	; 0x07
    27c8:	f8 84       	ldd	r15, Y+8	; 0x08
    27ca:	9b ce       	rjmp	.-714    	; 0x2502 <fat_resize_file+0x14a>
{
    if(!fd)
        return 0;

    cluster_t cluster_num = fd->dir_entry.cluster;
    uint16_t cluster_size = fd->fs->header.cluster_size;
    27cc:	dc 01       	movw	r26, r24
    27ce:	ed 91       	ld	r30, X+
    27d0:	fc 91       	ld	r31, X
        if(cluster_num == 0 && size_new == 0)
            /* the file stays empty */
            break;

        /* seek to the next cluster as long as we need the space */
        while(size_new > cluster_size)
    27d2:	80 8d       	ldd	r24, Z+24	; 0x18
    27d4:	91 8d       	ldd	r25, Z+25	; 0x19
    27d6:	4c 01       	movw	r8, r24
    27d8:	a1 2c       	mov	r10, r1
    27da:	b1 2c       	mov	r11, r1
    27dc:	2d 85       	ldd	r18, Y+13	; 0x0d
    27de:	3e 85       	ldd	r19, Y+14	; 0x0e
    27e0:	4f 85       	ldd	r20, Y+15	; 0x0f
    27e2:	58 89       	ldd	r21, Y+16	; 0x10
    27e4:	82 16       	cp	r8, r18
    27e6:	93 06       	cpc	r9, r19
    27e8:	a4 06       	cpc	r10, r20
    27ea:	b5 06       	cpc	r11, r21
    27ec:	08 f4       	brcc	.+2      	; 0x27f0 <fat_resize_file+0x438>
    27ee:	20 ce       	rjmp	.-960    	; 0x2430 <fat_resize_file+0x78>
    27f0:	29 01       	movw	r4, r18
    27f2:	3a 01       	movw	r6, r20
    27f4:	a6 cf       	rjmp	.-180    	; 0x2742 <fat_resize_file+0x38a>
        fd->pos = size;
        fd->pos_cluster = 0;
    }

    return 1;
}
    27f6:	60 96       	adiw	r28, 0x10	; 16
    27f8:	0f b6       	in	r0, 0x3f	; 63
    27fa:	f8 94       	cli
    27fc:	de bf       	out	0x3e, r29	; 62
    27fe:	0f be       	out	0x3f, r0	; 63
    2800:	cd bf       	out	0x3d, r28	; 61
    2802:	df 91       	pop	r29
    2804:	cf 91       	pop	r28
    2806:	1f 91       	pop	r17
    2808:	0f 91       	pop	r16
    280a:	ff 90       	pop	r15
    280c:	ef 90       	pop	r14
    280e:	df 90       	pop	r13
    2810:	cf 90       	pop	r12
    2812:	bf 90       	pop	r11
    2814:	af 90       	pop	r10
    2816:	9f 90       	pop	r9
    2818:	8f 90       	pop	r8
    281a:	7f 90       	pop	r7
    281c:	6f 90       	pop	r6
    281e:	5f 90       	pop	r5
    2820:	4f 90       	pop	r4
    2822:	3f 90       	pop	r3
    2824:	2f 90       	pop	r2
    2826:	08 95       	ret

00002828 <fat_seek_file>:
 *                   to this location before it returns.
 * \param[in] whence Affects the way \c offset is interpreted, see above.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_seek_file(struct fat_file_struct* fd, int32_t* offset, uint8_t whence)
{
    2828:	af 92       	push	r10
    282a:	bf 92       	push	r11
    282c:	cf 92       	push	r12
    282e:	df 92       	push	r13
    2830:	ef 92       	push	r14
    2832:	ff 92       	push	r15
    2834:	0f 93       	push	r16
    2836:	1f 93       	push	r17
    2838:	cf 93       	push	r28
    283a:	df 93       	push	r29
    if(!fd || !offset)
    283c:	00 97       	sbiw	r24, 0x00	; 0
    283e:	09 f4       	brne	.+2      	; 0x2842 <fat_seek_file+0x1a>
    2840:	54 c0       	rjmp	.+168    	; 0x28ea <fat_seek_file+0xc2>
    2842:	61 15       	cp	r22, r1
    2844:	71 05       	cpc	r23, r1
    2846:	09 f4       	brne	.+2      	; 0x284a <fat_seek_file+0x22>
    2848:	52 c0       	rjmp	.+164    	; 0x28ee <fat_seek_file+0xc6>
        return 0;

    uint32_t new_pos = fd->pos;
    switch(whence)
    284a:	41 30       	cpi	r20, 0x01	; 1
    284c:	51 f0       	breq	.+20     	; 0x2862 <fat_seek_file+0x3a>
    284e:	18 f0       	brcs	.+6      	; 0x2856 <fat_seek_file+0x2e>
    2850:	42 30       	cpi	r20, 0x02	; 2
    2852:	b1 f0       	breq	.+44     	; 0x2880 <fat_seek_file+0x58>
    2854:	4e c0       	rjmp	.+156    	; 0x28f2 <fat_seek_file+0xca>
    {
        case FAT_SEEK_SET:
            new_pos = *offset;
    2856:	fb 01       	movw	r30, r22
    2858:	c0 80       	ld	r12, Z
    285a:	d1 80       	ldd	r13, Z+1	; 0x01
    285c:	e2 80       	ldd	r14, Z+2	; 0x02
    285e:	f3 80       	ldd	r15, Z+3	; 0x03
            break;
    2860:	1d c0       	rjmp	.+58     	; 0x289c <fat_seek_file+0x74>
uint8_t fat_seek_file(struct fat_file_struct* fd, int32_t* offset, uint8_t whence)
{
    if(!fd || !offset)
        return 0;

    uint32_t new_pos = fd->pos;
    2862:	fc 01       	movw	r30, r24
    2864:	c3 a8       	ldd	r12, Z+51	; 0x33
    2866:	d4 a8       	ldd	r13, Z+52	; 0x34
    2868:	e5 a8       	ldd	r14, Z+53	; 0x35
    286a:	f6 a8       	ldd	r15, Z+54	; 0x36
    {
        case FAT_SEEK_SET:
            new_pos = *offset;
            break;
        case FAT_SEEK_CUR:
            new_pos += *offset;
    286c:	fb 01       	movw	r30, r22
    286e:	00 81       	ld	r16, Z
    2870:	11 81       	ldd	r17, Z+1	; 0x01
    2872:	22 81       	ldd	r18, Z+2	; 0x02
    2874:	33 81       	ldd	r19, Z+3	; 0x03
    2876:	c0 0e       	add	r12, r16
    2878:	d1 1e       	adc	r13, r17
    287a:	e2 1e       	adc	r14, r18
    287c:	f3 1e       	adc	r15, r19
            break;
    287e:	0e c0       	rjmp	.+28     	; 0x289c <fat_seek_file+0x74>
        case FAT_SEEK_END:
            new_pos = fd->dir_entry.file_size + *offset;
    2880:	fc 01       	movw	r30, r24
    2882:	c7 a0       	ldd	r12, Z+39	; 0x27
    2884:	d0 a4       	ldd	r13, Z+40	; 0x28
    2886:	e1 a4       	ldd	r14, Z+41	; 0x29
    2888:	f2 a4       	ldd	r15, Z+42	; 0x2a
    288a:	fb 01       	movw	r30, r22
    288c:	00 81       	ld	r16, Z
    288e:	11 81       	ldd	r17, Z+1	; 0x01
    2890:	22 81       	ldd	r18, Z+2	; 0x02
    2892:	33 81       	ldd	r19, Z+3	; 0x03
    2894:	c0 0e       	add	r12, r16
    2896:	d1 1e       	adc	r13, r17
    2898:	e2 1e       	adc	r14, r18
    289a:	f3 1e       	adc	r15, r19
    289c:	5b 01       	movw	r10, r22
    289e:	ec 01       	movw	r28, r24
            break;
        default:
            return 0;
    }

    if(new_pos > fd->dir_entry.file_size
    28a0:	8f a1       	ldd	r24, Y+39	; 0x27
    28a2:	98 a5       	ldd	r25, Y+40	; 0x28
    28a4:	a9 a5       	ldd	r26, Y+41	; 0x29
    28a6:	ba a5       	ldd	r27, Y+42	; 0x2a
    28a8:	8c 15       	cp	r24, r12
    28aa:	9d 05       	cpc	r25, r13
    28ac:	ae 05       	cpc	r26, r14
    28ae:	bf 05       	cpc	r27, r15
    28b0:	38 f4       	brcc	.+14     	; 0x28c0 <fat_seek_file+0x98>
#if FAT_WRITE_SUPPORT
       && !fat_resize_file(fd, new_pos)
    28b2:	b7 01       	movw	r22, r14
    28b4:	a6 01       	movw	r20, r12
    28b6:	ce 01       	movw	r24, r28
    28b8:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <fat_resize_file>
    28bc:	88 23       	and	r24, r24
    28be:	d1 f0       	breq	.+52     	; 0x28f4 <fat_seek_file+0xcc>
#endif
       )
        return 0;

    fd->pos = new_pos;
    28c0:	97 01       	movw	r18, r14
    28c2:	86 01       	movw	r16, r12
    28c4:	cb aa       	std	Y+51, r12	; 0x33
    28c6:	1c ab       	std	Y+52, r17	; 0x34
    28c8:	2d ab       	std	Y+53, r18	; 0x35
    28ca:	3e ab       	std	Y+54, r19	; 0x36
    28cc:	1f aa       	std	Y+55, r1	; 0x37
    28ce:	18 ae       	std	Y+56, r1	; 0x38
    28d0:	19 ae       	std	Y+57, r1	; 0x39
    28d2:	1a ae       	std	Y+58, r1	; 0x3a
    fd->pos_cluster = 0;
    28d4:	1b ae       	std	Y+59, r1	; 0x3b
    28d6:	1c ae       	std	Y+60, r1	; 0x3c
    28d8:	1d ae       	std	Y+61, r1	; 0x3d
    28da:	1e ae       	std	Y+62, r1	; 0x3e

    *offset = (int32_t) new_pos;
    28dc:	f5 01       	movw	r30, r10
    28de:	c0 82       	st	Z, r12
    28e0:	d1 82       	std	Z+1, r13	; 0x01
    28e2:	e2 82       	std	Z+2, r14	; 0x02
    28e4:	f3 82       	std	Z+3, r15	; 0x03
    return 1;
    28e6:	81 e0       	ldi	r24, 0x01	; 1
    28e8:	05 c0       	rjmp	.+10     	; 0x28f4 <fat_seek_file+0xcc>
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_seek_file(struct fat_file_struct* fd, int32_t* offset, uint8_t whence)
{
    if(!fd || !offset)
        return 0;
    28ea:	80 e0       	ldi	r24, 0x00	; 0
    28ec:	03 c0       	rjmp	.+6      	; 0x28f4 <fat_seek_file+0xcc>
    28ee:	80 e0       	ldi	r24, 0x00	; 0
    28f0:	01 c0       	rjmp	.+2      	; 0x28f4 <fat_seek_file+0xcc>
            break;
        case FAT_SEEK_END:
            new_pos = fd->dir_entry.file_size + *offset;
            break;
        default:
            return 0;
    28f2:	80 e0       	ldi	r24, 0x00	; 0
    fd->pos = new_pos;
    fd->pos_cluster = 0;

    *offset = (int32_t) new_pos;
    return 1;
}
    28f4:	df 91       	pop	r29
    28f6:	cf 91       	pop	r28
    28f8:	1f 91       	pop	r17
    28fa:	0f 91       	pop	r16
    28fc:	ff 90       	pop	r15
    28fe:	ef 90       	pop	r14
    2900:	df 90       	pop	r13
    2902:	cf 90       	pop	r12
    2904:	bf 90       	pop	r11
    2906:	af 90       	pop	r10
    2908:	08 95       	ret

0000290a <fat_open_dir>:
 * \param[in] dir_entry The directory entry which stands for the directory to open.
 * \returns An opaque directory descriptor on success, 0 on failure.
 * \see fat_close_dir
 */
struct fat_dir_struct* fat_open_dir(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* dir_entry)
{
    290a:	cf 93       	push	r28
    290c:	df 93       	push	r29
    if(!fs || !dir_entry || !(dir_entry->attributes & FAT_ATTRIB_DIR))
    290e:	00 97       	sbiw	r24, 0x00	; 0
    2910:	b1 f0       	breq	.+44     	; 0x293e <fat_open_dir+0x34>
    2912:	61 15       	cp	r22, r1
    2914:	71 05       	cpc	r23, r1
    2916:	b1 f0       	breq	.+44     	; 0x2944 <fat_open_dir+0x3a>
    2918:	fb 01       	movw	r30, r22
    291a:	20 a1       	ldd	r18, Z+32	; 0x20
    291c:	24 ff       	sbrs	r18, 4
    291e:	15 c0       	rjmp	.+42     	; 0x294a <fat_open_dir+0x40>
#else
    struct fat_dir_struct* dd = fat_dir_handles;
    uint8_t i;
    for(i = 0; i < FAT_DIR_COUNT; ++i)
    {
        if(!dd->fs)
    2920:	20 91 bc 01 	lds	r18, 0x01BC	; 0x8001bc <__data_end>
    2924:	30 91 bd 01 	lds	r19, 0x01BD	; 0x8001bd <__data_end+0x1>
    2928:	23 2b       	or	r18, r19
    292a:	91 f0       	breq	.+36     	; 0x2950 <fat_open_dir+0x46>
    292c:	20 91 f5 01 	lds	r18, 0x01F5	; 0x8001f5 <__data_end+0x39>
    2930:	30 91 f6 01 	lds	r19, 0x01F6	; 0x8001f6 <__data_end+0x3a>
    2934:	23 2b       	or	r18, r19
    2936:	79 f0       	breq	.+30     	; 0x2956 <fat_open_dir+0x4c>
            break;

        ++dd;
    }
    if(i >= FAT_DIR_COUNT)
        return 0;
    2938:	80 e0       	ldi	r24, 0x00	; 0
    293a:	90 e0       	ldi	r25, 0x00	; 0
    293c:	25 c0       	rjmp	.+74     	; 0x2988 <fat_open_dir+0x7e>
 * \see fat_close_dir
 */
struct fat_dir_struct* fat_open_dir(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !dir_entry || !(dir_entry->attributes & FAT_ATTRIB_DIR))
        return 0;
    293e:	80 e0       	ldi	r24, 0x00	; 0
    2940:	90 e0       	ldi	r25, 0x00	; 0
    2942:	22 c0       	rjmp	.+68     	; 0x2988 <fat_open_dir+0x7e>
    2944:	80 e0       	ldi	r24, 0x00	; 0
    2946:	90 e0       	ldi	r25, 0x00	; 0
    2948:	1f c0       	rjmp	.+62     	; 0x2988 <fat_open_dir+0x7e>
    294a:	80 e0       	ldi	r24, 0x00	; 0
    294c:	90 e0       	ldi	r25, 0x00	; 0
    294e:	1c c0       	rjmp	.+56     	; 0x2988 <fat_open_dir+0x7e>
#else
    struct fat_dir_struct* dd = fat_dir_handles;
    uint8_t i;
    for(i = 0; i < FAT_DIR_COUNT; ++i)
    {
        if(!dd->fs)
    2950:	cc eb       	ldi	r28, 0xBC	; 188
    2952:	d1 e0       	ldi	r29, 0x01	; 1
    2954:	02 c0       	rjmp	.+4      	; 0x295a <fat_open_dir+0x50>
    2956:	c5 ef       	ldi	r28, 0xF5	; 245
    2958:	d1 e0       	ldi	r29, 0x01	; 1
    }
    if(i >= FAT_DIR_COUNT)
        return 0;
#endif
    
    memcpy(&dd->dir_entry, dir_entry, sizeof(*dir_entry));
    295a:	de 01       	movw	r26, r28
    295c:	12 96       	adiw	r26, 0x02	; 2
    295e:	21 e3       	ldi	r18, 0x31	; 49
    2960:	fb 01       	movw	r30, r22
    2962:	01 90       	ld	r0, Z+
    2964:	0d 92       	st	X+, r0
    2966:	2a 95       	dec	r18
    2968:	e1 f7       	brne	.-8      	; 0x2962 <fat_open_dir+0x58>
    dd->fs = fs;
    296a:	99 83       	std	Y+1, r25	; 0x01
    296c:	88 83       	st	Y, r24
    dd->entry_cluster = dir_entry->cluster;
    296e:	fb 01       	movw	r30, r22
    2970:	81 a1       	ldd	r24, Z+33	; 0x21
    2972:	92 a1       	ldd	r25, Z+34	; 0x22
    2974:	a3 a1       	ldd	r26, Z+35	; 0x23
    2976:	b4 a1       	ldd	r27, Z+36	; 0x24
    2978:	8b ab       	std	Y+51, r24	; 0x33
    297a:	9c ab       	std	Y+52, r25	; 0x34
    297c:	ad ab       	std	Y+53, r26	; 0x35
    297e:	be ab       	std	Y+54, r27	; 0x36
    dd->entry_offset = 0;
    2980:	18 ae       	std	Y+56, r1	; 0x38
    2982:	1f aa       	std	Y+55, r1	; 0x37

    return dd;
    2984:	8c 2f       	mov	r24, r28
    2986:	9d 2f       	mov	r25, r29
}
    2988:	df 91       	pop	r29
    298a:	cf 91       	pop	r28
    298c:	08 95       	ret

0000298e <fat_close_dir>:
 * \param[in] dd The directory descriptor to close.
 * \see fat_open_dir
 */
void fat_close_dir(struct fat_dir_struct* dd)
{
    if(dd)
    298e:	00 97       	sbiw	r24, 0x00	; 0
    2990:	19 f0       	breq	.+6      	; 0x2998 <fat_close_dir+0xa>
#if USE_DYNAMIC_MEMORY
        free(dd);
#else
        dd->fs = 0;
    2992:	fc 01       	movw	r30, r24
    2994:	11 82       	std	Z+1, r1	; 0x01
    2996:	10 82       	st	Z, r1
    2998:	08 95       	ret

0000299a <fat_reset_dir>:
 * \param[in] dd The directory handle to reset.
 * \returns 0 on failure, 1 on success.
 * \see fat_read_dir
 */
uint8_t fat_reset_dir(struct fat_dir_struct* dd)
{
    299a:	fc 01       	movw	r30, r24
    if(!dd)
    299c:	89 2b       	or	r24, r25
    299e:	61 f0       	breq	.+24     	; 0x29b8 <fat_reset_dir+0x1e>
        return 0;

    dd->entry_cluster = dd->dir_entry.cluster;
    29a0:	83 a1       	ldd	r24, Z+35	; 0x23
    29a2:	94 a1       	ldd	r25, Z+36	; 0x24
    29a4:	a5 a1       	ldd	r26, Z+37	; 0x25
    29a6:	b6 a1       	ldd	r27, Z+38	; 0x26
    29a8:	83 ab       	std	Z+51, r24	; 0x33
    29aa:	94 ab       	std	Z+52, r25	; 0x34
    29ac:	a5 ab       	std	Z+53, r26	; 0x35
    29ae:	b6 ab       	std	Z+54, r27	; 0x36
    dd->entry_offset = 0;
    29b0:	10 ae       	std	Z+56, r1	; 0x38
    29b2:	17 aa       	std	Z+55, r1	; 0x37
    return 1;
    29b4:	81 e0       	ldi	r24, 0x01	; 1
    29b6:	08 95       	ret
 * \see fat_read_dir
 */
uint8_t fat_reset_dir(struct fat_dir_struct* dd)
{
    if(!dd)
        return 0;
    29b8:	80 e0       	ldi	r24, 0x00	; 0

    dd->entry_cluster = dd->dir_entry.cluster;
    dd->entry_offset = 0;
    return 1;
}
    29ba:	08 95       	ret

000029bc <fat_read_dir>:
 * \param[out] dir_entry Pointer to a buffer into which to write the directory entry information.
 * \returns 0 on failure, 1 on success.
 * \see fat_reset_dir
 */
uint8_t fat_read_dir(struct fat_dir_struct* dd, struct fat_dir_entry_struct* dir_entry)
{
    29bc:	2f 92       	push	r2
    29be:	3f 92       	push	r3
    29c0:	4f 92       	push	r4
    29c2:	5f 92       	push	r5
    29c4:	6f 92       	push	r6
    29c6:	7f 92       	push	r7
    29c8:	8f 92       	push	r8
    29ca:	9f 92       	push	r9
    29cc:	af 92       	push	r10
    29ce:	bf 92       	push	r11
    29d0:	cf 92       	push	r12
    29d2:	df 92       	push	r13
    29d4:	ef 92       	push	r14
    29d6:	ff 92       	push	r15
    29d8:	0f 93       	push	r16
    29da:	1f 93       	push	r17
    29dc:	cf 93       	push	r28
    29de:	df 93       	push	r29
    29e0:	cd b7       	in	r28, 0x3d	; 61
    29e2:	de b7       	in	r29, 0x3e	; 62
    29e4:	ee 97       	sbiw	r28, 0x3e	; 62
    29e6:	0f b6       	in	r0, 0x3f	; 63
    29e8:	f8 94       	cli
    29ea:	de bf       	out	0x3e, r29	; 62
    29ec:	0f be       	out	0x3f, r0	; 63
    29ee:	cd bf       	out	0x3d, r28	; 61
    if(!dd || !dir_entry)
    29f0:	00 97       	sbiw	r24, 0x00	; 0
    29f2:	09 f4       	brne	.+2      	; 0x29f6 <fat_read_dir+0x3a>
    29f4:	49 c1       	rjmp	.+658    	; 0x2c88 <fat_read_dir+0x2cc>
    29f6:	61 15       	cp	r22, r1
    29f8:	71 05       	cpc	r23, r1
    29fa:	09 f4       	brne	.+2      	; 0x29fe <fat_read_dir+0x42>
    29fc:	47 c1       	rjmp	.+654    	; 0x2c8c <fat_read_dir+0x2d0>
    29fe:	9e af       	std	Y+62, r25	; 0x3e
    2a00:	8d af       	std	Y+61, r24	; 0x3d
        return 0;

    /* get current position of directory handle */
    struct fat_fs_struct* fs = dd->fs;
    2a02:	fc 01       	movw	r30, r24
    2a04:	40 80       	ld	r4, Z
    2a06:	51 80       	ldd	r5, Z+1	; 0x01
    const struct fat_header_struct* header = &fs->header;
    uint16_t cluster_size = header->cluster_size;
    2a08:	f2 01       	movw	r30, r4
    2a0a:	20 8c       	ldd	r2, Z+24	; 0x18
    2a0c:	31 8c       	ldd	r3, Z+25	; 0x19
    cluster_t cluster_num = dd->entry_cluster;
    uint16_t cluster_offset = dd->entry_offset;
    2a0e:	fc 01       	movw	r30, r24
    2a10:	67 a8       	ldd	r6, Z+55	; 0x37
    2a12:	70 ac       	ldd	r7, Z+56	; 0x38
    struct fat_read_dir_callback_arg arg;

    if(cluster_offset >= cluster_size)
    2a14:	62 14       	cp	r6, r2
    2a16:	73 04       	cpc	r7, r3
    2a18:	20 f0       	brcs	.+8      	; 0x2a22 <fat_read_dir+0x66>
        /* The latest call hit the border of the last cluster in
         * the chain, but it still returned a directory entry.
         * So we now reset the handle and signal the caller the
         * end of the listing.
         */
        fat_reset_dir(dd);
    2a1a:	0e 94 cd 14 	call	0x299a	; 0x299a <fat_reset_dir>
        return 0;
    2a1e:	91 2c       	mov	r9, r1
    2a20:	38 c1       	rjmp	.+624    	; 0x2c92 <fat_read_dir+0x2d6>

    /* get current position of directory handle */
    struct fat_fs_struct* fs = dd->fs;
    const struct fat_header_struct* header = &fs->header;
    uint16_t cluster_size = header->cluster_size;
    cluster_t cluster_num = dd->entry_cluster;
    2a22:	ed ad       	ldd	r30, Y+61	; 0x3d
    2a24:	fe ad       	ldd	r31, Y+62	; 0x3e
    2a26:	03 a9       	ldd	r16, Z+51	; 0x33
    2a28:	14 a9       	ldd	r17, Z+52	; 0x34
    2a2a:	25 a9       	ldd	r18, Z+53	; 0x35
    2a2c:	36 a9       	ldd	r19, Z+54	; 0x36
    2a2e:	09 ab       	std	Y+49, r16	; 0x31
    2a30:	1a ab       	std	Y+50, r17	; 0x32
    2a32:	2b ab       	std	Y+51, r18	; 0x33
    2a34:	3c ab       	std	Y+52, r19	; 0x34
        fat_reset_dir(dd);
        return 0;
    }

    /* reset callback arguments */
    memset(&arg, 0, sizeof(arg));
    2a36:	9e 01       	movw	r18, r28
    2a38:	2f 5f       	subi	r18, 0xFF	; 255
    2a3a:	3f 4f       	sbci	r19, 0xFF	; 255
    2a3c:	86 e0       	ldi	r24, 0x06	; 6
    2a3e:	f9 01       	movw	r30, r18
    2a40:	11 92       	st	Z+, r1
    2a42:	8a 95       	dec	r24
    2a44:	e9 f7       	brne	.-6      	; 0x2a40 <fat_read_dir+0x84>
    memset(dir_entry, 0, sizeof(*dir_entry));
    2a46:	81 e3       	ldi	r24, 0x31	; 49
    2a48:	fb 01       	movw	r30, r22
    2a4a:	11 92       	st	Z+, r1
    2a4c:	8a 95       	dec	r24
    2a4e:	e9 f7       	brne	.-6      	; 0x2a4a <fat_read_dir+0x8e>
    arg.dir_entry = dir_entry;
    2a50:	7a 83       	std	Y+2, r23	; 0x02
    2a52:	69 83       	std	Y+1, r22	; 0x01

    /* check if we read from the root directory */
    if(cluster_num == 0)
    2a54:	09 a9       	ldd	r16, Y+49	; 0x31
    2a56:	1a a9       	ldd	r17, Y+50	; 0x32
    2a58:	2b a9       	ldd	r18, Y+51	; 0x33
    2a5a:	3c a9       	ldd	r19, Y+52	; 0x34
    2a5c:	01 2b       	or	r16, r17
    2a5e:	02 2b       	or	r16, r18
    2a60:	03 2b       	or	r16, r19
    2a62:	09 f0       	breq	.+2      	; 0x2a66 <fat_read_dir+0xaa>
    2a64:	e7 c0       	rjmp	.+462    	; 0x2c34 <fat_read_dir+0x278>
    {
#if FAT_FAT32_SUPPORT
        if(fs->partition->type == PARTITION_TYPE_FAT32)
    2a66:	d2 01       	movw	r26, r4
    2a68:	ed 91       	ld	r30, X+
    2a6a:	fc 91       	ld	r31, X
    2a6c:	11 97       	sbiw	r26, 0x01	; 1
    2a6e:	80 85       	ldd	r24, Z+8	; 0x08
    2a70:	8b 30       	cpi	r24, 0x0B	; 11
    2a72:	59 f4       	brne	.+22     	; 0x2a8a <fat_read_dir+0xce>
            cluster_num = header->root_dir_cluster;
    2a74:	9a 96       	adiw	r26, 0x2a	; 42
    2a76:	0d 91       	ld	r16, X+
    2a78:	1d 91       	ld	r17, X+
    2a7a:	2d 91       	ld	r18, X+
    2a7c:	3c 91       	ld	r19, X
    2a7e:	9d 97       	sbiw	r26, 0x2d	; 45
    2a80:	09 ab       	std	Y+49, r16	; 0x31
    2a82:	1a ab       	std	Y+50, r17	; 0x32
    2a84:	2b ab       	std	Y+51, r18	; 0x33
    2a86:	3c ab       	std	Y+52, r19	; 0x34
    2a88:	d5 c0       	rjmp	.+426    	; 0x2c34 <fat_read_dir+0x278>
        else
#endif
            cluster_size = header->cluster_zero_offset - header->root_dir_offset;
    2a8a:	f2 01       	movw	r30, r4
    2a8c:	22 8d       	ldd	r18, Z+26	; 0x1a
    2a8e:	33 8d       	ldd	r19, Z+27	; 0x1b
    2a90:	82 a1       	ldd	r24, Z+34	; 0x22
    2a92:	93 a1       	ldd	r25, Z+35	; 0x23
    2a94:	19 01       	movw	r2, r18
    2a96:	28 1a       	sub	r2, r24
    2a98:	39 0a       	sbc	r3, r25
    2a9a:	cc c0       	rjmp	.+408    	; 0x2c34 <fat_read_dir+0x278>
    /* read entries */
    uint8_t buffer[32];
    while(!arg.finished)
    {
        /* read directory entries up to the cluster border */
        uint16_t cluster_left = cluster_size - cluster_offset;
    2a9c:	81 01       	movw	r16, r2
    2a9e:	06 19       	sub	r16, r6
    2aa0:	17 09       	sbc	r17, r7
    2aa2:	18 ab       	std	Y+48, r17	; 0x30
    2aa4:	0f a7       	std	Y+47, r16	; 0x2f
        offset_t pos = cluster_offset;
    2aa6:	93 01       	movw	r18, r6
    2aa8:	40 e0       	ldi	r20, 0x00	; 0
    2aaa:	50 e0       	ldi	r21, 0x00	; 0
    2aac:	60 e0       	ldi	r22, 0x00	; 0
    2aae:	70 e0       	ldi	r23, 0x00	; 0
    2ab0:	cb 01       	movw	r24, r22
    2ab2:	6f a2       	std	Y+39, r6	; 0x27
    2ab4:	38 a7       	std	Y+40, r19	; 0x28
    2ab6:	49 a7       	std	Y+41, r20	; 0x29
    2ab8:	5a a7       	std	Y+42, r21	; 0x2a
    2aba:	6b a7       	std	Y+43, r22	; 0x2b
    2abc:	7c a7       	std	Y+44, r23	; 0x2c
    2abe:	8d a7       	std	Y+45, r24	; 0x2d
    2ac0:	9e a7       	std	Y+46, r25	; 0x2e
        if(cluster_num == 0)
    2ac2:	49 a9       	ldd	r20, Y+49	; 0x31
    2ac4:	5a a9       	ldd	r21, Y+50	; 0x32
    2ac6:	6b a9       	ldd	r22, Y+51	; 0x33
    2ac8:	7c a9       	ldd	r23, Y+52	; 0x34
    2aca:	45 2b       	or	r20, r21
    2acc:	46 2b       	or	r20, r22
    2ace:	47 2b       	or	r20, r23
    2ad0:	09 f5       	brne	.+66     	; 0x2b14 <fat_read_dir+0x158>
            pos += header->root_dir_offset;
    2ad2:	40 e0       	ldi	r20, 0x00	; 0
    2ad4:	50 e0       	ldi	r21, 0x00	; 0
    2ad6:	60 e0       	ldi	r22, 0x00	; 0
    2ad8:	70 e0       	ldi	r23, 0x00	; 0
    2ada:	80 e0       	ldi	r24, 0x00	; 0
    2adc:	90 e0       	ldi	r25, 0x00	; 0
    2ade:	d2 01       	movw	r26, r4
    2ae0:	92 96       	adiw	r26, 0x22	; 34
    2ae2:	ac 90       	ld	r10, X
    2ae4:	92 97       	sbiw	r26, 0x22	; 34
    2ae6:	93 96       	adiw	r26, 0x23	; 35
    2ae8:	bc 90       	ld	r11, X
    2aea:	93 97       	sbiw	r26, 0x23	; 35
    2aec:	94 96       	adiw	r26, 0x24	; 36
    2aee:	cc 90       	ld	r12, X
    2af0:	94 97       	sbiw	r26, 0x24	; 36
    2af2:	95 96       	adiw	r26, 0x25	; 37
    2af4:	dc 90       	ld	r13, X
    2af6:	95 97       	sbiw	r26, 0x25	; 37
    2af8:	96 96       	adiw	r26, 0x26	; 38
    2afa:	ec 90       	ld	r14, X
    2afc:	96 97       	sbiw	r26, 0x26	; 38
    2afe:	97 96       	adiw	r26, 0x27	; 39
    2b00:	fc 90       	ld	r15, X
    2b02:	97 97       	sbiw	r26, 0x27	; 39
    2b04:	98 96       	adiw	r26, 0x28	; 40
    2b06:	0c 91       	ld	r16, X
    2b08:	98 97       	sbiw	r26, 0x28	; 40
    2b0a:	99 96       	adiw	r26, 0x29	; 41
    2b0c:	1c 91       	ld	r17, X
    2b0e:	0e 94 66 27 	call	0x4ecc	; 0x4ecc <__adddi3>
    2b12:	52 c0       	rjmp	.+164    	; 0x2bb8 <fat_read_dir+0x1fc>
 * \param[in] cluster_num The cluster whose offset to calculate.
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
    2b14:	41 14       	cp	r4, r1
    2b16:	51 04       	cpc	r5, r1
    2b18:	a1 f1       	breq	.+104    	; 0x2b82 <fat_read_dir+0x1c6>
    2b1a:	09 a9       	ldd	r16, Y+49	; 0x31
    2b1c:	1a a9       	ldd	r17, Y+50	; 0x32
    2b1e:	2b a9       	ldd	r18, Y+51	; 0x33
    2b20:	3c a9       	ldd	r19, Y+52	; 0x34
    2b22:	02 30       	cpi	r16, 0x02	; 2
    2b24:	11 05       	cpc	r17, r1
    2b26:	21 05       	cpc	r18, r1
    2b28:	31 05       	cpc	r19, r1
    2b2a:	a0 f1       	brcs	.+104    	; 0x2b94 <fat_read_dir+0x1d8>
        return 0;

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
    2b2c:	d2 01       	movw	r26, r4
    2b2e:	58 96       	adiw	r26, 0x18	; 24
    2b30:	0d 91       	ld	r16, X+
    2b32:	1c 91       	ld	r17, X
    2b34:	59 97       	sbiw	r26, 0x19	; 25
    2b36:	a0 2e       	mov	r10, r16
    2b38:	b1 2e       	mov	r11, r17
    2b3a:	c1 2c       	mov	r12, r1
    2b3c:	d1 2c       	mov	r13, r1
    2b3e:	e1 2c       	mov	r14, r1
    2b40:	f1 2c       	mov	r15, r1
    2b42:	00 e0       	ldi	r16, 0x00	; 0
    2b44:	10 e0       	ldi	r17, 0x00	; 0
    2b46:	2d a9       	ldd	r18, Y+53	; 0x35
    2b48:	3e a9       	ldd	r19, Y+54	; 0x36
    2b4a:	4f a9       	ldd	r20, Y+55	; 0x37
    2b4c:	58 ad       	ldd	r21, Y+56	; 0x38
    2b4e:	60 e0       	ldi	r22, 0x00	; 0
    2b50:	70 e0       	ldi	r23, 0x00	; 0
    2b52:	80 e0       	ldi	r24, 0x00	; 0
    2b54:	90 e0       	ldi	r25, 0x00	; 0
    2b56:	0e 94 d6 26 	call	0x4dac	; 0x4dac <__muldi3>
    2b5a:	f2 01       	movw	r30, r4
    2b5c:	a2 8c       	ldd	r10, Z+26	; 0x1a
    2b5e:	b3 8c       	ldd	r11, Z+27	; 0x1b
    2b60:	c4 8c       	ldd	r12, Z+28	; 0x1c
    2b62:	d5 8c       	ldd	r13, Z+29	; 0x1d
    2b64:	e6 8c       	ldd	r14, Z+30	; 0x1e
    2b66:	f7 8c       	ldd	r15, Z+31	; 0x1f
    2b68:	00 a1       	ldd	r16, Z+32	; 0x20
    2b6a:	11 a1       	ldd	r17, Z+33	; 0x21
    2b6c:	0e 94 66 27 	call	0x4ecc	; 0x4ecc <__adddi3>
    2b70:	a2 2e       	mov	r10, r18
    2b72:	b3 2e       	mov	r11, r19
    2b74:	c4 2e       	mov	r12, r20
    2b76:	d5 2e       	mov	r13, r21
    2b78:	e6 2e       	mov	r14, r22
    2b7a:	f7 2e       	mov	r15, r23
    2b7c:	08 2f       	mov	r16, r24
    2b7e:	19 2f       	mov	r17, r25
    2b80:	11 c0       	rjmp	.+34     	; 0x2ba4 <fat_read_dir+0x1e8>
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
        return 0;
    2b82:	a1 2c       	mov	r10, r1
    2b84:	b1 2c       	mov	r11, r1
    2b86:	c1 2c       	mov	r12, r1
    2b88:	d1 2c       	mov	r13, r1
    2b8a:	e1 2c       	mov	r14, r1
    2b8c:	f1 2c       	mov	r15, r1
    2b8e:	00 e0       	ldi	r16, 0x00	; 0
    2b90:	10 e0       	ldi	r17, 0x00	; 0
    2b92:	08 c0       	rjmp	.+16     	; 0x2ba4 <fat_read_dir+0x1e8>
    2b94:	a1 2c       	mov	r10, r1
    2b96:	b1 2c       	mov	r11, r1
    2b98:	c1 2c       	mov	r12, r1
    2b9a:	d1 2c       	mov	r13, r1
    2b9c:	e1 2c       	mov	r14, r1
    2b9e:	f1 2c       	mov	r15, r1
    2ba0:	00 e0       	ldi	r16, 0x00	; 0
    2ba2:	10 e0       	ldi	r17, 0x00	; 0
        uint16_t cluster_left = cluster_size - cluster_offset;
        offset_t pos = cluster_offset;
        if(cluster_num == 0)
            pos += header->root_dir_offset;
        else
            pos += fat_cluster_offset(fs, cluster_num);
    2ba4:	2f a1       	ldd	r18, Y+39	; 0x27
    2ba6:	38 a5       	ldd	r19, Y+40	; 0x28
    2ba8:	49 a5       	ldd	r20, Y+41	; 0x29
    2baa:	5a a5       	ldd	r21, Y+42	; 0x2a
    2bac:	6b a5       	ldd	r22, Y+43	; 0x2b
    2bae:	7c a5       	ldd	r23, Y+44	; 0x2c
    2bb0:	8d a5       	ldd	r24, Y+45	; 0x2d
    2bb2:	9e a5       	ldd	r25, Y+46	; 0x2e
    2bb4:	0e 94 66 27 	call	0x4ecc	; 0x4ecc <__adddi3>

        arg.bytes_read = 0;
    2bb8:	1c 82       	std	Y+4, r1	; 0x04
    2bba:	1b 82       	std	Y+3, r1	; 0x03
        if(!fs->partition->device_read_interval(pos,
    2bbc:	d2 01       	movw	r26, r4
    2bbe:	ed 91       	ld	r30, X+
    2bc0:	fc 91       	ld	r31, X
    2bc2:	02 80       	ldd	r0, Z+2	; 0x02
    2bc4:	f3 81       	ldd	r31, Z+3	; 0x03
    2bc6:	e0 2d       	mov	r30, r0
    2bc8:	8e 01       	movw	r16, r28
    2bca:	0f 5f       	subi	r16, 0xFF	; 255
    2bcc:	1f 4f       	sbci	r17, 0xFF	; 255
    2bce:	48 01       	movw	r8, r16
    2bd0:	0f 2e       	mov	r0, r31
    2bd2:	f8 eb       	ldi	r31, 0xB8	; 184
    2bd4:	af 2e       	mov	r10, r31
    2bd6:	f6 e0       	ldi	r31, 0x06	; 6
    2bd8:	bf 2e       	mov	r11, r31
    2bda:	f0 2d       	mov	r31, r0
    2bdc:	cf a4       	ldd	r12, Y+47	; 0x2f
    2bde:	d8 a8       	ldd	r13, Y+48	; 0x30
    2be0:	68 94       	set
    2be2:	ee 24       	eor	r14, r14
    2be4:	e5 f8       	bld	r14, 5
    2be6:	f1 2c       	mov	r15, r1
    2be8:	0a 5f       	subi	r16, 0xFA	; 250
    2bea:	1f 4f       	sbci	r17, 0xFF	; 255
    2bec:	09 95       	icall
    2bee:	88 23       	and	r24, r24
    2bf0:	09 f4       	brne	.+2      	; 0x2bf4 <fat_read_dir+0x238>
    2bf2:	4e c0       	rjmp	.+156    	; 0x2c90 <fat_read_dir+0x2d4>
                                                fat_dir_entry_read_callback,
                                                &arg)
          )
            return 0;

        cluster_offset += arg.bytes_read;
    2bf4:	8b 81       	ldd	r24, Y+3	; 0x03
    2bf6:	9c 81       	ldd	r25, Y+4	; 0x04
    2bf8:	68 0e       	add	r6, r24
    2bfa:	79 1e       	adc	r7, r25

        if(cluster_offset >= cluster_size)
    2bfc:	62 14       	cp	r6, r2
    2bfe:	73 04       	cpc	r7, r3
    2c00:	68 f1       	brcs	.+90     	; 0x2c5c <fat_read_dir+0x2a0>
        {
            /* we reached the cluster border and switch to the next cluster */

            /* get number of next cluster */
            if((cluster_num = fat_get_next_cluster(fs, cluster_num)) != 0)
    2c02:	49 a9       	ldd	r20, Y+49	; 0x31
    2c04:	5a a9       	ldd	r21, Y+50	; 0x32
    2c06:	6b a9       	ldd	r22, Y+51	; 0x33
    2c08:	7c a9       	ldd	r23, Y+52	; 0x34
    2c0a:	c2 01       	movw	r24, r4
    2c0c:	0e 94 28 01 	call	0x250	; 0x250 <fat_get_next_cluster>
    2c10:	69 ab       	std	Y+49, r22	; 0x31
    2c12:	7a ab       	std	Y+50, r23	; 0x32
    2c14:	8b ab       	std	Y+51, r24	; 0x33
    2c16:	9c ab       	std	Y+52, r25	; 0x34
    2c18:	67 2b       	or	r22, r23
    2c1a:	68 2b       	or	r22, r24
    2c1c:	69 2b       	or	r22, r25
    2c1e:	41 f4       	brne	.+16     	; 0x2c30 <fat_read_dir+0x274>
                cluster_offset = 0;
                continue;
            }

            /* we are at the end of the cluster chain */
            if(!arg.finished)
    2c20:	9e 80       	ldd	r9, Y+6	; 0x06
    2c22:	91 10       	cpse	r9, r1
    2c24:	1f c0       	rjmp	.+62     	; 0x2c64 <fat_read_dir+0x2a8>
            {
                /* directory entry not found, reset directory handle */
                fat_reset_dir(dd);
    2c26:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c28:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c2a:	0e 94 cd 14 	call	0x299a	; 0x299a <fat_reset_dir>
                return 0;
    2c2e:	31 c0       	rjmp	.+98     	; 0x2c92 <fat_read_dir+0x2d6>
            /* we reached the cluster border and switch to the next cluster */

            /* get number of next cluster */
            if((cluster_num = fat_get_next_cluster(fs, cluster_num)) != 0)
            {
                cluster_offset = 0;
    2c30:	61 2c       	mov	r6, r1
    2c32:	71 2c       	mov	r7, r1
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
        return 0;

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
    2c34:	89 a9       	ldd	r24, Y+49	; 0x31
    2c36:	9a a9       	ldd	r25, Y+50	; 0x32
    2c38:	ab a9       	ldd	r26, Y+51	; 0x33
    2c3a:	bc a9       	ldd	r27, Y+52	; 0x34
    2c3c:	02 97       	sbiw	r24, 0x02	; 2
    2c3e:	a1 09       	sbc	r26, r1
    2c40:	b1 09       	sbc	r27, r1
    2c42:	8c 01       	movw	r16, r24
    2c44:	9d 01       	movw	r18, r26
    2c46:	40 e0       	ldi	r20, 0x00	; 0
    2c48:	50 e0       	ldi	r21, 0x00	; 0
    2c4a:	ba 01       	movw	r22, r20
    2c4c:	8d ab       	std	Y+53, r24	; 0x35
    2c4e:	1e ab       	std	Y+54, r17	; 0x36
    2c50:	2f ab       	std	Y+55, r18	; 0x37
    2c52:	38 af       	std	Y+56, r19	; 0x38
    2c54:	49 af       	std	Y+57, r20	; 0x39
    2c56:	5a af       	std	Y+58, r21	; 0x3a
    2c58:	6b af       	std	Y+59, r22	; 0x3b
    2c5a:	7c af       	std	Y+60, r23	; 0x3c
            cluster_size = header->cluster_zero_offset - header->root_dir_offset;
    }

    /* read entries */
    uint8_t buffer[32];
    while(!arg.finished)
    2c5c:	8e 81       	ldd	r24, Y+6	; 0x06
    2c5e:	88 23       	and	r24, r24
    2c60:	09 f4       	brne	.+2      	; 0x2c64 <fat_read_dir+0x2a8>
    2c62:	1c cf       	rjmp	.-456    	; 0x2a9c <fat_read_dir+0xe0>

            break;
        }
    }

    dd->entry_cluster = cluster_num;
    2c64:	29 a9       	ldd	r18, Y+49	; 0x31
    2c66:	3a a9       	ldd	r19, Y+50	; 0x32
    2c68:	4b a9       	ldd	r20, Y+51	; 0x33
    2c6a:	5c a9       	ldd	r21, Y+52	; 0x34
    2c6c:	ad ad       	ldd	r26, Y+61	; 0x3d
    2c6e:	be ad       	ldd	r27, Y+62	; 0x3e
    2c70:	d3 96       	adiw	r26, 0x33	; 51
    2c72:	2d 93       	st	X+, r18
    2c74:	3d 93       	st	X+, r19
    2c76:	4d 93       	st	X+, r20
    2c78:	5c 93       	st	X, r21
    2c7a:	d6 97       	sbiw	r26, 0x36	; 54
    dd->entry_offset = cluster_offset;
    2c7c:	d8 96       	adiw	r26, 0x38	; 56
    2c7e:	7c 92       	st	X, r7
    2c80:	6e 92       	st	-X, r6
    2c82:	d7 97       	sbiw	r26, 0x37	; 55

    return arg.finished;
    2c84:	9e 80       	ldd	r9, Y+6	; 0x06
    2c86:	05 c0       	rjmp	.+10     	; 0x2c92 <fat_read_dir+0x2d6>
 * \see fat_reset_dir
 */
uint8_t fat_read_dir(struct fat_dir_struct* dd, struct fat_dir_entry_struct* dir_entry)
{
    if(!dd || !dir_entry)
        return 0;
    2c88:	91 2c       	mov	r9, r1
    2c8a:	03 c0       	rjmp	.+6      	; 0x2c92 <fat_read_dir+0x2d6>
    2c8c:	91 2c       	mov	r9, r1
    2c8e:	01 c0       	rjmp	.+2      	; 0x2c92 <fat_read_dir+0x2d6>
    2c90:	98 2e       	mov	r9, r24

    dd->entry_cluster = cluster_num;
    dd->entry_offset = cluster_offset;

    return arg.finished;
}
    2c92:	89 2d       	mov	r24, r9
    2c94:	ee 96       	adiw	r28, 0x3e	; 62
    2c96:	0f b6       	in	r0, 0x3f	; 63
    2c98:	f8 94       	cli
    2c9a:	de bf       	out	0x3e, r29	; 62
    2c9c:	0f be       	out	0x3f, r0	; 63
    2c9e:	cd bf       	out	0x3d, r28	; 61
    2ca0:	df 91       	pop	r29
    2ca2:	cf 91       	pop	r28
    2ca4:	1f 91       	pop	r17
    2ca6:	0f 91       	pop	r16
    2ca8:	ff 90       	pop	r15
    2caa:	ef 90       	pop	r14
    2cac:	df 90       	pop	r13
    2cae:	cf 90       	pop	r12
    2cb0:	bf 90       	pop	r11
    2cb2:	af 90       	pop	r10
    2cb4:	9f 90       	pop	r9
    2cb6:	8f 90       	pop	r8
    2cb8:	7f 90       	pop	r7
    2cba:	6f 90       	pop	r6
    2cbc:	5f 90       	pop	r5
    2cbe:	4f 90       	pop	r4
    2cc0:	3f 90       	pop	r3
    2cc2:	2f 90       	pop	r2
    2cc4:	08 95       	ret

00002cc6 <fat_get_dir_entry_of_path>:
 * \param[out] dir_entry The directory entry to fill.
 * \returns 0 on failure, 1 on success.
 * \see fat_read_dir
 */
uint8_t fat_get_dir_entry_of_path(struct fat_fs_struct* fs, const char* path, struct fat_dir_entry_struct* dir_entry)
{
    2cc6:	4f 92       	push	r4
    2cc8:	5f 92       	push	r5
    2cca:	6f 92       	push	r6
    2ccc:	7f 92       	push	r7
    2cce:	8f 92       	push	r8
    2cd0:	9f 92       	push	r9
    2cd2:	af 92       	push	r10
    2cd4:	bf 92       	push	r11
    2cd6:	cf 92       	push	r12
    2cd8:	df 92       	push	r13
    2cda:	ef 92       	push	r14
    2cdc:	ff 92       	push	r15
    2cde:	0f 93       	push	r16
    2ce0:	1f 93       	push	r17
    2ce2:	cf 93       	push	r28
    2ce4:	df 93       	push	r29
    2ce6:	4c 01       	movw	r8, r24
    2ce8:	6b 01       	movw	r12, r22
    2cea:	ea 01       	movw	r28, r20
    if(!fs || !path || path[0] == '\0' || !dir_entry)
    2cec:	89 2b       	or	r24, r25
    2cee:	09 f4       	brne	.+2      	; 0x2cf2 <fat_get_dir_entry_of_path+0x2c>
    2cf0:	76 c0       	rjmp	.+236    	; 0x2dde <fat_get_dir_entry_of_path+0x118>
    2cf2:	61 15       	cp	r22, r1
    2cf4:	71 05       	cpc	r23, r1
    2cf6:	09 f4       	brne	.+2      	; 0x2cfa <fat_get_dir_entry_of_path+0x34>
    2cf8:	74 c0       	rjmp	.+232    	; 0x2de2 <fat_get_dir_entry_of_path+0x11c>
    2cfa:	fb 01       	movw	r30, r22
    2cfc:	80 81       	ld	r24, Z
    2cfe:	88 23       	and	r24, r24
    2d00:	09 f4       	brne	.+2      	; 0x2d04 <fat_get_dir_entry_of_path+0x3e>
    2d02:	71 c0       	rjmp	.+226    	; 0x2de6 <fat_get_dir_entry_of_path+0x120>
    2d04:	20 97       	sbiw	r28, 0x00	; 0
    2d06:	09 f4       	brne	.+2      	; 0x2d0a <fat_get_dir_entry_of_path+0x44>
    2d08:	70 c0       	rjmp	.+224    	; 0x2dea <fat_get_dir_entry_of_path+0x124>
        return 0;

    if(path[0] == '/')
    2d0a:	8f 32       	cpi	r24, 0x2F	; 47
    2d0c:	19 f4       	brne	.+6      	; 0x2d14 <fat_get_dir_entry_of_path+0x4e>
        ++path;
    2d0e:	ff ef       	ldi	r31, 0xFF	; 255
    2d10:	cf 1a       	sub	r12, r31
    2d12:	df 0a       	sbc	r13, r31

    /* begin with the root directory */
    memset(dir_entry, 0, sizeof(*dir_entry));
    2d14:	81 e3       	ldi	r24, 0x31	; 49
    2d16:	fe 01       	movw	r30, r28
    2d18:	11 92       	st	Z+, r1
    2d1a:	8a 95       	dec	r24
    2d1c:	e9 f7       	brne	.-6      	; 0x2d18 <fat_get_dir_entry_of_path+0x52>
    dir_entry->attributes = FAT_ATTRIB_DIR;
    2d1e:	80 e1       	ldi	r24, 0x10	; 16
    2d20:	88 a3       	std	Y+32, r24	; 0x20

    while(1)
    {
        if(path[0] == '\0')
    2d22:	f6 01       	movw	r30, r12
    2d24:	80 81       	ld	r24, Z
    2d26:	88 23       	and	r24, r24
    2d28:	09 f4       	brne	.+2      	; 0x2d2c <fat_get_dir_entry_of_path+0x66>
    2d2a:	61 c0       	rjmp	.+194    	; 0x2dee <fat_get_dir_entry_of_path+0x128>
            if((strlen(dir_entry->long_name) != length_to_sep ||
                strncmp(path, dir_entry->long_name, length_to_sep) != 0))
                continue;

            fat_close_dir(dd);
            dd = 0;
    2d2c:	41 2c       	mov	r4, r1
    2d2e:	51 2c       	mov	r5, r1
    while(1)
    {
        if(path[0] == '\0')
            return 1;

        struct fat_dir_struct* dd = fat_open_dir(fs, dir_entry);
    2d30:	be 01       	movw	r22, r28
    2d32:	c4 01       	movw	r24, r8
    2d34:	0e 94 85 14 	call	0x290a	; 0x290a <fat_open_dir>
    2d38:	8c 01       	movw	r16, r24
        if(!dd)
    2d3a:	89 2b       	or	r24, r25
    2d3c:	09 f4       	brne	.+2      	; 0x2d40 <fat_get_dir_entry_of_path+0x7a>
    2d3e:	59 c0       	rjmp	.+178    	; 0x2df2 <fat_get_dir_entry_of_path+0x12c>
            break;

        /* extract the next hierarchy we will search for */
        const char* sub_path = strchr(path, '/');
    2d40:	6f e2       	ldi	r22, 0x2F	; 47
    2d42:	70 e0       	ldi	r23, 0x00	; 0
    2d44:	c6 01       	movw	r24, r12
    2d46:	0e 94 a9 27 	call	0x4f52	; 0x4f52 <strchr>
        uint8_t length_to_sep;
        if(sub_path)
    2d4a:	00 97       	sbiw	r24, 0x00	; 0
    2d4c:	41 f0       	breq	.+16     	; 0x2d5e <fat_get_dir_entry_of_path+0x98>
        {
            length_to_sep = sub_path - path;
    2d4e:	e8 2e       	mov	r14, r24
    2d50:	ec 18       	sub	r14, r12
            ++sub_path;
    2d52:	5c 01       	movw	r10, r24
    2d54:	ff ef       	ldi	r31, 0xFF	; 255
    2d56:	af 1a       	sub	r10, r31
    2d58:	bf 0a       	sbc	r11, r31
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
        {
            /* check if we have found the next hierarchy */
            if((strlen(dir_entry->long_name) != length_to_sep ||
    2d5a:	f1 2c       	mov	r15, r1
    2d5c:	2d c0       	rjmp	.+90     	; 0x2db8 <fat_get_dir_entry_of_path+0xf2>
            length_to_sep = sub_path - path;
            ++sub_path;
        }
        else
        {
            length_to_sep = strlen(path);
    2d5e:	f6 01       	movw	r30, r12
    2d60:	01 90       	ld	r0, Z+
    2d62:	00 20       	and	r0, r0
    2d64:	e9 f7       	brne	.-6      	; 0x2d60 <fat_get_dir_entry_of_path+0x9a>
    2d66:	31 97       	sbiw	r30, 0x01	; 1
    2d68:	ec 19       	sub	r30, r12
    2d6a:	fd 09       	sbc	r31, r13
    2d6c:	ee 2e       	mov	r14, r30
            sub_path = path + length_to_sep;
    2d6e:	56 01       	movw	r10, r12
    2d70:	ae 0e       	add	r10, r30
    2d72:	b1 1c       	adc	r11, r1
    2d74:	f2 cf       	rjmp	.-28     	; 0x2d5a <fat_get_dir_entry_of_path+0x94>
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
        {
            /* check if we have found the next hierarchy */
            if((strlen(dir_entry->long_name) != length_to_sep ||
    2d76:	fe 01       	movw	r30, r28
    2d78:	01 90       	ld	r0, Z+
    2d7a:	00 20       	and	r0, r0
    2d7c:	e9 f7       	brne	.-6      	; 0x2d78 <fat_get_dir_entry_of_path+0xb2>
    2d7e:	31 97       	sbiw	r30, 0x01	; 1
    2d80:	3f 01       	movw	r6, r30
    2d82:	6c 1a       	sub	r6, r28
    2d84:	7d 0a       	sbc	r7, r29
    2d86:	6e 14       	cp	r6, r14
    2d88:	7f 04       	cpc	r7, r15
    2d8a:	b1 f4       	brne	.+44     	; 0x2db8 <fat_get_dir_entry_of_path+0xf2>
                strncmp(path, dir_entry->long_name, length_to_sep) != 0))
    2d8c:	a3 01       	movw	r20, r6
    2d8e:	be 01       	movw	r22, r28
    2d90:	c6 01       	movw	r24, r12
    2d92:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <strncmp>
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
        {
            /* check if we have found the next hierarchy */
            if((strlen(dir_entry->long_name) != length_to_sep ||
    2d96:	89 2b       	or	r24, r25
    2d98:	79 f4       	brne	.+30     	; 0x2db8 <fat_get_dir_entry_of_path+0xf2>
                strncmp(path, dir_entry->long_name, length_to_sep) != 0))
                continue;

            fat_close_dir(dd);
    2d9a:	c8 01       	movw	r24, r16
    2d9c:	0e 94 c7 14 	call	0x298e	; 0x298e <fat_close_dir>
            dd = 0;

            if(path[length_to_sep] == '\0')
    2da0:	f6 01       	movw	r30, r12
    2da2:	e6 0d       	add	r30, r6
    2da4:	f7 1d       	adc	r31, r7
    2da6:	80 81       	ld	r24, Z
    2da8:	88 23       	and	r24, r24
    2daa:	29 f1       	breq	.+74     	; 0x2df6 <fat_get_dir_entry_of_path+0x130>
    2dac:	98 a1       	ldd	r25, Y+32	; 0x20
                /* we iterated through the whole path and have found the file */
                return 1;

            if(dir_entry->attributes & FAT_ATTRIB_DIR)
    2dae:	89 2f       	mov	r24, r25
    2db0:	80 71       	andi	r24, 0x10	; 16
    2db2:	94 fd       	sbrc	r25, 4
    2db4:	08 c0       	rjmp	.+16     	; 0x2dc6 <fat_get_dir_entry_of_path+0x100>
    2db6:	20 c0       	rjmp	.+64     	; 0x2df8 <fat_get_dir_entry_of_path+0x132>
            length_to_sep = strlen(path);
            sub_path = path + length_to_sep;
        }
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
    2db8:	be 01       	movw	r22, r28
    2dba:	c8 01       	movw	r24, r16
    2dbc:	0e 94 de 14 	call	0x29bc	; 0x29bc <fat_read_dir>
    2dc0:	81 11       	cpse	r24, r1
    2dc2:	d9 cf       	rjmp	.-78     	; 0x2d76 <fat_get_dir_entry_of_path+0xb0>
    2dc4:	03 c0       	rjmp	.+6      	; 0x2dcc <fat_get_dir_entry_of_path+0x106>
                return 1;

            if(dir_entry->attributes & FAT_ATTRIB_DIR)
            {
                /* we found a parent directory of the file we are searching for */
                path = sub_path;
    2dc6:	65 01       	movw	r12, r10
            if((strlen(dir_entry->long_name) != length_to_sep ||
                strncmp(path, dir_entry->long_name, length_to_sep) != 0))
                continue;

            fat_close_dir(dd);
            dd = 0;
    2dc8:	04 2d       	mov	r16, r4
    2dca:	15 2d       	mov	r17, r5

            /* a parent of the file exists, but not the file itself */
            return 0;
        }

        fat_close_dir(dd);
    2dcc:	c8 01       	movw	r24, r16
    2dce:	0e 94 c7 14 	call	0x298e	; 0x298e <fat_close_dir>
    memset(dir_entry, 0, sizeof(*dir_entry));
    dir_entry->attributes = FAT_ATTRIB_DIR;

    while(1)
    {
        if(path[0] == '\0')
    2dd2:	f6 01       	movw	r30, r12
    2dd4:	80 81       	ld	r24, Z
    2dd6:	81 11       	cpse	r24, r1
    2dd8:	ab cf       	rjmp	.-170    	; 0x2d30 <fat_get_dir_entry_of_path+0x6a>
            return 1;
    2dda:	81 e0       	ldi	r24, 0x01	; 1
    2ddc:	0d c0       	rjmp	.+26     	; 0x2df8 <fat_get_dir_entry_of_path+0x132>
 * \see fat_read_dir
 */
uint8_t fat_get_dir_entry_of_path(struct fat_fs_struct* fs, const char* path, struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !path || path[0] == '\0' || !dir_entry)
        return 0;
    2dde:	80 e0       	ldi	r24, 0x00	; 0
    2de0:	0b c0       	rjmp	.+22     	; 0x2df8 <fat_get_dir_entry_of_path+0x132>
    2de2:	80 e0       	ldi	r24, 0x00	; 0
    2de4:	09 c0       	rjmp	.+18     	; 0x2df8 <fat_get_dir_entry_of_path+0x132>
    2de6:	80 e0       	ldi	r24, 0x00	; 0
    2de8:	07 c0       	rjmp	.+14     	; 0x2df8 <fat_get_dir_entry_of_path+0x132>
    2dea:	80 e0       	ldi	r24, 0x00	; 0
    2dec:	05 c0       	rjmp	.+10     	; 0x2df8 <fat_get_dir_entry_of_path+0x132>
    dir_entry->attributes = FAT_ATTRIB_DIR;

    while(1)
    {
        if(path[0] == '\0')
            return 1;
    2dee:	81 e0       	ldi	r24, 0x01	; 1
    2df0:	03 c0       	rjmp	.+6      	; 0x2df8 <fat_get_dir_entry_of_path+0x132>
        }

        fat_close_dir(dd);
    }
    
    return 0;
    2df2:	80 e0       	ldi	r24, 0x00	; 0
    2df4:	01 c0       	rjmp	.+2      	; 0x2df8 <fat_get_dir_entry_of_path+0x132>
            fat_close_dir(dd);
            dd = 0;

            if(path[length_to_sep] == '\0')
                /* we iterated through the whole path and have found the file */
                return 1;
    2df6:	81 e0       	ldi	r24, 0x01	; 1

        fat_close_dir(dd);
    }
    
    return 0;
}
    2df8:	df 91       	pop	r29
    2dfa:	cf 91       	pop	r28
    2dfc:	1f 91       	pop	r17
    2dfe:	0f 91       	pop	r16
    2e00:	ff 90       	pop	r15
    2e02:	ef 90       	pop	r14
    2e04:	df 90       	pop	r13
    2e06:	cf 90       	pop	r12
    2e08:	bf 90       	pop	r11
    2e0a:	af 90       	pop	r10
    2e0c:	9f 90       	pop	r9
    2e0e:	8f 90       	pop	r8
    2e10:	7f 90       	pop	r7
    2e12:	6f 90       	pop	r6
    2e14:	5f 90       	pop	r5
    2e16:	4f 90       	pop	r4
    2e18:	08 95       	ret

00002e1a <fat_create_file>:
 * \param[out] dir_entry The directory entry to fill for the new (or existing) file.
 * \returns 0 on failure, 1 on success, 2 if the file already existed.
 * \see fat_delete_file
 */
uint8_t fat_create_file(struct fat_dir_struct* parent, const char* file, struct fat_dir_entry_struct* dir_entry)
{
    2e1a:	af 92       	push	r10
    2e1c:	bf 92       	push	r11
    2e1e:	cf 92       	push	r12
    2e20:	df 92       	push	r13
    2e22:	ef 92       	push	r14
    2e24:	ff 92       	push	r15
    2e26:	1f 93       	push	r17
    2e28:	cf 93       	push	r28
    2e2a:	df 93       	push	r29
    if(!parent || !file || !file[0] || !dir_entry)
    2e2c:	00 97       	sbiw	r24, 0x00	; 0
    2e2e:	09 f4       	brne	.+2      	; 0x2e32 <fat_create_file+0x18>
    2e30:	49 c0       	rjmp	.+146    	; 0x2ec4 <fat_create_file+0xaa>
    2e32:	61 15       	cp	r22, r1
    2e34:	71 05       	cpc	r23, r1
    2e36:	09 f4       	brne	.+2      	; 0x2e3a <fat_create_file+0x20>
    2e38:	47 c0       	rjmp	.+142    	; 0x2ec8 <fat_create_file+0xae>
    2e3a:	fb 01       	movw	r30, r22
    2e3c:	20 81       	ld	r18, Z
    2e3e:	22 23       	and	r18, r18
    2e40:	09 f4       	brne	.+2      	; 0x2e44 <fat_create_file+0x2a>
    2e42:	44 c0       	rjmp	.+136    	; 0x2ecc <fat_create_file+0xb2>
    2e44:	ea 01       	movw	r28, r20
    2e46:	7b 01       	movw	r14, r22
    2e48:	6c 01       	movw	r12, r24
    2e4a:	20 97       	sbiw	r28, 0x00	; 0
    2e4c:	09 f4       	brne	.+2      	; 0x2e50 <fat_create_file+0x36>
    2e4e:	40 c0       	rjmp	.+128    	; 0x2ed0 <fat_create_file+0xb6>
        return 0;

    /* check if the file already exists */
    while(1)
    {
        if(!fat_read_dir(parent, dir_entry))
    2e50:	be 01       	movw	r22, r28
    2e52:	c6 01       	movw	r24, r12
    2e54:	0e 94 de 14 	call	0x29bc	; 0x29bc <fat_read_dir>
    2e58:	18 2f       	mov	r17, r24
    2e5a:	88 23       	and	r24, r24
    2e5c:	59 f0       	breq	.+22     	; 0x2e74 <fat_create_file+0x5a>
            break;

        if(strcmp(file, dir_entry->long_name) == 0)
    2e5e:	be 01       	movw	r22, r28
    2e60:	c7 01       	movw	r24, r14
    2e62:	0e 94 b4 27 	call	0x4f68	; 0x4f68 <strcmp>
    2e66:	89 2b       	or	r24, r25
    2e68:	99 f7       	brne	.-26     	; 0x2e50 <fat_create_file+0x36>
        {
            fat_reset_dir(parent);
    2e6a:	c6 01       	movw	r24, r12
    2e6c:	0e 94 cd 14 	call	0x299a	; 0x299a <fat_reset_dir>
            return 2;
    2e70:	12 e0       	ldi	r17, 0x02	; 2
    2e72:	2f c0       	rjmp	.+94     	; 0x2ed2 <fat_create_file+0xb8>
        }
    }

    struct fat_fs_struct* fs = parent->fs;
    2e74:	f6 01       	movw	r30, r12
    2e76:	a0 80       	ld	r10, Z
    2e78:	b1 80       	ldd	r11, Z+1	; 0x01

    /* prepare directory entry with values already known */
    memset(dir_entry, 0, sizeof(*dir_entry));
    2e7a:	81 e3       	ldi	r24, 0x31	; 49
    2e7c:	fe 01       	movw	r30, r28
    2e7e:	11 92       	st	Z+, r1
    2e80:	8a 95       	dec	r24
    2e82:	e9 f7       	brne	.-6      	; 0x2e7e <fat_create_file+0x64>
    strncpy(dir_entry->long_name, file, sizeof(dir_entry->long_name) - 1);
    2e84:	4f e1       	ldi	r20, 0x1F	; 31
    2e86:	50 e0       	ldi	r21, 0x00	; 0
    2e88:	b7 01       	movw	r22, r14
    2e8a:	ce 01       	movw	r24, r28
    2e8c:	0e 94 db 27 	call	0x4fb6	; 0x4fb6 <strncpy>

    /* find place where to store directory entry */
    if(!(dir_entry->entry_offset = fat_find_offset_for_dir_entry(fs, parent, dir_entry)))
    2e90:	ae 01       	movw	r20, r28
    2e92:	b6 01       	movw	r22, r12
    2e94:	c5 01       	movw	r24, r10
    2e96:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <fat_find_offset_for_dir_entry>
    2e9a:	29 a7       	std	Y+41, r18	; 0x29
    2e9c:	3a a7       	std	Y+42, r19	; 0x2a
    2e9e:	4b a7       	std	Y+43, r20	; 0x2b
    2ea0:	5c a7       	std	Y+44, r21	; 0x2c
    2ea2:	6d a7       	std	Y+45, r22	; 0x2d
    2ea4:	7e a7       	std	Y+46, r23	; 0x2e
    2ea6:	8f a7       	std	Y+47, r24	; 0x2f
    2ea8:	98 ab       	std	Y+48, r25	; 0x30
    2eaa:	a0 e0       	ldi	r26, 0x00	; 0
    2eac:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <__cmpdi2_s8>
    2eb0:	81 f0       	breq	.+32     	; 0x2ed2 <fat_create_file+0xb8>
        return 0;
    
    /* write directory entry to disk */
    if(!fat_write_dir_entry(fs, dir_entry))
    2eb2:	be 01       	movw	r22, r28
    2eb4:	c5 01       	movw	r24, r10
    2eb6:	0e 94 2d 08 	call	0x105a	; 0x105a <fat_write_dir_entry>
 * \see fat_delete_file
 */
uint8_t fat_create_file(struct fat_dir_struct* parent, const char* file, struct fat_dir_entry_struct* dir_entry)
{
    if(!parent || !file || !file[0] || !dir_entry)
        return 0;
    2eba:	11 e0       	ldi	r17, 0x01	; 1
    2ebc:	81 11       	cpse	r24, r1
    2ebe:	09 c0       	rjmp	.+18     	; 0x2ed2 <fat_create_file+0xb8>
    2ec0:	10 e0       	ldi	r17, 0x00	; 0
    2ec2:	07 c0       	rjmp	.+14     	; 0x2ed2 <fat_create_file+0xb8>
    2ec4:	10 e0       	ldi	r17, 0x00	; 0
    2ec6:	05 c0       	rjmp	.+10     	; 0x2ed2 <fat_create_file+0xb8>
    2ec8:	10 e0       	ldi	r17, 0x00	; 0
    2eca:	03 c0       	rjmp	.+6      	; 0x2ed2 <fat_create_file+0xb8>
    2ecc:	10 e0       	ldi	r17, 0x00	; 0
    2ece:	01 c0       	rjmp	.+2      	; 0x2ed2 <fat_create_file+0xb8>
    2ed0:	10 e0       	ldi	r17, 0x00	; 0
    /* write directory entry to disk */
    if(!fat_write_dir_entry(fs, dir_entry))
        return 0;
    
    return 1;
}
    2ed2:	81 2f       	mov	r24, r17
    2ed4:	df 91       	pop	r29
    2ed6:	cf 91       	pop	r28
    2ed8:	1f 91       	pop	r17
    2eda:	ff 90       	pop	r15
    2edc:	ef 90       	pop	r14
    2ede:	df 90       	pop	r13
    2ee0:	cf 90       	pop	r12
    2ee2:	bf 90       	pop	r11
    2ee4:	af 90       	pop	r10
    2ee6:	08 95       	ret

00002ee8 <fat_delete_file>:
 * \param[in] dir_entry The directory entry of the file to delete.
 * \returns 0 on failure, 1 on success.
 * \see fat_create_file
 */
uint8_t fat_delete_file(struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry)
{
    2ee8:	3f 92       	push	r3
    2eea:	4f 92       	push	r4
    2eec:	5f 92       	push	r5
    2eee:	6f 92       	push	r6
    2ef0:	7f 92       	push	r7
    2ef2:	8f 92       	push	r8
    2ef4:	9f 92       	push	r9
    2ef6:	af 92       	push	r10
    2ef8:	bf 92       	push	r11
    2efa:	cf 92       	push	r12
    2efc:	df 92       	push	r13
    2efe:	ef 92       	push	r14
    2f00:	ff 92       	push	r15
    2f02:	0f 93       	push	r16
    2f04:	1f 93       	push	r17
    2f06:	cf 93       	push	r28
    2f08:	df 93       	push	r29
    2f0a:	cd b7       	in	r28, 0x3d	; 61
    2f0c:	de b7       	in	r29, 0x3e	; 62
    2f0e:	2e 97       	sbiw	r28, 0x0e	; 14
    2f10:	0f b6       	in	r0, 0x3f	; 63
    2f12:	f8 94       	cli
    2f14:	de bf       	out	0x3e, r29	; 62
    2f16:	0f be       	out	0x3f, r0	; 63
    2f18:	cd bf       	out	0x3d, r28	; 61
    2f1a:	3c 01       	movw	r6, r24
    2f1c:	fb 01       	movw	r30, r22
    if(!fs || !dir_entry)
    2f1e:	89 2b       	or	r24, r25
    2f20:	09 f4       	brne	.+2      	; 0x2f24 <fat_delete_file+0x3c>
    2f22:	77 c0       	rjmp	.+238    	; 0x3012 <fat_delete_file+0x12a>
    2f24:	30 97       	sbiw	r30, 0x00	; 0
    2f26:	09 f4       	brne	.+2      	; 0x2f2a <fat_delete_file+0x42>
    2f28:	76 c0       	rjmp	.+236    	; 0x3016 <fat_delete_file+0x12e>
        return 0;

    /* get offset of the file's directory entry */
    offset_t dir_entry_offset = dir_entry->entry_offset;
    2f2a:	d1 a4       	ldd	r13, Z+41	; 0x29
    2f2c:	c2 a4       	ldd	r12, Z+42	; 0x2a
    2f2e:	b3 a4       	ldd	r11, Z+43	; 0x2b
    2f30:	a4 a4       	ldd	r10, Z+44	; 0x2c
    2f32:	95 a4       	ldd	r9, Z+45	; 0x2d
    2f34:	86 a4       	ldd	r8, Z+46	; 0x2e
    2f36:	57 a4       	ldd	r5, Z+47	; 0x2f
    2f38:	40 a8       	ldd	r4, Z+48	; 0x30
    if(!dir_entry_offset)
    2f3a:	2d 2d       	mov	r18, r13
    2f3c:	3c 2d       	mov	r19, r12
    2f3e:	4b 2d       	mov	r20, r11
    2f40:	5a 2d       	mov	r21, r10
    2f42:	69 2d       	mov	r22, r9
    2f44:	78 2d       	mov	r23, r8
    2f46:	85 2d       	mov	r24, r5
    2f48:	94 2d       	mov	r25, r4
    2f4a:	a0 e0       	ldi	r26, 0x00	; 0
    2f4c:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <__cmpdi2_s8>
    2f50:	09 f4       	brne	.+2      	; 0x2f54 <fat_delete_file+0x6c>
    2f52:	63 c0       	rjmp	.+198    	; 0x301a <fat_delete_file+0x132>
    2f54:	fe 87       	std	Y+14, r31	; 0x0e
    2f56:	ed 87       	std	Y+13, r30	; 0x0d
        /* read directory entry */
        if(!fs->partition->device_read(dir_entry_offset, buffer, sizeof(buffer)))
            return 0;
        
        /* mark the directory entry as deleted */
        buffer[0] = FAT_DIRENTRY_DELETED;
    2f58:	0f 2e       	mov	r0, r31
    2f5a:	f5 ee       	ldi	r31, 0xE5	; 229
    2f5c:	3f 2e       	mov	r3, r31
    2f5e:	f0 2d       	mov	r31, r0
#if FAT_LFN_SUPPORT
    uint8_t buffer[12];
    while(1)
    {
        /* read directory entry */
        if(!fs->partition->device_read(dir_entry_offset, buffer, sizeof(buffer)))
    2f60:	d3 01       	movw	r26, r6
    2f62:	ed 91       	ld	r30, X+
    2f64:	fc 91       	ld	r31, X
    2f66:	01 90       	ld	r0, Z+
    2f68:	f0 81       	ld	r31, Z
    2f6a:	e0 2d       	mov	r30, r0
    2f6c:	0f 2e       	mov	r0, r31
    2f6e:	fc e0       	ldi	r31, 0x0C	; 12
    2f70:	ef 2e       	mov	r14, r31
    2f72:	f1 2c       	mov	r15, r1
    2f74:	f0 2d       	mov	r31, r0
    2f76:	8e 01       	movw	r16, r28
    2f78:	0f 5f       	subi	r16, 0xFF	; 255
    2f7a:	1f 4f       	sbci	r17, 0xFF	; 255
    2f7c:	2d 2d       	mov	r18, r13
    2f7e:	3c 2d       	mov	r19, r12
    2f80:	4b 2d       	mov	r20, r11
    2f82:	5a 2d       	mov	r21, r10
    2f84:	69 2d       	mov	r22, r9
    2f86:	78 2d       	mov	r23, r8
    2f88:	85 2d       	mov	r24, r5
    2f8a:	94 2d       	mov	r25, r4
    2f8c:	09 95       	icall
    2f8e:	88 23       	and	r24, r24
    2f90:	09 f4       	brne	.+2      	; 0x2f94 <fat_delete_file+0xac>
    2f92:	44 c0       	rjmp	.+136    	; 0x301c <fat_delete_file+0x134>
            return 0;
        
        /* mark the directory entry as deleted */
        buffer[0] = FAT_DIRENTRY_DELETED;
    2f94:	39 82       	std	Y+1, r3	; 0x01
        
        /* write back entry */
        if(!fs->partition->device_write(dir_entry_offset, buffer, sizeof(buffer)))
    2f96:	d3 01       	movw	r26, r6
    2f98:	ed 91       	ld	r30, X+
    2f9a:	fc 91       	ld	r31, X
    2f9c:	04 80       	ldd	r0, Z+4	; 0x04
    2f9e:	f5 81       	ldd	r31, Z+5	; 0x05
    2fa0:	e0 2d       	mov	r30, r0
    2fa2:	2d 2d       	mov	r18, r13
    2fa4:	3c 2d       	mov	r19, r12
    2fa6:	4b 2d       	mov	r20, r11
    2fa8:	5a 2d       	mov	r21, r10
    2faa:	69 2d       	mov	r22, r9
    2fac:	78 2d       	mov	r23, r8
    2fae:	85 2d       	mov	r24, r5
    2fb0:	94 2d       	mov	r25, r4
    2fb2:	09 95       	icall
    2fb4:	88 23       	and	r24, r24
    2fb6:	91 f1       	breq	.+100    	; 0x301c <fat_delete_file+0x134>
            return 0;

        /* check if we deleted the whole entry */
        if(buffer[11] != 0x0f)
    2fb8:	8c 85       	ldd	r24, Y+12	; 0x0c
    2fba:	8f 30       	cpi	r24, 0x0F	; 15
    2fbc:	a1 f4       	brne	.+40     	; 0x2fe6 <fat_delete_file+0xfe>
            break;

        dir_entry_offset += 32;
    2fbe:	2d 2d       	mov	r18, r13
    2fc0:	3c 2d       	mov	r19, r12
    2fc2:	4b 2d       	mov	r20, r11
    2fc4:	5a 2d       	mov	r21, r10
    2fc6:	69 2d       	mov	r22, r9
    2fc8:	78 2d       	mov	r23, r8
    2fca:	85 2d       	mov	r24, r5
    2fcc:	94 2d       	mov	r25, r4
    2fce:	a0 e2       	ldi	r26, 0x20	; 32
    2fd0:	0e 94 6f 27 	call	0x4ede	; 0x4ede <__adddi3_s8>
    2fd4:	d2 2e       	mov	r13, r18
    2fd6:	c3 2e       	mov	r12, r19
    2fd8:	b4 2e       	mov	r11, r20
    2fda:	a5 2e       	mov	r10, r21
    2fdc:	96 2e       	mov	r9, r22
    2fde:	87 2e       	mov	r8, r23
    2fe0:	58 2e       	mov	r5, r24
    2fe2:	49 2e       	mov	r4, r25
    }
    2fe4:	bd cf       	rjmp	.-134    	; 0x2f60 <fat_delete_file+0x78>
#endif

    /* We deleted the directory entry. The next thing to do is
     * marking all occupied clusters as free.
     */
    return (dir_entry->cluster == 0 || fat_free_clusters(fs, dir_entry->cluster));
    2fe6:	ed 85       	ldd	r30, Y+13	; 0x0d
    2fe8:	fe 85       	ldd	r31, Y+14	; 0x0e
    2fea:	41 a1       	ldd	r20, Z+33	; 0x21
    2fec:	52 a1       	ldd	r21, Z+34	; 0x22
    2fee:	63 a1       	ldd	r22, Z+35	; 0x23
    2ff0:	74 a1       	ldd	r23, Z+36	; 0x24
    2ff2:	41 15       	cp	r20, r1
    2ff4:	51 05       	cpc	r21, r1
    2ff6:	61 05       	cpc	r22, r1
    2ff8:	71 05       	cpc	r23, r1
    2ffa:	49 f0       	breq	.+18     	; 0x300e <fat_delete_file+0x126>
    2ffc:	c3 01       	movw	r24, r6
    2ffe:	0e 94 da 01 	call	0x3b4	; 0x3b4 <fat_free_clusters>
    3002:	91 e0       	ldi	r25, 0x01	; 1
    3004:	81 11       	cpse	r24, r1
    3006:	01 c0       	rjmp	.+2      	; 0x300a <fat_delete_file+0x122>
    3008:	90 e0       	ldi	r25, 0x00	; 0
    300a:	89 2f       	mov	r24, r25
    300c:	07 c0       	rjmp	.+14     	; 0x301c <fat_delete_file+0x134>
    300e:	81 e0       	ldi	r24, 0x01	; 1
    3010:	05 c0       	rjmp	.+10     	; 0x301c <fat_delete_file+0x134>
 * \see fat_create_file
 */
uint8_t fat_delete_file(struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !dir_entry)
        return 0;
    3012:	80 e0       	ldi	r24, 0x00	; 0
    3014:	03 c0       	rjmp	.+6      	; 0x301c <fat_delete_file+0x134>
    3016:	80 e0       	ldi	r24, 0x00	; 0
    3018:	01 c0       	rjmp	.+2      	; 0x301c <fat_delete_file+0x134>

    /* get offset of the file's directory entry */
    offset_t dir_entry_offset = dir_entry->entry_offset;
    if(!dir_entry_offset)
        return 0;
    301a:	80 e0       	ldi	r24, 0x00	; 0

    /* We deleted the directory entry. The next thing to do is
     * marking all occupied clusters as free.
     */
    return (dir_entry->cluster == 0 || fat_free_clusters(fs, dir_entry->cluster));
}
    301c:	2e 96       	adiw	r28, 0x0e	; 14
    301e:	0f b6       	in	r0, 0x3f	; 63
    3020:	f8 94       	cli
    3022:	de bf       	out	0x3e, r29	; 62
    3024:	0f be       	out	0x3f, r0	; 63
    3026:	cd bf       	out	0x3d, r28	; 61
    3028:	df 91       	pop	r29
    302a:	cf 91       	pop	r28
    302c:	1f 91       	pop	r17
    302e:	0f 91       	pop	r16
    3030:	ff 90       	pop	r15
    3032:	ef 90       	pop	r14
    3034:	df 90       	pop	r13
    3036:	cf 90       	pop	r12
    3038:	bf 90       	pop	r11
    303a:	af 90       	pop	r10
    303c:	9f 90       	pop	r9
    303e:	8f 90       	pop	r8
    3040:	7f 90       	pop	r7
    3042:	6f 90       	pop	r6
    3044:	5f 90       	pop	r5
    3046:	4f 90       	pop	r4
    3048:	3f 90       	pop	r3
    304a:	08 95       	ret

0000304c <lcd_read>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
    304c:	cf 93       	push	r28
    304e:	88 23       	and	r24, r24
    3050:	31 f0       	breq	.+12     	; 0x305e <lcd_read+0x12>
    3052:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <dataport>
    3056:	81 60       	ori	r24, 0x01	; 1
    3058:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <dataport>
    305c:	05 c0       	rjmp	.+10     	; 0x3068 <lcd_read+0x1c>
    305e:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <dataport>
    3062:	8e 7f       	andi	r24, 0xFE	; 254
    3064:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <dataport>
    3068:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <dataport>
    306c:	82 60       	ori	r24, 0x02	; 2
    306e:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <dataport>
    3072:	60 91 9f 02 	lds	r22, 0x029F	; 0x80029f <dataport>
    3076:	80 e0       	ldi	r24, 0x00	; 0
    3078:	0e 94 0f 20 	call	0x401e	; 0x401e <pcf8574_setoutput>
    307c:	62 e0       	ldi	r22, 0x02	; 2
    307e:	80 e0       	ldi	r24, 0x00	; 0
    3080:	0e 94 50 20 	call	0x40a0	; 0x40a0 <pcf8574_setoutputpinhigh>
    3084:	00 c0       	rjmp	.+0      	; 0x3086 <lcd_read+0x3a>
    3086:	64 e0       	ldi	r22, 0x04	; 4
    3088:	80 e0       	ldi	r24, 0x00	; 0
    308a:	0e 94 69 20 	call	0x40d2	; 0x40d2 <pcf8574_getinputpin>
    308e:	81 11       	cpse	r24, r1
    3090:	02 c0       	rjmp	.+4      	; 0x3096 <lcd_read+0x4a>
    3092:	c0 e1       	ldi	r28, 0x10	; 16
    3094:	01 c0       	rjmp	.+2      	; 0x3098 <lcd_read+0x4c>
    3096:	c0 e0       	ldi	r28, 0x00	; 0
    3098:	65 e0       	ldi	r22, 0x05	; 5
    309a:	80 e0       	ldi	r24, 0x00	; 0
    309c:	0e 94 69 20 	call	0x40d2	; 0x40d2 <pcf8574_getinputpin>
    30a0:	81 11       	cpse	r24, r1
    30a2:	01 c0       	rjmp	.+2      	; 0x30a6 <lcd_read+0x5a>
    30a4:	c0 62       	ori	r28, 0x20	; 32
    30a6:	66 e0       	ldi	r22, 0x06	; 6
    30a8:	80 e0       	ldi	r24, 0x00	; 0
    30aa:	0e 94 69 20 	call	0x40d2	; 0x40d2 <pcf8574_getinputpin>
    30ae:	81 11       	cpse	r24, r1
    30b0:	01 c0       	rjmp	.+2      	; 0x30b4 <lcd_read+0x68>
    30b2:	c0 64       	ori	r28, 0x40	; 64
    30b4:	67 e0       	ldi	r22, 0x07	; 7
    30b6:	80 e0       	ldi	r24, 0x00	; 0
    30b8:	0e 94 69 20 	call	0x40d2	; 0x40d2 <pcf8574_getinputpin>
    30bc:	81 11       	cpse	r24, r1
    30be:	01 c0       	rjmp	.+2      	; 0x30c2 <lcd_read+0x76>
    30c0:	c0 68       	ori	r28, 0x80	; 128
    30c2:	62 e0       	ldi	r22, 0x02	; 2
    30c4:	80 e0       	ldi	r24, 0x00	; 0
    30c6:	0e 94 54 20 	call	0x40a8	; 0x40a8 <pcf8574_setoutputpinlow>
    30ca:	00 c0       	rjmp	.+0      	; 0x30cc <lcd_read+0x80>
    30cc:	62 e0       	ldi	r22, 0x02	; 2
    30ce:	80 e0       	ldi	r24, 0x00	; 0
    30d0:	0e 94 50 20 	call	0x40a0	; 0x40a0 <pcf8574_setoutputpinhigh>
    30d4:	00 c0       	rjmp	.+0      	; 0x30d6 <lcd_read+0x8a>
    30d6:	64 e0       	ldi	r22, 0x04	; 4
    30d8:	80 e0       	ldi	r24, 0x00	; 0
    30da:	0e 94 69 20 	call	0x40d2	; 0x40d2 <pcf8574_getinputpin>
    30de:	81 11       	cpse	r24, r1
    30e0:	01 c0       	rjmp	.+2      	; 0x30e4 <lcd_read+0x98>
    30e2:	c1 60       	ori	r28, 0x01	; 1
    30e4:	65 e0       	ldi	r22, 0x05	; 5
    30e6:	80 e0       	ldi	r24, 0x00	; 0
    30e8:	0e 94 69 20 	call	0x40d2	; 0x40d2 <pcf8574_getinputpin>
    30ec:	81 11       	cpse	r24, r1
    30ee:	01 c0       	rjmp	.+2      	; 0x30f2 <lcd_read+0xa6>
    30f0:	c2 60       	ori	r28, 0x02	; 2
    30f2:	66 e0       	ldi	r22, 0x06	; 6
    30f4:	80 e0       	ldi	r24, 0x00	; 0
    30f6:	0e 94 69 20 	call	0x40d2	; 0x40d2 <pcf8574_getinputpin>
    30fa:	81 11       	cpse	r24, r1
    30fc:	01 c0       	rjmp	.+2      	; 0x3100 <lcd_read+0xb4>
    30fe:	c4 60       	ori	r28, 0x04	; 4
    3100:	67 e0       	ldi	r22, 0x07	; 7
    3102:	80 e0       	ldi	r24, 0x00	; 0
    3104:	0e 94 69 20 	call	0x40d2	; 0x40d2 <pcf8574_getinputpin>
    3108:	81 11       	cpse	r24, r1
    310a:	01 c0       	rjmp	.+2      	; 0x310e <lcd_read+0xc2>
    310c:	c8 60       	ori	r28, 0x08	; 8
    310e:	62 e0       	ldi	r22, 0x02	; 2
    3110:	80 e0       	ldi	r24, 0x00	; 0
    3112:	0e 94 54 20 	call	0x40a8	; 0x40a8 <pcf8574_setoutputpinlow>
    3116:	8c 2f       	mov	r24, r28
    3118:	cf 91       	pop	r28
    311a:	08 95       	ret

0000311c <lcd_waitbusy>:
    311c:	80 e0       	ldi	r24, 0x00	; 0
    311e:	0e 94 26 18 	call	0x304c	; 0x304c <lcd_read>
    3122:	88 23       	and	r24, r24
    3124:	dc f3       	brlt	.-10     	; 0x311c <lcd_waitbusy>
    3126:	84 e0       	ldi	r24, 0x04	; 4
    3128:	90 e0       	ldi	r25, 0x00	; 0
    312a:	01 97       	sbiw	r24, 0x01	; 1
    312c:	f1 f7       	brne	.-4      	; 0x312a <lcd_waitbusy+0xe>
    312e:	80 e0       	ldi	r24, 0x00	; 0
    3130:	0e 94 26 18 	call	0x304c	; 0x304c <lcd_read>
    3134:	08 95       	ret

00003136 <toggle_e>:
    3136:	62 e0       	ldi	r22, 0x02	; 2
    3138:	80 e0       	ldi	r24, 0x00	; 0
    313a:	0e 94 50 20 	call	0x40a0	; 0x40a0 <pcf8574_setoutputpinhigh>
    313e:	00 c0       	rjmp	.+0      	; 0x3140 <toggle_e+0xa>
    3140:	62 e0       	ldi	r22, 0x02	; 2
    3142:	80 e0       	ldi	r24, 0x00	; 0
    3144:	0e 94 54 20 	call	0x40a8	; 0x40a8 <pcf8574_setoutputpinlow>
    3148:	08 95       	ret

0000314a <lcd_write>:
    314a:	cf 93       	push	r28
    314c:	c8 2f       	mov	r28, r24
    314e:	66 23       	and	r22, r22
    3150:	31 f0       	breq	.+12     	; 0x315e <lcd_write+0x14>
    3152:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <dataport>
    3156:	81 60       	ori	r24, 0x01	; 1
    3158:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <dataport>
    315c:	05 c0       	rjmp	.+10     	; 0x3168 <lcd_write+0x1e>
    315e:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <dataport>
    3162:	8e 7f       	andi	r24, 0xFE	; 254
    3164:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <dataport>
    3168:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <dataport>
    316c:	8d 7f       	andi	r24, 0xFD	; 253
    316e:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <dataport>
    3172:	60 91 9f 02 	lds	r22, 0x029F	; 0x80029f <dataport>
    3176:	80 e0       	ldi	r24, 0x00	; 0
    3178:	0e 94 0f 20 	call	0x401e	; 0x401e <pcf8574_setoutput>
    317c:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <dataport>
    3180:	8f 77       	andi	r24, 0x7F	; 127
    3182:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <dataport>
    3186:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <dataport>
    318a:	8f 7b       	andi	r24, 0xBF	; 191
    318c:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <dataport>
    3190:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <dataport>
    3194:	8f 7d       	andi	r24, 0xDF	; 223
    3196:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <dataport>
    319a:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <dataport>
    319e:	8f 7e       	andi	r24, 0xEF	; 239
    31a0:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <dataport>
    31a4:	cc 23       	and	r28, r28
    31a6:	2c f4       	brge	.+10     	; 0x31b2 <lcd_write+0x68>
    31a8:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <dataport>
    31ac:	80 68       	ori	r24, 0x80	; 128
    31ae:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <dataport>
    31b2:	c6 ff       	sbrs	r28, 6
    31b4:	05 c0       	rjmp	.+10     	; 0x31c0 <lcd_write+0x76>
    31b6:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <dataport>
    31ba:	80 64       	ori	r24, 0x40	; 64
    31bc:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <dataport>
    31c0:	c5 ff       	sbrs	r28, 5
    31c2:	05 c0       	rjmp	.+10     	; 0x31ce <lcd_write+0x84>
    31c4:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <dataport>
    31c8:	80 62       	ori	r24, 0x20	; 32
    31ca:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <dataport>
    31ce:	c4 ff       	sbrs	r28, 4
    31d0:	05 c0       	rjmp	.+10     	; 0x31dc <lcd_write+0x92>
    31d2:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <dataport>
    31d6:	80 61       	ori	r24, 0x10	; 16
    31d8:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <dataport>
    31dc:	60 91 9f 02 	lds	r22, 0x029F	; 0x80029f <dataport>
    31e0:	80 e0       	ldi	r24, 0x00	; 0
    31e2:	0e 94 0f 20 	call	0x401e	; 0x401e <pcf8574_setoutput>
    31e6:	0e 94 9b 18 	call	0x3136	; 0x3136 <toggle_e>
    31ea:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <dataport>
    31ee:	8f 77       	andi	r24, 0x7F	; 127
    31f0:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <dataport>
    31f4:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <dataport>
    31f8:	8f 7b       	andi	r24, 0xBF	; 191
    31fa:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <dataport>
    31fe:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <dataport>
    3202:	8f 7d       	andi	r24, 0xDF	; 223
    3204:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <dataport>
    3208:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <dataport>
    320c:	8f 7e       	andi	r24, 0xEF	; 239
    320e:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <dataport>
    3212:	c3 ff       	sbrs	r28, 3
    3214:	05 c0       	rjmp	.+10     	; 0x3220 <lcd_write+0xd6>
    3216:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <dataport>
    321a:	80 68       	ori	r24, 0x80	; 128
    321c:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <dataport>
    3220:	c2 ff       	sbrs	r28, 2
    3222:	05 c0       	rjmp	.+10     	; 0x322e <lcd_write+0xe4>
    3224:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <dataport>
    3228:	80 64       	ori	r24, 0x40	; 64
    322a:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <dataport>
    322e:	c1 ff       	sbrs	r28, 1
    3230:	05 c0       	rjmp	.+10     	; 0x323c <lcd_write+0xf2>
    3232:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <dataport>
    3236:	80 62       	ori	r24, 0x20	; 32
    3238:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <dataport>
    323c:	c0 ff       	sbrs	r28, 0
    323e:	05 c0       	rjmp	.+10     	; 0x324a <lcd_write+0x100>
    3240:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <dataport>
    3244:	80 61       	ori	r24, 0x10	; 16
    3246:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <dataport>
    324a:	60 91 9f 02 	lds	r22, 0x029F	; 0x80029f <dataport>
    324e:	80 e0       	ldi	r24, 0x00	; 0
    3250:	0e 94 0f 20 	call	0x401e	; 0x401e <pcf8574_setoutput>
    3254:	0e 94 9b 18 	call	0x3136	; 0x3136 <toggle_e>
    3258:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <dataport>
    325c:	80 61       	ori	r24, 0x10	; 16
    325e:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <dataport>
    3262:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <dataport>
    3266:	80 62       	ori	r24, 0x20	; 32
    3268:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <dataport>
    326c:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <dataport>
    3270:	80 64       	ori	r24, 0x40	; 64
    3272:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <dataport>
    3276:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <dataport>
    327a:	80 68       	ori	r24, 0x80	; 128
    327c:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <dataport>
    3280:	60 91 9f 02 	lds	r22, 0x029F	; 0x80029f <dataport>
    3284:	80 e0       	ldi	r24, 0x00	; 0
    3286:	0e 94 0f 20 	call	0x401e	; 0x401e <pcf8574_setoutput>
    328a:	cf 91       	pop	r28
    328c:	08 95       	ret

0000328e <lcd_command>:
    328e:	cf 93       	push	r28
    3290:	c8 2f       	mov	r28, r24
    3292:	0e 94 8e 18 	call	0x311c	; 0x311c <lcd_waitbusy>
    3296:	60 e0       	ldi	r22, 0x00	; 0
    3298:	8c 2f       	mov	r24, r28
    329a:	0e 94 a5 18 	call	0x314a	; 0x314a <lcd_write>
    329e:	cf 91       	pop	r28
    32a0:	08 95       	ret

000032a2 <lcd_gotoxy>:
    32a2:	61 11       	cpse	r22, r1
    32a4:	04 c0       	rjmp	.+8      	; 0x32ae <lcd_gotoxy+0xc>
    32a6:	80 58       	subi	r24, 0x80	; 128
    32a8:	0e 94 47 19 	call	0x328e	; 0x328e <lcd_command>
    32ac:	08 95       	ret
    32ae:	80 54       	subi	r24, 0x40	; 64
    32b0:	0e 94 47 19 	call	0x328e	; 0x328e <lcd_command>
    32b4:	08 95       	ret

000032b6 <lcd_clrscr>:
    32b6:	81 e0       	ldi	r24, 0x01	; 1
    32b8:	0e 94 47 19 	call	0x328e	; 0x328e <lcd_command>
    32bc:	08 95       	ret

000032be <lcd_led>:
    32be:	88 23       	and	r24, r24
    32c0:	31 f0       	breq	.+12     	; 0x32ce <lcd_led+0x10>
    32c2:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <dataport>
    32c6:	87 7f       	andi	r24, 0xF7	; 247
    32c8:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <dataport>
    32cc:	05 c0       	rjmp	.+10     	; 0x32d8 <lcd_led+0x1a>
    32ce:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <dataport>
    32d2:	88 60       	ori	r24, 0x08	; 8
    32d4:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <dataport>
    32d8:	60 91 9f 02 	lds	r22, 0x029F	; 0x80029f <dataport>
    32dc:	80 e0       	ldi	r24, 0x00	; 0
    32de:	0e 94 0f 20 	call	0x401e	; 0x401e <pcf8574_setoutput>
    32e2:	08 95       	ret

000032e4 <lcd_home>:
    32e4:	82 e0       	ldi	r24, 0x02	; 2
    32e6:	0e 94 47 19 	call	0x328e	; 0x328e <lcd_command>
    32ea:	08 95       	ret

000032ec <lcd_putc>:
    32ec:	cf 93       	push	r28
    32ee:	c8 2f       	mov	r28, r24
    32f0:	0e 94 8e 18 	call	0x311c	; 0x311c <lcd_waitbusy>
    32f4:	ca 30       	cpi	r28, 0x0A	; 10
    32f6:	49 f4       	brne	.+18     	; 0x330a <lcd_putc+0x1e>
    32f8:	80 34       	cpi	r24, 0x40	; 64
    32fa:	10 f0       	brcs	.+4      	; 0x3300 <lcd_putc+0x14>
    32fc:	80 e0       	ldi	r24, 0x00	; 0
    32fe:	01 c0       	rjmp	.+2      	; 0x3302 <lcd_putc+0x16>
    3300:	80 e4       	ldi	r24, 0x40	; 64
    3302:	80 58       	subi	r24, 0x80	; 128
    3304:	0e 94 47 19 	call	0x328e	; 0x328e <lcd_command>
    3308:	13 c0       	rjmp	.+38     	; 0x3330 <lcd_putc+0x44>
    330a:	80 31       	cpi	r24, 0x10	; 16
    330c:	29 f4       	brne	.+10     	; 0x3318 <lcd_putc+0x2c>
    330e:	60 e0       	ldi	r22, 0x00	; 0
    3310:	80 ec       	ldi	r24, 0xC0	; 192
    3312:	0e 94 a5 18 	call	0x314a	; 0x314a <lcd_write>
    3316:	06 c0       	rjmp	.+12     	; 0x3324 <lcd_putc+0x38>
    3318:	80 35       	cpi	r24, 0x50	; 80
    331a:	21 f4       	brne	.+8      	; 0x3324 <lcd_putc+0x38>
    331c:	60 e0       	ldi	r22, 0x00	; 0
    331e:	80 e8       	ldi	r24, 0x80	; 128
    3320:	0e 94 a5 18 	call	0x314a	; 0x314a <lcd_write>
    3324:	0e 94 8e 18 	call	0x311c	; 0x311c <lcd_waitbusy>
    3328:	61 e0       	ldi	r22, 0x01	; 1
    332a:	8c 2f       	mov	r24, r28
    332c:	0e 94 a5 18 	call	0x314a	; 0x314a <lcd_write>
    3330:	cf 91       	pop	r28
    3332:	08 95       	ret

00003334 <lcd_puts>:
    3334:	cf 93       	push	r28
    3336:	df 93       	push	r29
    3338:	ec 01       	movw	r28, r24
    333a:	21 96       	adiw	r28, 0x01	; 1
    333c:	fc 01       	movw	r30, r24
    333e:	80 81       	ld	r24, Z
    3340:	88 23       	and	r24, r24
    3342:	29 f0       	breq	.+10     	; 0x334e <lcd_puts+0x1a>
    3344:	0e 94 76 19 	call	0x32ec	; 0x32ec <lcd_putc>
    3348:	89 91       	ld	r24, Y+
    334a:	81 11       	cpse	r24, r1
    334c:	fb cf       	rjmp	.-10     	; 0x3344 <lcd_puts+0x10>
    334e:	df 91       	pop	r29
    3350:	cf 91       	pop	r28
    3352:	08 95       	ret

00003354 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
    3354:	1f 93       	push	r17
    3356:	cf 93       	push	r28
    3358:	df 93       	push	r29
    335a:	18 2f       	mov	r17, r24
	#if LCD_PCF8574_INIT == 1
	//init pcf8574
	pcf8574_init();
    335c:	0e 94 06 20 	call	0x400c	; 0x400c <pcf8574_init>
	#endif

	dataport = 0;
    3360:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <dataport>
	pcf8574_setoutput(LCD_PCF8574_DEVICEID, dataport);
    3364:	60 91 9f 02 	lds	r22, 0x029F	; 0x80029f <dataport>
    3368:	80 e0       	ldi	r24, 0x00	; 0
    336a:	0e 94 0f 20 	call	0x401e	; 0x401e <pcf8574_setoutput>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
    336e:	80 e0       	ldi	r24, 0x00	; 0
    3370:	9d e7       	ldi	r25, 0x7D	; 125
    3372:	01 97       	sbiw	r24, 0x01	; 1
    3374:	f1 f7       	brne	.-4      	; 0x3372 <lcd_init+0x1e>
	pcf8574_setoutput(LCD_PCF8574_DEVICEID, dataport);

	delay(16000);        /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    dataport |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
    3376:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <dataport>
    337a:	80 62       	ori	r24, 0x20	; 32
    337c:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <dataport>
    dataport |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    3380:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <dataport>
    3384:	80 61       	ori	r24, 0x10	; 16
    3386:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <dataport>
    pcf8574_setoutput(LCD_PCF8574_DEVICEID, dataport);
    338a:	60 91 9f 02 	lds	r22, 0x029F	; 0x80029f <dataport>
    338e:	80 e0       	ldi	r24, 0x00	; 0
    3390:	0e 94 0f 20 	call	0x401e	; 0x401e <pcf8574_setoutput>

    lcd_e_toggle();
    3394:	0e 94 9b 18 	call	0x3136	; 0x3136 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
    3398:	80 e0       	ldi	r24, 0x00	; 0
    339a:	97 e2       	ldi	r25, 0x27	; 39
    339c:	01 97       	sbiw	r24, 0x01	; 1
    339e:	f1 f7       	brne	.-4      	; 0x339c <lcd_init+0x48>

    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */

    /* repeat last command */ 
    lcd_e_toggle();      
    33a0:	0e 94 9b 18 	call	0x3136	; 0x3136 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
    33a4:	c0 e8       	ldi	r28, 0x80	; 128
    33a6:	d0 e0       	ldi	r29, 0x00	; 0
    33a8:	ce 01       	movw	r24, r28
    33aa:	01 97       	sbiw	r24, 0x01	; 1
    33ac:	f1 f7       	brne	.-4      	; 0x33aa <lcd_init+0x56>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
    33ae:	0e 94 9b 18 	call	0x3136	; 0x3136 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
    33b2:	ce 01       	movw	r24, r28
    33b4:	01 97       	sbiw	r24, 0x01	; 1
    33b6:	f1 f7       	brne	.-4      	; 0x33b4 <lcd_init+0x60>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    dataport &= ~_BV(LCD_DATA0_PIN);
    33b8:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <dataport>
    33bc:	8f 7e       	andi	r24, 0xEF	; 239
    33be:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <dataport>
    pcf8574_setoutput(LCD_PCF8574_DEVICEID, dataport);
    33c2:	60 91 9f 02 	lds	r22, 0x029F	; 0x80029f <dataport>
    33c6:	80 e0       	ldi	r24, 0x00	; 0
    33c8:	0e 94 0f 20 	call	0x401e	; 0x401e <pcf8574_setoutput>
    lcd_e_toggle();
    33cc:	0e 94 9b 18 	call	0x3136	; 0x3136 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
    33d0:	21 97       	sbiw	r28, 0x01	; 1
    33d2:	f1 f7       	brne	.-4      	; 0x33d0 <lcd_init+0x7c>
    lcd_e_toggle();
    delay(64);           /* some displays need this additional delay */
    
    /* from now the LCD only accepts 4 bit I/O, we can use lcd_command() */    

    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
    33d4:	88 e2       	ldi	r24, 0x28	; 40
    33d6:	0e 94 47 19 	call	0x328e	; 0x328e <lcd_command>

    lcd_command(LCD_DISP_OFF);              /* display off                  */
    33da:	88 e0       	ldi	r24, 0x08	; 8
    33dc:	0e 94 47 19 	call	0x328e	; 0x328e <lcd_command>
    lcd_clrscr();                           /* display clear                */
    33e0:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
    33e4:	86 e0       	ldi	r24, 0x06	; 6
    33e6:	0e 94 47 19 	call	0x328e	; 0x328e <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
    33ea:	81 2f       	mov	r24, r17
    33ec:	0e 94 47 19 	call	0x328e	; 0x328e <lcd_command>

}/* lcd_init */
    33f0:	df 91       	pop	r29
    33f2:	cf 91       	pop	r28
    33f4:	1f 91       	pop	r17
    33f6:	08 95       	ret

000033f8 <show_hits>:
		return all_ok;
}

uint8_t map_to_byte(uint16_t val){
	return (val/10);
}
    33f8:	cf 93       	push	r28
    33fa:	df 93       	push	r29
    33fc:	8d e0       	ldi	r24, 0x0D	; 13
    33fe:	91 e0       	ldi	r25, 0x01	; 1
    3400:	0e 94 40 26 	call	0x4c80	; 0x4c80 <uart_puts>
    3404:	c0 e0       	ldi	r28, 0x00	; 0
    3406:	d0 e0       	ldi	r29, 0x00	; 0
    3408:	fe 01       	movw	r30, r28
    340a:	e9 5e       	subi	r30, 0xE9	; 233
    340c:	fa 4f       	sbci	r31, 0xFA	; 250
    340e:	80 81       	ld	r24, Z
    3410:	4a e0       	ldi	r20, 0x0A	; 10
    3412:	63 e2       	ldi	r22, 0x23	; 35
    3414:	75 e0       	ldi	r23, 0x05	; 5
    3416:	90 e0       	ldi	r25, 0x00	; 0
    3418:	0e 94 f5 27 	call	0x4fea	; 0x4fea <__itoa_ncheck>
    341c:	83 e2       	ldi	r24, 0x23	; 35
    341e:	95 e0       	ldi	r25, 0x05	; 5
    3420:	0e 94 40 26 	call	0x4c80	; 0x4c80 <uart_puts>
    3424:	8c e2       	ldi	r24, 0x2C	; 44
    3426:	0e 94 30 26 	call	0x4c60	; 0x4c60 <uart_putc>
    342a:	fe 01       	movw	r30, r28
    342c:	e3 5d       	subi	r30, 0xD3	; 211
    342e:	fa 4f       	sbci	r31, 0xFA	; 250
    3430:	80 81       	ld	r24, Z
    3432:	0e 94 30 26 	call	0x4c60	; 0x4c60 <uart_putc>
    3436:	80 e2       	ldi	r24, 0x20	; 32
    3438:	0e 94 30 26 	call	0x4c60	; 0x4c60 <uart_putc>
    343c:	21 96       	adiw	r28, 0x01	; 1
    343e:	ca 30       	cpi	r28, 0x0A	; 10
    3440:	d1 05       	cpc	r29, r1
    3442:	11 f7       	brne	.-60     	; 0x3408 <show_hits+0x10>
    3444:	8a e0       	ldi	r24, 0x0A	; 10
    3446:	0e 94 30 26 	call	0x4c60	; 0x4c60 <uart_putc>
    344a:	df 91       	pop	r29
    344c:	cf 91       	pop	r28
    344e:	08 95       	ret

00003450 <init_timer_interrupt>:
    3450:	88 e0       	ldi	r24, 0x08	; 8
    3452:	9d e3       	ldi	r25, 0x3D	; 61
    3454:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    3458:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    345c:	e1 e8       	ldi	r30, 0x81	; 129
    345e:	f0 e0       	ldi	r31, 0x00	; 0
    3460:	80 81       	ld	r24, Z
    3462:	88 60       	ori	r24, 0x08	; 8
    3464:	80 83       	st	Z, r24
    3466:	af e6       	ldi	r26, 0x6F	; 111
    3468:	b0 e0       	ldi	r27, 0x00	; 0
    346a:	8c 91       	ld	r24, X
    346c:	82 60       	ori	r24, 0x02	; 2
    346e:	8c 93       	st	X, r24
    3470:	80 81       	ld	r24, Z
    3472:	85 60       	ori	r24, 0x05	; 5
    3474:	80 83       	st	Z, r24
    3476:	08 95       	ret

00003478 <reset_data>:
    3478:	0f 93       	push	r16
    347a:	1f 93       	push	r17
    347c:	cf 93       	push	r28
    347e:	df 93       	push	r29
    3480:	cd b7       	in	r28, 0x3d	; 61
    3482:	de b7       	in	r29, 0x3e	; 62
    3484:	e1 97       	sbiw	r28, 0x31	; 49
    3486:	0f b6       	in	r0, 0x3f	; 63
    3488:	f8 94       	cli
    348a:	de bf       	out	0x3e, r29	; 62
    348c:	0f be       	out	0x3f, r0	; 63
    348e:	cd bf       	out	0x3d, r28	; 61
    3490:	00 91 21 05 	lds	r16, 0x0521	; 0x800521 <dd>
    3494:	10 91 22 05 	lds	r17, 0x0522	; 0x800522 <dd+0x1>
    3498:	15 c0       	rjmp	.+42     	; 0x34c4 <reset_data+0x4c>
    349a:	64 e1       	ldi	r22, 0x14	; 20
    349c:	71 e0       	ldi	r23, 0x01	; 1
    349e:	ce 01       	movw	r24, r28
    34a0:	01 96       	adiw	r24, 0x01	; 1
    34a2:	0e 94 b4 27 	call	0x4f68	; 0x4f68 <strcmp>
    34a6:	89 2b       	or	r24, r25
    34a8:	69 f4       	brne	.+26     	; 0x34c4 <reset_data+0x4c>
    34aa:	c8 01       	movw	r24, r16
    34ac:	0e 94 cd 14 	call	0x299a	; 0x299a <fat_reset_dir>
    34b0:	be 01       	movw	r22, r28
    34b2:	6f 5f       	subi	r22, 0xFF	; 255
    34b4:	7f 4f       	sbci	r23, 0xFF	; 255
    34b6:	80 91 d5 04 	lds	r24, 0x04D5	; 0x8004d5 <fs>
    34ba:	90 91 d6 04 	lds	r25, 0x04D6	; 0x8004d6 <fs+0x1>
    34be:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <fat_delete_file>
    34c2:	09 c0       	rjmp	.+18     	; 0x34d6 <reset_data+0x5e>
    34c4:	be 01       	movw	r22, r28
    34c6:	6f 5f       	subi	r22, 0xFF	; 255
    34c8:	7f 4f       	sbci	r23, 0xFF	; 255
    34ca:	c8 01       	movw	r24, r16
    34cc:	0e 94 de 14 	call	0x29bc	; 0x29bc <fat_read_dir>
    34d0:	81 11       	cpse	r24, r1
    34d2:	e3 cf       	rjmp	.-58     	; 0x349a <reset_data+0x22>
    34d4:	2d c0       	rjmp	.+90     	; 0x3530 <reset_data+0xb8>
    34d6:	ae 01       	movw	r20, r28
    34d8:	4f 5f       	subi	r20, 0xFF	; 255
    34da:	5f 4f       	sbci	r21, 0xFF	; 255
    34dc:	64 e1       	ldi	r22, 0x14	; 20
    34de:	71 e0       	ldi	r23, 0x01	; 1
    34e0:	80 91 21 05 	lds	r24, 0x0521	; 0x800521 <dd>
    34e4:	90 91 22 05 	lds	r25, 0x0522	; 0x800522 <dd+0x1>
    34e8:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <fat_create_file>
    34ec:	81 11       	cpse	r24, r1
    34ee:	0c c0       	rjmp	.+24     	; 0x3508 <reset_data+0x90>
    34f0:	8f e8       	ldi	r24, 0x8F	; 143
    34f2:	91 e0       	ldi	r25, 0x01	; 1
    34f4:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <uart_puts_p>
    34f8:	84 e1       	ldi	r24, 0x14	; 20
    34fa:	91 e0       	ldi	r25, 0x01	; 1
    34fc:	0e 94 40 26 	call	0x4c80	; 0x4c80 <uart_puts>
    3500:	8a e0       	ldi	r24, 0x0A	; 10
    3502:	0e 94 30 26 	call	0x4c60	; 0x4c60 <uart_putc>
    3506:	20 c0       	rjmp	.+64     	; 0x3548 <reset_data+0xd0>
    3508:	60 e0       	ldi	r22, 0x00	; 0
    350a:	80 e0       	ldi	r24, 0x00	; 0
    350c:	0e 94 51 19 	call	0x32a2	; 0x32a2 <lcd_gotoxy>
    3510:	8d e1       	ldi	r24, 0x1D	; 29
    3512:	91 e0       	ldi	r25, 0x01	; 1
    3514:	0e 94 9a 19 	call	0x3334	; 0x3334 <lcd_puts>
    3518:	2f ef       	ldi	r18, 0xFF	; 255
    351a:	83 ed       	ldi	r24, 0xD3	; 211
    351c:	90 e3       	ldi	r25, 0x30	; 48
    351e:	21 50       	subi	r18, 0x01	; 1
    3520:	80 40       	sbci	r24, 0x00	; 0
    3522:	90 40       	sbci	r25, 0x00	; 0
    3524:	e1 f7       	brne	.-8      	; 0x351e <reset_data+0xa6>
    3526:	00 c0       	rjmp	.+0      	; 0x3528 <reset_data+0xb0>
    3528:	00 00       	nop
    352a:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <lcd_clrscr>
    352e:	0c c0       	rjmp	.+24     	; 0x3548 <reset_data+0xd0>
    3530:	85 ea       	ldi	r24, 0xA5	; 165
    3532:	91 e0       	ldi	r25, 0x01	; 1
    3534:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <uart_puts_p>
    3538:	84 e1       	ldi	r24, 0x14	; 20
    353a:	91 e0       	ldi	r25, 0x01	; 1
    353c:	0e 94 40 26 	call	0x4c80	; 0x4c80 <uart_puts>
    3540:	8a e0       	ldi	r24, 0x0A	; 10
    3542:	0e 94 30 26 	call	0x4c60	; 0x4c60 <uart_putc>
    3546:	c7 cf       	rjmp	.-114    	; 0x34d6 <reset_data+0x5e>
    3548:	e1 96       	adiw	r28, 0x31	; 49
    354a:	0f b6       	in	r0, 0x3f	; 63
    354c:	f8 94       	cli
    354e:	de bf       	out	0x3e, r29	; 62
    3550:	0f be       	out	0x3f, r0	; 63
    3552:	cd bf       	out	0x3d, r28	; 61
    3554:	df 91       	pop	r29
    3556:	cf 91       	pop	r28
    3558:	1f 91       	pop	r17
    355a:	0f 91       	pop	r16
    355c:	08 95       	ret

0000355e <reset_hits>:
    355e:	10 92 a4 02 	sts	0x02A4, r1	; 0x8002a4 <hits_pt>
    3562:	80 e0       	ldi	r24, 0x00	; 0
    3564:	90 e0       	ldi	r25, 0x00	; 0
    3566:	25 e6       	ldi	r18, 0x65	; 101
    3568:	fc 01       	movw	r30, r24
    356a:	e9 5e       	subi	r30, 0xE9	; 233
    356c:	fa 4f       	sbci	r31, 0xFA	; 250
    356e:	10 82       	st	Z, r1
    3570:	fc 01       	movw	r30, r24
    3572:	e3 5d       	subi	r30, 0xD3	; 211
    3574:	fa 4f       	sbci	r31, 0xFA	; 250
    3576:	20 83       	st	Z, r18
    3578:	01 96       	adiw	r24, 0x01	; 1
    357a:	8a 30       	cpi	r24, 0x0A	; 10
    357c:	91 05       	cpc	r25, r1
    357e:	a1 f7       	brne	.-24     	; 0x3568 <reset_hits+0xa>
    3580:	08 95       	ret

00003582 <Init_sdcard>:
    3582:	0f 93       	push	r16
    3584:	cf 93       	push	r28
    3586:	60 e0       	ldi	r22, 0x00	; 0
    3588:	80 e0       	ldi	r24, 0x00	; 0
    358a:	0e 94 51 19 	call	0x32a2	; 0x32a2 <lcd_gotoxy>
    358e:	8a e2       	ldi	r24, 0x2A	; 42
    3590:	91 e0       	ldi	r25, 0x01	; 1
    3592:	0e 94 9a 19 	call	0x3334	; 0x3334 <lcd_puts>
    3596:	83 b7       	in	r24, 0x33	; 51
    3598:	81 7f       	andi	r24, 0xF1	; 241
    359a:	83 bf       	out	0x33, r24	; 51
    359c:	0e 94 31 22 	call	0x4462	; 0x4462 <sd_raw_init>
    35a0:	81 11       	cpse	r24, r1
    35a2:	06 c0       	rjmp	.+12     	; 0x35b0 <Init_sdcard+0x2e>
    35a4:	81 e7       	ldi	r24, 0x71	; 113
    35a6:	91 e0       	ldi	r25, 0x01	; 1
    35a8:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <uart_puts_p>
    35ac:	c0 e0       	ldi	r28, 0x00	; 0
    35ae:	05 c0       	rjmp	.+10     	; 0x35ba <Init_sdcard+0x38>
    35b0:	8f e4       	ldi	r24, 0x4F	; 79
    35b2:	91 e0       	ldi	r25, 0x01	; 1
    35b4:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <uart_puts_p>
    35b8:	c1 e0       	ldi	r28, 0x01	; 1
    35ba:	00 e0       	ldi	r16, 0x00	; 0
    35bc:	29 e1       	ldi	r18, 0x19	; 25
    35be:	35 e2       	ldi	r19, 0x25	; 37
    35c0:	4b ec       	ldi	r20, 0xCB	; 203
    35c2:	53 e2       	ldi	r21, 0x23	; 35
    35c4:	6a e2       	ldi	r22, 0x2A	; 42
    35c6:	73 e2       	ldi	r23, 0x23	; 35
    35c8:	8c ef       	ldi	r24, 0xFC	; 252
    35ca:	90 e2       	ldi	r25, 0x20	; 32
    35cc:	0e 94 57 1f 	call	0x3eae	; 0x3eae <partition_open>
    35d0:	90 93 16 05 	sts	0x0516, r25	; 0x800516 <partition+0x1>
    35d4:	80 93 15 05 	sts	0x0515, r24	; 0x800515 <partition>
    35d8:	89 2b       	or	r24, r25
    35da:	d9 f4       	brne	.+54     	; 0x3612 <Init_sdcard+0x90>
    35dc:	0f ef       	ldi	r16, 0xFF	; 255
    35de:	29 e1       	ldi	r18, 0x19	; 25
    35e0:	35 e2       	ldi	r19, 0x25	; 37
    35e2:	4b ec       	ldi	r20, 0xCB	; 203
    35e4:	53 e2       	ldi	r21, 0x23	; 35
    35e6:	6a e2       	ldi	r22, 0x2A	; 42
    35e8:	73 e2       	ldi	r23, 0x23	; 35
    35ea:	8c ef       	ldi	r24, 0xFC	; 252
    35ec:	90 e2       	ldi	r25, 0x20	; 32
    35ee:	0e 94 57 1f 	call	0x3eae	; 0x3eae <partition_open>
    35f2:	90 93 16 05 	sts	0x0516, r25	; 0x800516 <partition+0x1>
    35f6:	80 93 15 05 	sts	0x0515, r24	; 0x800515 <partition>
    35fa:	89 2b       	or	r24, r25
    35fc:	31 f4       	brne	.+12     	; 0x360a <Init_sdcard+0x88>
    35fe:	85 e3       	ldi	r24, 0x35	; 53
    3600:	91 e0       	ldi	r25, 0x01	; 1
    3602:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <uart_puts_p>
    3606:	c0 e0       	ldi	r28, 0x00	; 0
    3608:	04 c0       	rjmp	.+8      	; 0x3612 <Init_sdcard+0x90>
    360a:	87 e1       	ldi	r24, 0x17	; 23
    360c:	91 e0       	ldi	r25, 0x01	; 1
    360e:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <uart_puts_p>
    3612:	80 91 15 05 	lds	r24, 0x0515	; 0x800515 <partition>
    3616:	90 91 16 05 	lds	r25, 0x0516	; 0x800516 <partition+0x1>
    361a:	0e 94 0e 0c 	call	0x181c	; 0x181c <fat_open>
    361e:	90 93 d6 04 	sts	0x04D6, r25	; 0x8004d6 <fs+0x1>
    3622:	80 93 d5 04 	sts	0x04D5, r24	; 0x8004d5 <fs>
    3626:	89 2b       	or	r24, r25
    3628:	31 f4       	brne	.+12     	; 0x3636 <Init_sdcard+0xb4>
    362a:	8c ef       	ldi	r24, 0xFC	; 252
    362c:	90 e0       	ldi	r25, 0x00	; 0
    362e:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <uart_puts_p>
    3632:	c0 e0       	ldi	r28, 0x00	; 0
    3634:	04 c0       	rjmp	.+8      	; 0x363e <Init_sdcard+0xbc>
    3636:	8c ed       	ldi	r24, 0xDC	; 220
    3638:	90 e0       	ldi	r25, 0x00	; 0
    363a:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <uart_puts_p>
    363e:	48 ed       	ldi	r20, 0xD8	; 216
    3640:	54 e0       	ldi	r21, 0x04	; 4
    3642:	6b e3       	ldi	r22, 0x3B	; 59
    3644:	71 e0       	ldi	r23, 0x01	; 1
    3646:	80 91 d5 04 	lds	r24, 0x04D5	; 0x8004d5 <fs>
    364a:	90 91 d6 04 	lds	r25, 0x04D6	; 0x8004d6 <fs+0x1>
    364e:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <fat_get_dir_entry_of_path>
    3652:	68 ed       	ldi	r22, 0xD8	; 216
    3654:	74 e0       	ldi	r23, 0x04	; 4
    3656:	80 91 d5 04 	lds	r24, 0x04D5	; 0x8004d5 <fs>
    365a:	90 91 d6 04 	lds	r25, 0x04D6	; 0x8004d6 <fs+0x1>
    365e:	0e 94 85 14 	call	0x290a	; 0x290a <fat_open_dir>
    3662:	90 93 22 05 	sts	0x0522, r25	; 0x800522 <dd+0x1>
    3666:	80 93 21 05 	sts	0x0521, r24	; 0x800521 <dd>
    366a:	89 2b       	or	r24, r25
    366c:	31 f4       	brne	.+12     	; 0x367a <Init_sdcard+0xf8>
    366e:	8d eb       	ldi	r24, 0xBD	; 189
    3670:	90 e0       	ldi	r25, 0x00	; 0
    3672:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <uart_puts_p>
    3676:	c0 e0       	ldi	r28, 0x00	; 0
    3678:	04 c0       	rjmp	.+8      	; 0x3682 <Init_sdcard+0x100>
    367a:	80 ea       	ldi	r24, 0xA0	; 160
    367c:	90 e0       	ldi	r25, 0x00	; 0
    367e:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <uart_puts_p>
    3682:	2f ef       	ldi	r18, 0xFF	; 255
    3684:	84 e3       	ldi	r24, 0x34	; 52
    3686:	9c e0       	ldi	r25, 0x0C	; 12
    3688:	21 50       	subi	r18, 0x01	; 1
    368a:	80 40       	sbci	r24, 0x00	; 0
    368c:	90 40       	sbci	r25, 0x00	; 0
    368e:	e1 f7       	brne	.-8      	; 0x3688 <Init_sdcard+0x106>
    3690:	00 c0       	rjmp	.+0      	; 0x3692 <Init_sdcard+0x110>
    3692:	00 00       	nop
    3694:	8c 2f       	mov	r24, r28
    3696:	cf 91       	pop	r28
    3698:	0f 91       	pop	r16
    369a:	08 95       	ret

0000369c <open_file>:


bool open_file(char file_name[],char force[]){
    369c:	af 92       	push	r10
    369e:	bf 92       	push	r11
    36a0:	cf 92       	push	r12
    36a2:	df 92       	push	r13
    36a4:	ef 92       	push	r14
    36a6:	ff 92       	push	r15
    36a8:	0f 93       	push	r16
    36aa:	1f 93       	push	r17
    36ac:	cf 93       	push	r28
    36ae:	df 93       	push	r29
    36b0:	cd b7       	in	r28, 0x3d	; 61
    36b2:	de b7       	in	r29, 0x3e	; 62
    36b4:	eb 97       	sbiw	r28, 0x3b	; 59
    36b6:	0f b6       	in	r0, 0x3f	; 63
    36b8:	f8 94       	cli
    36ba:	de bf       	out	0x3e, r29	; 62
    36bc:	0f be       	out	0x3f, r0	; 63
    36be:	cd bf       	out	0x3d, r28	; 61
    36c0:	7c 01       	movw	r14, r24
    36c2:	d6 2e       	mov	r13, r22
    36c4:	c7 2e       	mov	r12, r23
	bool all_ok = true;
	 fd = open_file_in_dir(fs, dd, file_name);
    36c6:	00 91 21 05 	lds	r16, 0x0521	; 0x800521 <dd>
    36ca:	10 91 22 05 	lds	r17, 0x0522	; 0x800522 <dd+0x1>
    36ce:	a0 90 d5 04 	lds	r10, 0x04D5	; 0x8004d5 <fs>
    36d2:	b0 90 d6 04 	lds	r11, 0x04D6	; 0x8004d6 <fs+0x1>
    36d6:	19 c0       	rjmp	.+50     	; 0x370a <open_file+0x6e>

uint8_t find_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name, struct fat_dir_entry_struct* dir_entry)
{
	while(fat_read_dir(dd, dir_entry))
	{
		if(strcmp(dir_entry->long_name, name) == 0)
    36d8:	b7 01       	movw	r22, r14
    36da:	ce 01       	movw	r24, r28
    36dc:	0b 96       	adiw	r24, 0x0b	; 11
    36de:	0e 94 b4 27 	call	0x4f68	; 0x4f68 <strcmp>
    36e2:	89 2b       	or	r24, r25
    36e4:	91 f4       	brne	.+36     	; 0x370a <open_file+0x6e>
		{
			fat_reset_dir(dd);
    36e6:	c8 01       	movw	r24, r16
    36e8:	0e 94 cd 14 	call	0x299a	; 0x299a <fat_reset_dir>
{
	struct fat_dir_entry_struct file_entry;
	if(!find_file_in_dir(fs, dd, name, &file_entry))
	return 0;

	return fat_open_file(fs, &file_entry);
    36ec:	be 01       	movw	r22, r28
    36ee:	65 5f       	subi	r22, 0xF5	; 245
    36f0:	7f 4f       	sbci	r23, 0xFF	; 255
    36f2:	c5 01       	movw	r24, r10
    36f4:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <fat_open_file>
}


bool open_file(char file_name[],char force[]){
	bool all_ok = true;
	 fd = open_file_in_dir(fs, dd, file_name);
    36f8:	90 93 14 05 	sts	0x0514, r25	; 0x800514 <fd+0x1>
    36fc:	80 93 13 05 	sts	0x0513, r24	; 0x800513 <fd>
	if(!fd)
    3700:	89 2b       	or	r24, r25
    3702:	61 f0       	breq	.+24     	; 0x371c <open_file+0x80>
	return (val/10);
}


bool open_file(char file_name[],char force[]){
	bool all_ok = true;
    3704:	bb 24       	eor	r11, r11
    3706:	b3 94       	inc	r11
    3708:	14 c0       	rjmp	.+40     	; 0x3732 <open_file+0x96>
	return l;
}

uint8_t find_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name, struct fat_dir_entry_struct* dir_entry)
{
	while(fat_read_dir(dd, dir_entry))
    370a:	be 01       	movw	r22, r28
    370c:	65 5f       	subi	r22, 0xF5	; 245
    370e:	7f 4f       	sbci	r23, 0xFF	; 255
    3710:	c8 01       	movw	r24, r16
    3712:	0e 94 de 14 	call	0x29bc	; 0x29bc <fat_read_dir>
    3716:	81 11       	cpse	r24, r1
    3718:	df cf       	rjmp	.-66     	; 0x36d8 <open_file+0x3c>
    371a:	78 c0       	rjmp	.+240    	; 0x380c <open_file+0x170>
bool open_file(char file_name[],char force[]){
	bool all_ok = true;
	 fd = open_file_in_dir(fs, dd, file_name);
	if(!fd)
	{
		uart_puts_p(PSTR("error opening "));
    371c:	81 e9       	ldi	r24, 0x91	; 145
    371e:	90 e0       	ldi	r25, 0x00	; 0
    3720:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <uart_puts_p>
		uart_puts(file_name);
    3724:	c7 01       	movw	r24, r14
    3726:	0e 94 40 26 	call	0x4c80	; 0x4c80 <uart_puts>
		uart_putc('\n');
    372a:	8a e0       	ldi	r24, 0x0A	; 10
    372c:	0e 94 30 26 	call	0x4c60	; 0x4c60 <uart_putc>
		all_ok = false;
    3730:	b1 2c       	mov	r11, r1
		/*uart_puts_p(PSTR("Opened file: "));
		uart_puts(file_name);
		uart_putc('\n');*/
	}
	
	 offset = 0;
    3732:	10 92 a5 02 	sts	0x02A5, r1	; 0x8002a5 <offset>
    3736:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <offset+0x1>
    373a:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <offset+0x2>
    373e:	10 92 a8 02 	sts	0x02A8, r1	; 0x8002a8 <offset+0x3>
	if(!fat_seek_file(fd, &offset, FAT_SEEK_END))
    3742:	42 e0       	ldi	r20, 0x02	; 2
    3744:	65 ea       	ldi	r22, 0xA5	; 165
    3746:	72 e0       	ldi	r23, 0x02	; 2
    3748:	80 91 13 05 	lds	r24, 0x0513	; 0x800513 <fd>
    374c:	90 91 14 05 	lds	r25, 0x0514	; 0x800514 <fd+0x1>
    3750:	0e 94 14 14 	call	0x2828	; 0x2828 <fat_seek_file>
    3754:	81 11       	cpse	r24, r1
    3756:	11 c0       	rjmp	.+34     	; 0x377a <open_file+0xde>
	{
		uart_puts_p(PSTR("error seeking on "));
    3758:	8f e7       	ldi	r24, 0x7F	; 127
    375a:	90 e0       	ldi	r25, 0x00	; 0
    375c:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <uart_puts_p>
		uart_puts(file_name);
    3760:	c7 01       	movw	r24, r14
    3762:	0e 94 40 26 	call	0x4c80	; 0x4c80 <uart_puts>
		uart_putc('\n');
    3766:	8a e0       	ldi	r24, 0x0A	; 10
    3768:	0e 94 30 26 	call	0x4c60	; 0x4c60 <uart_putc>

		fat_close_file(fd);
    376c:	80 91 13 05 	lds	r24, 0x0513	; 0x800513 <fd>
    3770:	90 91 14 05 	lds	r25, 0x0514	; 0x800514 <fd+0x1>
    3774:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <fat_close_file>
		all_ok = false;
    3778:	b1 2c       	mov	r11, r1
	}
//uart_puts_p(PSTR("Done seeking\n"));
/* write text to file */
char line[10];
uart_puts("Force: ");
    377a:	8d e3       	ldi	r24, 0x3D	; 61
    377c:	91 e0       	ldi	r25, 0x01	; 1
    377e:	0e 94 40 26 	call	0x4c80	; 0x4c80 <uart_puts>
uart_puts(force);
    3782:	8d 2d       	mov	r24, r13
    3784:	9c 2d       	mov	r25, r12
    3786:	0e 94 40 26 	call	0x4c80	; 0x4c80 <uart_puts>
uart_putc('\n');
    378a:	8a e0       	ldi	r24, 0x0A	; 10
    378c:	0e 94 30 26 	call	0x4c60	; 0x4c60 <uart_putc>
snprintf(line, sizeof (line), "%s\n", force);
    3790:	cf 92       	push	r12
    3792:	df 92       	push	r13
    3794:	85 e4       	ldi	r24, 0x45	; 69
    3796:	91 e0       	ldi	r25, 0x01	; 1
    3798:	9f 93       	push	r25
    379a:	8f 93       	push	r24
    379c:	1f 92       	push	r1
    379e:	8a e0       	ldi	r24, 0x0A	; 10
    37a0:	8f 93       	push	r24
    37a2:	8e 01       	movw	r16, r28
    37a4:	0f 5f       	subi	r16, 0xFF	; 255
    37a6:	1f 4f       	sbci	r17, 0xFF	; 255
    37a8:	1f 93       	push	r17
    37aa:	0f 93       	push	r16
    37ac:	0e 94 1a 28 	call	0x5034	; 0x5034 <snprintf>
uart_puts("Force with type: ");
    37b0:	89 e4       	ldi	r24, 0x49	; 73
    37b2:	91 e0       	ldi	r25, 0x01	; 1
    37b4:	0e 94 40 26 	call	0x4c80	; 0x4c80 <uart_puts>
uart_puts(line);
    37b8:	c8 01       	movw	r24, r16
    37ba:	0e 94 40 26 	call	0x4c80	; 0x4c80 <uart_puts>
uart_putc('\n');
    37be:	8a e0       	ldi	r24, 0x0A	; 10
    37c0:	0e 94 30 26 	call	0x4c60	; 0x4c60 <uart_putc>

		if(fat_write_file(fd, (uint8_t*) line, strlen(line)) != strlen(line))
    37c4:	f8 01       	movw	r30, r16
    37c6:	01 90       	ld	r0, Z+
    37c8:	00 20       	and	r0, r0
    37ca:	e9 f7       	brne	.-6      	; 0x37c6 <open_file+0x12a>
    37cc:	31 97       	sbiw	r30, 0x01	; 1
    37ce:	af 01       	movw	r20, r30
    37d0:	40 1b       	sub	r20, r16
    37d2:	51 0b       	sbc	r21, r17
    37d4:	b8 01       	movw	r22, r16
    37d6:	80 91 13 05 	lds	r24, 0x0513	; 0x800513 <fd>
    37da:	90 91 14 05 	lds	r25, 0x0514	; 0x800514 <fd+0x1>
    37de:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <fat_write_file>
    37e2:	f8 01       	movw	r30, r16
    37e4:	01 90       	ld	r0, Z+
    37e6:	00 20       	and	r0, r0
    37e8:	e9 f7       	brne	.-6      	; 0x37e4 <open_file+0x148>
    37ea:	31 97       	sbiw	r30, 0x01	; 1
    37ec:	e0 1b       	sub	r30, r16
    37ee:	f1 0b       	sbc	r31, r17
    37f0:	0f b6       	in	r0, 0x3f	; 63
    37f2:	f8 94       	cli
    37f4:	de bf       	out	0x3e, r29	; 62
    37f6:	0f be       	out	0x3f, r0	; 63
    37f8:	cd bf       	out	0x3d, r28	; 61
    37fa:	8e 17       	cp	r24, r30
    37fc:	9f 07       	cpc	r25, r31
    37fe:	59 f0       	breq	.+22     	; 0x3816 <open_file+0x17a>
		{
			uart_puts_p(PSTR("error writing to file\n"));
    3800:	88 e6       	ldi	r24, 0x68	; 104
    3802:	90 e0       	ldi	r25, 0x00	; 0
    3804:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <uart_puts_p>
			all_ok = false;
    3808:	b1 2c       	mov	r11, r1
    380a:	05 c0       	rjmp	.+10     	; 0x3816 <open_file+0x17a>
}


bool open_file(char file_name[],char force[]){
	bool all_ok = true;
	 fd = open_file_in_dir(fs, dd, file_name);
    380c:	10 92 14 05 	sts	0x0514, r1	; 0x800514 <fd+0x1>
    3810:	10 92 13 05 	sts	0x0513, r1	; 0x800513 <fd>
    3814:	83 cf       	rjmp	.-250    	; 0x371c <open_file+0x80>
			uart_puts_p(PSTR("error writing to file\n"));
			all_ok = false;
		}
	

	fat_close_file(fd);
    3816:	80 91 13 05 	lds	r24, 0x0513	; 0x800513 <fd>
    381a:	90 91 14 05 	lds	r25, 0x0514	; 0x800514 <fd+0x1>
    381e:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <fat_close_file>
	//uart_puts_p(PSTR("closed file\n"));
	return all_ok;
}
    3822:	8b 2d       	mov	r24, r11
    3824:	eb 96       	adiw	r28, 0x3b	; 59
    3826:	0f b6       	in	r0, 0x3f	; 63
    3828:	f8 94       	cli
    382a:	de bf       	out	0x3e, r29	; 62
    382c:	0f be       	out	0x3f, r0	; 63
    382e:	cd bf       	out	0x3d, r28	; 61
    3830:	df 91       	pop	r29
    3832:	cf 91       	pop	r28
    3834:	1f 91       	pop	r17
    3836:	0f 91       	pop	r16
    3838:	ff 90       	pop	r15
    383a:	ef 90       	pop	r14
    383c:	df 90       	pop	r13
    383e:	cf 90       	pop	r12
    3840:	bf 90       	pop	r11
    3842:	af 90       	pop	r10
    3844:	08 95       	ret

00003846 <__vector_11>:
	TCCR1B |= (1 << CS12) | (1 << CS10);
	// set prescaler to 1024 and start the timer
}

ISR (TIMER1_COMPA_vect)
{	
    3846:	1f 92       	push	r1
    3848:	0f 92       	push	r0
    384a:	0f b6       	in	r0, 0x3f	; 63
    384c:	0f 92       	push	r0
    384e:	11 24       	eor	r1, r1
    3850:	cf 92       	push	r12
    3852:	df 92       	push	r13
    3854:	ef 92       	push	r14
    3856:	ff 92       	push	r15
    3858:	0f 93       	push	r16
    385a:	1f 93       	push	r17
    385c:	2f 93       	push	r18
    385e:	3f 93       	push	r19
    3860:	4f 93       	push	r20
    3862:	5f 93       	push	r21
    3864:	6f 93       	push	r22
    3866:	7f 93       	push	r23
    3868:	8f 93       	push	r24
    386a:	9f 93       	push	r25
    386c:	af 93       	push	r26
    386e:	bf 93       	push	r27
    3870:	ef 93       	push	r30
    3872:	ff 93       	push	r31
    3874:	cf 93       	push	r28
    3876:	df 93       	push	r29
    3878:	1f 92       	push	r1
    387a:	cd b7       	in	r28, 0x3d	; 61
    387c:	de b7       	in	r29, 0x3e	; 62
	bool all_ok = true;
	times++;
    387e:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <times>
    3882:	8f 5f       	subi	r24, 0xFF	; 255
    3884:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <times>
	if (times == 3){
    3888:	83 30       	cpi	r24, 0x03	; 3
    388a:	09 f0       	breq	.+2      	; 0x388e <__vector_11+0x48>
    388c:	55 c0       	rjmp	.+170    	; 0x3938 <__vector_11+0xf2>
	// action to be done every 3 sec
	show_hits();
    388e:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <show_hits>
	for (int i =0 ; i < hits_pt ; i++){
    3892:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <hits_pt>
    3896:	88 23       	and	r24, r24
    3898:	09 f4       	brne	.+2      	; 0x389c <__vector_11+0x56>
    389a:	41 c0       	rjmp	.+130    	; 0x391e <__vector_11+0xd8>
    389c:	00 e0       	ldi	r16, 0x00	; 0
    389e:	10 e0       	ldi	r17, 0x00	; 0
    38a0:	dd 24       	eor	r13, r13
    38a2:	d3 94       	inc	r13
		
		itoa(hits[i],force_val,10);
		strcat(force_val,",");
    38a4:	0f 2e       	mov	r0, r31
    38a6:	fc e2       	ldi	r31, 0x2C	; 44
    38a8:	ef 2e       	mov	r14, r31
    38aa:	f1 2c       	mov	r15, r1
    38ac:	f0 2d       	mov	r31, r0
		char ap = hits_types[i];
		strncat(force_val, &ap, 1); 
		uart_puts(force_val);
		if(!open_file("data.txt",force_val)){
			all_ok = false;
    38ae:	c1 2c       	mov	r12, r1
	if (times == 3){
	// action to be done every 3 sec
	show_hits();
	for (int i =0 ; i < hits_pt ; i++){
		
		itoa(hits[i],force_val,10);
    38b0:	f8 01       	movw	r30, r16
    38b2:	e9 5e       	subi	r30, 0xE9	; 233
    38b4:	fa 4f       	sbci	r31, 0xFA	; 250
    38b6:	80 81       	ld	r24, Z
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    38b8:	4a e0       	ldi	r20, 0x0A	; 10
    38ba:	63 e2       	ldi	r22, 0x23	; 35
    38bc:	75 e0       	ldi	r23, 0x05	; 5
    38be:	90 e0       	ldi	r25, 0x00	; 0
    38c0:	0e 94 f5 27 	call	0x4fea	; 0x4fea <__itoa_ncheck>
		strcat(force_val,",");
    38c4:	e3 e2       	ldi	r30, 0x23	; 35
    38c6:	f5 e0       	ldi	r31, 0x05	; 5
    38c8:	01 90       	ld	r0, Z+
    38ca:	00 20       	and	r0, r0
    38cc:	e9 f7       	brne	.-6      	; 0x38c8 <__vector_11+0x82>
    38ce:	31 97       	sbiw	r30, 0x01	; 1
    38d0:	f1 82       	std	Z+1, r15	; 0x01
    38d2:	e0 82       	st	Z, r14
		char ap = hits_types[i];
    38d4:	f8 01       	movw	r30, r16
    38d6:	e3 5d       	subi	r30, 0xD3	; 211
    38d8:	fa 4f       	sbci	r31, 0xFA	; 250
    38da:	80 81       	ld	r24, Z
    38dc:	89 83       	std	Y+1, r24	; 0x01
		strncat(force_val, &ap, 1); 
    38de:	41 e0       	ldi	r20, 0x01	; 1
    38e0:	50 e0       	ldi	r21, 0x00	; 0
    38e2:	be 01       	movw	r22, r28
    38e4:	6f 5f       	subi	r22, 0xFF	; 255
    38e6:	7f 4f       	sbci	r23, 0xFF	; 255
    38e8:	83 e2       	ldi	r24, 0x23	; 35
    38ea:	95 e0       	ldi	r25, 0x05	; 5
    38ec:	0e 94 bd 27 	call	0x4f7a	; 0x4f7a <strncat>
		uart_puts(force_val);
    38f0:	83 e2       	ldi	r24, 0x23	; 35
    38f2:	95 e0       	ldi	r25, 0x05	; 5
    38f4:	0e 94 40 26 	call	0x4c80	; 0x4c80 <uart_puts>
		if(!open_file("data.txt",force_val)){
    38f8:	63 e2       	ldi	r22, 0x23	; 35
    38fa:	75 e0       	ldi	r23, 0x05	; 5
    38fc:	84 e1       	ldi	r24, 0x14	; 20
    38fe:	91 e0       	ldi	r25, 0x01	; 1
    3900:	0e 94 4e 1b 	call	0x369c	; 0x369c <open_file>
    3904:	81 11       	cpse	r24, r1
    3906:	01 c0       	rjmp	.+2      	; 0x390a <__vector_11+0xc4>
			all_ok = false;
    3908:	dc 2c       	mov	r13, r12
	bool all_ok = true;
	times++;
	if (times == 3){
	// action to be done every 3 sec
	show_hits();
	for (int i =0 ; i < hits_pt ; i++){
    390a:	0f 5f       	subi	r16, 0xFF	; 255
    390c:	1f 4f       	sbci	r17, 0xFF	; 255
    390e:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <hits_pt>
    3912:	90 e0       	ldi	r25, 0x00	; 0
    3914:	08 17       	cp	r16, r24
    3916:	19 07       	cpc	r17, r25
    3918:	5c f2       	brlt	.-106    	; 0x38b0 <__vector_11+0x6a>
		uart_puts(force_val);
		if(!open_file("data.txt",force_val)){
			all_ok = false;
		}
	}
	if (all_ok){
    391a:	dd 20       	and	r13, r13
    391c:	29 f0       	breq	.+10     	; 0x3928 <__vector_11+0xe2>
		uart_puts("L.\n");
    391e:	8b e5       	ldi	r24, 0x5B	; 91
    3920:	91 e0       	ldi	r25, 0x01	; 1
    3922:	0e 94 40 26 	call	0x4c80	; 0x4c80 <uart_puts>
    3926:	04 c0       	rjmp	.+8      	; 0x3930 <__vector_11+0xea>
	}
	else{
		uart_puts("Error logging.");
    3928:	8f e5       	ldi	r24, 0x5F	; 95
    392a:	91 e0       	ldi	r25, 0x01	; 1
    392c:	0e 94 40 26 	call	0x4c80	; 0x4c80 <uart_puts>
	}
	
	reset_hits();
    3930:	0e 94 af 1a 	call	0x355e	; 0x355e <reset_hits>
	times = 0;
    3934:	10 92 a0 02 	sts	0x02A0, r1	; 0x8002a0 <times>
	}
}
    3938:	0f 90       	pop	r0
    393a:	df 91       	pop	r29
    393c:	cf 91       	pop	r28
    393e:	ff 91       	pop	r31
    3940:	ef 91       	pop	r30
    3942:	bf 91       	pop	r27
    3944:	af 91       	pop	r26
    3946:	9f 91       	pop	r25
    3948:	8f 91       	pop	r24
    394a:	7f 91       	pop	r23
    394c:	6f 91       	pop	r22
    394e:	5f 91       	pop	r21
    3950:	4f 91       	pop	r20
    3952:	3f 91       	pop	r19
    3954:	2f 91       	pop	r18
    3956:	1f 91       	pop	r17
    3958:	0f 91       	pop	r16
    395a:	ff 90       	pop	r15
    395c:	ef 90       	pop	r14
    395e:	df 90       	pop	r13
    3960:	cf 90       	pop	r12
    3962:	0f 90       	pop	r0
    3964:	0f be       	out	0x3f, r0	; 63
    3966:	0f 90       	pop	r0
    3968:	1f 90       	pop	r1
    396a:	18 95       	reti

0000396c <InitADC>:
}
//------------------------------------------------------------
void InitADC()
{
	// Select Vref=AVcc
	ADMUX |= (1<<REFS0);
    396c:	ec e7       	ldi	r30, 0x7C	; 124
    396e:	f0 e0       	ldi	r31, 0x00	; 0
    3970:	80 81       	ld	r24, Z
    3972:	80 64       	ori	r24, 0x40	; 64
    3974:	80 83       	st	Z, r24
	//set prescaller to 128 and enable ADC
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADEN);
    3976:	ea e7       	ldi	r30, 0x7A	; 122
    3978:	f0 e0       	ldi	r31, 0x00	; 0
    397a:	80 81       	ld	r24, Z
    397c:	87 68       	ori	r24, 0x87	; 135
    397e:	80 83       	st	Z, r24
    3980:	08 95       	ret

00003982 <ReadADC>:
//----------------------------------------------------------

uint16_t ReadADC(uint8_t ADCchannel)
{
	//select ADC channel with safety mask
	ADMUX = (ADMUX & 0xF0) | (ADCchannel & 0x0F);
    3982:	ec e7       	ldi	r30, 0x7C	; 124
    3984:	f0 e0       	ldi	r31, 0x00	; 0
    3986:	90 81       	ld	r25, Z
    3988:	90 7f       	andi	r25, 0xF0	; 240
    398a:	8f 70       	andi	r24, 0x0F	; 15
    398c:	89 2b       	or	r24, r25
    398e:	80 83       	st	Z, r24
	//single conversion mode
	ADCSRA |= (1<<ADSC);
    3990:	ea e7       	ldi	r30, 0x7A	; 122
    3992:	f0 e0       	ldi	r31, 0x00	; 0
    3994:	80 81       	ld	r24, Z
    3996:	80 64       	ori	r24, 0x40	; 64
    3998:	80 83       	st	Z, r24
	// wait until ADC conversion is complete
	while( ADCSRA & (1<<ADSC) );
    399a:	80 81       	ld	r24, Z
    399c:	86 fd       	sbrc	r24, 6
    399e:	fd cf       	rjmp	.-6      	; 0x399a <ReadADC+0x18>
	return ADC;
    39a0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
    39a4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
}
    39a8:	08 95       	ret

000039aa <main>:
char times = 0;
int main(void)
{	
	//init lcd
	
	DDRB = 0x00;
    39aa:	14 b8       	out	0x04, r1	; 4
	PORTB = 0x01;
    39ac:	81 e0       	ldi	r24, 0x01	; 1
    39ae:	85 b9       	out	0x05, r24	; 5
	
	
	lcd_init(LCD_DISP_ON_BLINK);
    39b0:	8d e0       	ldi	r24, 0x0D	; 13
    39b2:	0e 94 aa 19 	call	0x3354	; 0x3354 <lcd_init>

	//lcd go home
	lcd_home();
    39b6:	0e 94 72 19 	call	0x32e4	; 0x32e4 <lcd_home>
	lcd_led(led); //set led
    39ba:	80 91 a9 02 	lds	r24, 0x02A9	; 0x8002a9 <led>
    39be:	0e 94 5f 19 	call	0x32be	; 0x32be <lcd_led>
	//init uart
	uart_init();
    39c2:	0e 94 24 26 	call	0x4c48	; 0x4c48 <uart_init>
	InitADC();
    39c6:	0e 94 b6 1c 	call	0x396c	; 0x396c <InitADC>
	init_timer_interrupt();
    39ca:	0e 94 28 1a 	call	0x3450	; 0x3450 <init_timer_interrupt>
    sei();
    39ce:	78 94       	sei
	uart_puts_p(PSTR("Welcome..."));
    39d0:	8b eb       	ldi	r24, 0xBB	; 187
    39d2:	91 e0       	ldi	r25, 0x01	; 1
    39d4:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <uart_puts_p>
	sd_loaded = Init_sdcard();
    39d8:	0e 94 c1 1a 	call	0x3582	; 0x3582 <Init_sdcard>
    39dc:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <sd_loaded>
	if (sd_loaded){
    39e0:	88 23       	and	r24, r24
    39e2:	59 f0       	breq	.+22     	; 0x39fa <main+0x50>
	lcd_clrscr();
    39e4:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <lcd_clrscr>
	lcd_gotoxy(0,0);
    39e8:	60 e0       	ldi	r22, 0x00	; 0
    39ea:	80 e0       	ldi	r24, 0x00	; 0
    39ec:	0e 94 51 19 	call	0x32a2	; 0x32a2 <lcd_gotoxy>
	lcd_puts("Sd-card loaded..");
    39f0:	8e e6       	ldi	r24, 0x6E	; 110
    39f2:	91 e0       	ldi	r25, 0x01	; 1
    39f4:	0e 94 9a 19 	call	0x3334	; 0x3334 <lcd_puts>
    39f8:	12 c0       	rjmp	.+36     	; 0x3a1e <main+0x74>
	}
	else{
	lcd_clrscr();
    39fa:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <lcd_clrscr>
	lcd_gotoxy(0,0);
    39fe:	60 e0       	ldi	r22, 0x00	; 0
    3a00:	80 e0       	ldi	r24, 0x00	; 0
    3a02:	0e 94 51 19 	call	0x32a2	; 0x32a2 <lcd_gotoxy>
	lcd_puts("Error in");
    3a06:	8f e7       	ldi	r24, 0x7F	; 127
    3a08:	91 e0       	ldi	r25, 0x01	; 1
    3a0a:	0e 94 9a 19 	call	0x3334	; 0x3334 <lcd_puts>
	lcd_gotoxy(0,1);
    3a0e:	61 e0       	ldi	r22, 0x01	; 1
    3a10:	80 e0       	ldi	r24, 0x00	; 0
    3a12:	0e 94 51 19 	call	0x32a2	; 0x32a2 <lcd_gotoxy>
	lcd_puts("loading sd-card");
    3a16:	88 e8       	ldi	r24, 0x88	; 136
    3a18:	91 e0       	ldi	r25, 0x01	; 1
    3a1a:	0e 94 9a 19 	call	0x3334	; 0x3334 <lcd_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3a1e:	2f ef       	ldi	r18, 0xFF	; 255
    3a20:	89 e6       	ldi	r24, 0x69	; 105
    3a22:	98 e1       	ldi	r25, 0x18	; 24
    3a24:	21 50       	subi	r18, 0x01	; 1
    3a26:	80 40       	sbci	r24, 0x00	; 0
    3a28:	90 40       	sbci	r25, 0x00	; 0
    3a2a:	e1 f7       	brne	.-8      	; 0x3a24 <main+0x7a>
    3a2c:	00 c0       	rjmp	.+0      	; 0x3a2e <main+0x84>
    3a2e:	00 00       	nop
    

    

    _delay_ms(1000);
	lcd_clrscr();
    3a30:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <lcd_clrscr>
    lcd_gotoxy(0,0);
    3a34:	60 e0       	ldi	r22, 0x00	; 0
    3a36:	80 e0       	ldi	r24, 0x00	; 0
    3a38:	0e 94 51 19 	call	0x32a2	; 0x32a2 <lcd_gotoxy>
    lcd_puts("Hits: ");
    3a3c:	88 e9       	ldi	r24, 0x98	; 152
    3a3e:	91 e0       	ldi	r25, 0x01	; 1
    3a40:	0e 94 9a 19 	call	0x3334	; 0x3334 <lcd_puts>
    3a44:	4a e0       	ldi	r20, 0x0A	; 10
    3a46:	69 e0       	ldi	r22, 0x09	; 9
    3a48:	75 e0       	ldi	r23, 0x05	; 5
    3a4a:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <hits_counter>
    3a4e:	90 91 a3 02 	lds	r25, 0x02A3	; 0x8002a3 <hits_counter+0x1>
    3a52:	0e 94 f5 27 	call	0x4fea	; 0x4fea <__itoa_ncheck>
    itoa(hits_counter,temp,10);
    lcd_puts(temp);
    3a56:	89 e0       	ldi	r24, 0x09	; 9
    3a58:	95 e0       	ldi	r25, 0x05	; 5
    3a5a:	0e 94 9a 19 	call	0x3334	; 0x3334 <lcd_puts>
    lcd_gotoxy(2,1);
    3a5e:	61 e0       	ldi	r22, 0x01	; 1
    3a60:	82 e0       	ldi	r24, 0x02	; 2
    3a62:	0e 94 51 19 	call	0x32a2	; 0x32a2 <lcd_gotoxy>
    lcd_puts("Last hit: ");
    3a66:	8f e9       	ldi	r24, 0x9F	; 159
    3a68:	91 e0       	ldi	r25, 0x01	; 1
    3a6a:	0e 94 9a 19 	call	0x3334	; 0x3334 <lcd_puts>
    3a6e:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <last_hit>
    3a72:	4a e0       	ldi	r20, 0x0A	; 10
    3a74:	69 e0       	ldi	r22, 0x09	; 9
    3a76:	75 e0       	ldi	r23, 0x05	; 5
    3a78:	90 e0       	ldi	r25, 0x00	; 0
    3a7a:	0e 94 f5 27 	call	0x4fea	; 0x4fea <__itoa_ncheck>
    itoa(last_hit,temp,10);
    lcd_puts(temp);
    3a7e:	89 e0       	ldi	r24, 0x09	; 9
    3a80:	95 e0       	ldi	r25, 0x05	; 5
    3a82:	0e 94 9a 19 	call	0x3334	; 0x3334 <lcd_puts>
	reset_hits();
    3a86:	0e 94 af 1a 	call	0x355e	; 0x355e <reset_hits>
				}
				else{
					if ( reading_r >100 && reading_r  < last_reading_r ){
						
						hits[hits_pt] = map_to_byte(reading_r );
						hits_types[hits_pt] = 'r';
    3a8a:	0f 2e       	mov	r0, r31
    3a8c:	f2 e7       	ldi	r31, 0x72	; 114
    3a8e:	ff 2e       	mov	r15, r31
    3a90:	f0 2d       	mov	r31, r0
				}
				else{
					if ( reading_l>100 && reading_l < last_reading_l){
				  
					hits[hits_pt] = map_to_byte(reading_l);
					hits_types[hits_pt] = 'l';
    3a92:	0c e6       	ldi	r16, 0x6C	; 108
			}
			else{
				if ( reading_u >100 && reading_u  < last_reading_u ){
					
					hits[hits_pt] = map_to_byte(reading_u );
					hits_types[hits_pt] = 'u';
    3a94:	15 e7       	ldi	r17, 0x75	; 117
    lcd_puts(temp);
	reset_hits();
    while(1) {
		
		
		if ( (PINB & (1<<0)) == 0){
    3a96:	18 99       	sbic	0x03, 0	; 3
    3a98:	07 c2       	rjmp	.+1038   	; 0x3ea8 <main+0x4fe>
			uart_puts("Button pressed..");
    3a9a:	8a ea       	ldi	r24, 0xAA	; 170
    3a9c:	91 e0       	ldi	r25, 0x01	; 1
    3a9e:	0e 94 40 26 	call	0x4c80	; 0x4c80 <uart_puts>
    3aa2:	2f ef       	ldi	r18, 0xFF	; 255
    3aa4:	83 ed       	ldi	r24, 0xD3	; 211
    3aa6:	90 e3       	ldi	r25, 0x30	; 48
    3aa8:	21 50       	subi	r18, 0x01	; 1
    3aaa:	80 40       	sbci	r24, 0x00	; 0
    3aac:	90 40       	sbci	r25, 0x00	; 0
    3aae:	e1 f7       	brne	.-8      	; 0x3aa8 <main+0xfe>
    3ab0:	00 c0       	rjmp	.+0      	; 0x3ab2 <main+0x108>
    3ab2:	00 00       	nop
			_delay_ms(2000);
			
			if( (PINB & (1<<0)) == 0){
    3ab4:	18 99       	sbic	0x03, 0	; 3
    3ab6:	f8 c1       	rjmp	.+1008   	; 0x3ea8 <main+0x4fe>
				reset_data();
    3ab8:	0e 94 3c 1a 	call	0x3478	; 0x3478 <reset_data>
				lcd_clrscr();
    3abc:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <lcd_clrscr>
				lcd_gotoxy(0,0);
    3ac0:	60 e0       	ldi	r22, 0x00	; 0
    3ac2:	80 e0       	ldi	r24, 0x00	; 0
    3ac4:	0e 94 51 19 	call	0x32a2	; 0x32a2 <lcd_gotoxy>
				lcd_puts("Hits: ");
    3ac8:	88 e9       	ldi	r24, 0x98	; 152
    3aca:	91 e0       	ldi	r25, 0x01	; 1
    3acc:	0e 94 9a 19 	call	0x3334	; 0x3334 <lcd_puts>
    3ad0:	4a e0       	ldi	r20, 0x0A	; 10
    3ad2:	69 e0       	ldi	r22, 0x09	; 9
    3ad4:	75 e0       	ldi	r23, 0x05	; 5
    3ad6:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <hits_counter>
    3ada:	90 91 a3 02 	lds	r25, 0x02A3	; 0x8002a3 <hits_counter+0x1>
    3ade:	0e 94 f5 27 	call	0x4fea	; 0x4fea <__itoa_ncheck>
				itoa(hits_counter,temp,10);
				lcd_puts(temp);
    3ae2:	89 e0       	ldi	r24, 0x09	; 9
    3ae4:	95 e0       	ldi	r25, 0x05	; 5
    3ae6:	0e 94 9a 19 	call	0x3334	; 0x3334 <lcd_puts>
				lcd_gotoxy(2,1);
    3aea:	61 e0       	ldi	r22, 0x01	; 1
    3aec:	82 e0       	ldi	r24, 0x02	; 2
    3aee:	0e 94 51 19 	call	0x32a2	; 0x32a2 <lcd_gotoxy>
				lcd_puts("Last hit: ");
    3af2:	8f e9       	ldi	r24, 0x9F	; 159
    3af4:	91 e0       	ldi	r25, 0x01	; 1
    3af6:	0e 94 9a 19 	call	0x3334	; 0x3334 <lcd_puts>
    3afa:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <last_hit>
    3afe:	4a e0       	ldi	r20, 0x0A	; 10
    3b00:	69 e0       	ldi	r22, 0x09	; 9
    3b02:	75 e0       	ldi	r23, 0x05	; 5
    3b04:	90 e0       	ldi	r25, 0x00	; 0
    3b06:	0e 94 f5 27 	call	0x4fea	; 0x4fea <__itoa_ncheck>
				itoa(last_hit,temp,10);
				lcd_puts(temp);
    3b0a:	89 e0       	ldi	r24, 0x09	; 9
    3b0c:	95 e0       	ldi	r25, 0x05	; 5
    3b0e:	0e 94 9a 19 	call	0x3334	; 0x3334 <lcd_puts>
    3b12:	ca c1       	rjmp	.+916    	; 0x3ea8 <main+0x4fe>
    3b14:	21 96       	adiw	r28, 0x01	; 1
    3b16:	ce 01       	movw	r24, r28
    3b18:	01 97       	sbiw	r24, 0x01	; 1
		}
		
		
		for (int i = 0; i < 3;i++){
			
		switch (i){
    3b1a:	81 30       	cpi	r24, 0x01	; 1
    3b1c:	91 05       	cpc	r25, r1
    3b1e:	09 f4       	brne	.+2      	; 0x3b22 <main+0x178>
    3b20:	99 c0       	rjmp	.+306    	; 0x3c54 <main+0x2aa>
    3b22:	20 f0       	brcs	.+8      	; 0x3b2c <main+0x182>
    3b24:	02 97       	sbiw	r24, 0x02	; 2
    3b26:	09 f4       	brne	.+2      	; 0x3b2a <main+0x180>
    3b28:	26 c1       	rjmp	.+588    	; 0x3d76 <main+0x3cc>
    3b2a:	b9 c1       	rjmp	.+882    	; 0x3e9e <main+0x4f4>
			
			case 0 :	
				reading_l = ReadADC(0);
    3b2c:	80 e0       	ldi	r24, 0x00	; 0
    3b2e:	0e 94 c1 1c 	call	0x3982	; 0x3982 <ReadADC>
    3b32:	90 93 b5 02 	sts	0x02B5, r25	; 0x8002b5 <reading_l+0x1>
    3b36:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <reading_l>
				if (!hit_started_l){
    3b3a:	20 91 d3 04 	lds	r18, 0x04D3	; 0x8004d3 <hit_started_l>
    3b3e:	21 11       	cpse	r18, r1
    3b40:	10 c0       	rjmp	.+32     	; 0x3b62 <main+0x1b8>
					if (reading_l > 100 && reading_l>last_reading_l){
    3b42:	85 36       	cpi	r24, 0x65	; 101
    3b44:	91 05       	cpc	r25, r1
    3b46:	08 f4       	brcc	.+2      	; 0x3b4a <main+0x1a0>
    3b48:	7c c0       	rjmp	.+248    	; 0x3c42 <main+0x298>
    3b4a:	20 91 ae 02 	lds	r18, 0x02AE	; 0x8002ae <last_reading_l>
    3b4e:	30 91 af 02 	lds	r19, 0x02AF	; 0x8002af <last_reading_l+0x1>
    3b52:	28 17       	cp	r18, r24
    3b54:	39 07       	cpc	r19, r25
    3b56:	08 f0       	brcs	.+2      	; 0x3b5a <main+0x1b0>
    3b58:	74 c0       	rjmp	.+232    	; 0x3c42 <main+0x298>
					hit_started_l = true;
    3b5a:	81 e0       	ldi	r24, 0x01	; 1
    3b5c:	80 93 d3 04 	sts	0x04D3, r24	; 0x8004d3 <hit_started_l>
    3b60:	70 c0       	rjmp	.+224    	; 0x3c42 <main+0x298>
					}
				}
				else{
					if ( reading_l>100 && reading_l < last_reading_l){
    3b62:	85 36       	cpi	r24, 0x65	; 101
    3b64:	91 05       	cpc	r25, r1
    3b66:	08 f4       	brcc	.+2      	; 0x3b6a <main+0x1c0>
    3b68:	6c c0       	rjmp	.+216    	; 0x3c42 <main+0x298>
    3b6a:	20 91 ae 02 	lds	r18, 0x02AE	; 0x8002ae <last_reading_l>
    3b6e:	30 91 af 02 	lds	r19, 0x02AF	; 0x8002af <last_reading_l+0x1>
    3b72:	82 17       	cp	r24, r18
    3b74:	93 07       	cpc	r25, r19
    3b76:	08 f0       	brcs	.+2      	; 0x3b7a <main+0x1d0>
    3b78:	64 c0       	rjmp	.+200    	; 0x3c42 <main+0x298>
				  
					hits[hits_pt] = map_to_byte(reading_l);
    3b7a:	40 91 a4 02 	lds	r20, 0x02A4	; 0x8002a4 <hits_pt>
    3b7e:	50 e0       	ldi	r21, 0x00	; 0
		_delay_ms(500);
		return all_ok;
}

uint8_t map_to_byte(uint16_t val){
	return (val/10);
    3b80:	9c 01       	movw	r18, r24
    3b82:	ad ec       	ldi	r26, 0xCD	; 205
    3b84:	bc ec       	ldi	r27, 0xCC	; 204
    3b86:	0e 94 bc 26 	call	0x4d78	; 0x4d78 <__umulhisi3>
    3b8a:	96 95       	lsr	r25
    3b8c:	87 95       	ror	r24
    3b8e:	96 95       	lsr	r25
    3b90:	87 95       	ror	r24
    3b92:	96 95       	lsr	r25
    3b94:	87 95       	ror	r24
					}
				}
				else{
					if ( reading_l>100 && reading_l < last_reading_l){
				  
					hits[hits_pt] = map_to_byte(reading_l);
    3b96:	fa 01       	movw	r30, r20
    3b98:	e9 5e       	subi	r30, 0xE9	; 233
    3b9a:	fa 4f       	sbci	r31, 0xFA	; 250
    3b9c:	80 83       	st	Z, r24
					hits_types[hits_pt] = 'l';
    3b9e:	e0 91 a4 02 	lds	r30, 0x02A4	; 0x8002a4 <hits_pt>
    3ba2:	f0 e0       	ldi	r31, 0x00	; 0
    3ba4:	e3 5d       	subi	r30, 0xD3	; 211
    3ba6:	fa 4f       	sbci	r31, 0xFA	; 250
    3ba8:	00 83       	st	Z, r16
					last_hit = hits[hits_pt];
    3baa:	e0 91 a4 02 	lds	r30, 0x02A4	; 0x8002a4 <hits_pt>
    3bae:	f0 e0       	ldi	r31, 0x00	; 0
    3bb0:	e9 5e       	subi	r30, 0xE9	; 233
    3bb2:	fa 4f       	sbci	r31, 0xFA	; 250
    3bb4:	80 81       	ld	r24, Z
    3bb6:	80 93 a1 02 	sts	0x02A1, r24	; 0x8002a1 <last_hit>
					
					hits_pt++;
    3bba:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <hits_pt>
    3bbe:	8f 5f       	subi	r24, 0xFF	; 255
    3bc0:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <hits_pt>
				  
					hits_counter++;
    3bc4:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <hits_counter>
    3bc8:	90 91 a3 02 	lds	r25, 0x02A3	; 0x8002a3 <hits_counter+0x1>
    3bcc:	01 96       	adiw	r24, 0x01	; 1
    3bce:	90 93 a3 02 	sts	0x02A3, r25	; 0x8002a3 <hits_counter+0x1>
    3bd2:	80 93 a2 02 	sts	0x02A2, r24	; 0x8002a2 <hits_counter>
					lcd_clrscr();
    3bd6:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <lcd_clrscr>
					hit_started_l = false;
    3bda:	10 92 d3 04 	sts	0x04D3, r1	; 0x8004d3 <hit_started_l>
					lcd_gotoxy(0,0);
    3bde:	60 e0       	ldi	r22, 0x00	; 0
    3be0:	80 e0       	ldi	r24, 0x00	; 0
    3be2:	0e 94 51 19 	call	0x32a2	; 0x32a2 <lcd_gotoxy>
					lcd_puts("Hits: ");
    3be6:	88 e9       	ldi	r24, 0x98	; 152
    3be8:	91 e0       	ldi	r25, 0x01	; 1
    3bea:	0e 94 9a 19 	call	0x3334	; 0x3334 <lcd_puts>
    3bee:	4a e0       	ldi	r20, 0x0A	; 10
    3bf0:	69 e0       	ldi	r22, 0x09	; 9
    3bf2:	75 e0       	ldi	r23, 0x05	; 5
    3bf4:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <hits_counter>
    3bf8:	90 91 a3 02 	lds	r25, 0x02A3	; 0x8002a3 <hits_counter+0x1>
    3bfc:	0e 94 f5 27 	call	0x4fea	; 0x4fea <__itoa_ncheck>
					itoa(hits_counter,temp,10);
					lcd_puts(temp);
    3c00:	89 e0       	ldi	r24, 0x09	; 9
    3c02:	95 e0       	ldi	r25, 0x05	; 5
    3c04:	0e 94 9a 19 	call	0x3334	; 0x3334 <lcd_puts>
					lcd_gotoxy(2,1);
    3c08:	61 e0       	ldi	r22, 0x01	; 1
    3c0a:	82 e0       	ldi	r24, 0x02	; 2
    3c0c:	0e 94 51 19 	call	0x32a2	; 0x32a2 <lcd_gotoxy>
					lcd_puts("Last hit: ");
    3c10:	8f e9       	ldi	r24, 0x9F	; 159
    3c12:	91 e0       	ldi	r25, 0x01	; 1
    3c14:	0e 94 9a 19 	call	0x3334	; 0x3334 <lcd_puts>
    3c18:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <last_hit>
    3c1c:	4a e0       	ldi	r20, 0x0A	; 10
    3c1e:	69 e0       	ldi	r22, 0x09	; 9
    3c20:	75 e0       	ldi	r23, 0x05	; 5
    3c22:	90 e0       	ldi	r25, 0x00	; 0
    3c24:	0e 94 f5 27 	call	0x4fea	; 0x4fea <__itoa_ncheck>
					itoa(last_hit,temp,10);
					lcd_puts(temp);
    3c28:	89 e0       	ldi	r24, 0x09	; 9
    3c2a:	95 e0       	ldi	r25, 0x05	; 5
    3c2c:	0e 94 9a 19 	call	0x3334	; 0x3334 <lcd_puts>
    3c30:	2f e7       	ldi	r18, 0x7F	; 127
    3c32:	88 e3       	ldi	r24, 0x38	; 56
    3c34:	91 e0       	ldi	r25, 0x01	; 1
    3c36:	21 50       	subi	r18, 0x01	; 1
    3c38:	80 40       	sbci	r24, 0x00	; 0
    3c3a:	90 40       	sbci	r25, 0x00	; 0
    3c3c:	e1 f7       	brne	.-8      	; 0x3c36 <main+0x28c>
    3c3e:	00 c0       	rjmp	.+0      	; 0x3c40 <main+0x296>
    3c40:	00 00       	nop
				
				  
				  
						}
					}
					last_reading_l = reading_l;
    3c42:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <reading_l>
    3c46:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <reading_l+0x1>
    3c4a:	90 93 af 02 	sts	0x02AF, r25	; 0x8002af <last_reading_l+0x1>
    3c4e:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <last_reading_l>
					break;
    3c52:	60 cf       	rjmp	.-320    	; 0x3b14 <main+0x16a>
					
			case 1:
				reading_r = ReadADC(1);
    3c54:	81 e0       	ldi	r24, 0x01	; 1
    3c56:	0e 94 c1 1c 	call	0x3982	; 0x3982 <ReadADC>
    3c5a:	90 93 b3 02 	sts	0x02B3, r25	; 0x8002b3 <reading_r+0x1>
    3c5e:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <reading_r>
				if (!hit_started_r ){
    3c62:	20 91 d4 04 	lds	r18, 0x04D4	; 0x8004d4 <hit_started_r>
    3c66:	21 11       	cpse	r18, r1
    3c68:	10 c0       	rjmp	.+32     	; 0x3c8a <main+0x2e0>
					if (reading_r  > 100 && reading_r >last_reading_r ){
    3c6a:	85 36       	cpi	r24, 0x65	; 101
    3c6c:	91 05       	cpc	r25, r1
    3c6e:	08 f4       	brcc	.+2      	; 0x3c72 <main+0x2c8>
    3c70:	79 c0       	rjmp	.+242    	; 0x3d64 <main+0x3ba>
    3c72:	20 91 ac 02 	lds	r18, 0x02AC	; 0x8002ac <last_reading_r>
    3c76:	30 91 ad 02 	lds	r19, 0x02AD	; 0x8002ad <last_reading_r+0x1>
    3c7a:	28 17       	cp	r18, r24
    3c7c:	39 07       	cpc	r19, r25
    3c7e:	08 f0       	brcs	.+2      	; 0x3c82 <main+0x2d8>
    3c80:	71 c0       	rjmp	.+226    	; 0x3d64 <main+0x3ba>
						hit_started_r  = true;
    3c82:	81 e0       	ldi	r24, 0x01	; 1
    3c84:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <hit_started_r>
    3c88:	6d c0       	rjmp	.+218    	; 0x3d64 <main+0x3ba>
					}
				}
				else{
					if ( reading_r >100 && reading_r  < last_reading_r ){
    3c8a:	85 36       	cpi	r24, 0x65	; 101
    3c8c:	91 05       	cpc	r25, r1
    3c8e:	08 f4       	brcc	.+2      	; 0x3c92 <main+0x2e8>
    3c90:	69 c0       	rjmp	.+210    	; 0x3d64 <main+0x3ba>
    3c92:	20 91 ac 02 	lds	r18, 0x02AC	; 0x8002ac <last_reading_r>
    3c96:	30 91 ad 02 	lds	r19, 0x02AD	; 0x8002ad <last_reading_r+0x1>
    3c9a:	82 17       	cp	r24, r18
    3c9c:	93 07       	cpc	r25, r19
    3c9e:	08 f0       	brcs	.+2      	; 0x3ca2 <main+0x2f8>
    3ca0:	61 c0       	rjmp	.+194    	; 0x3d64 <main+0x3ba>
						
						hits[hits_pt] = map_to_byte(reading_r );
    3ca2:	40 91 a4 02 	lds	r20, 0x02A4	; 0x8002a4 <hits_pt>
    3ca6:	50 e0       	ldi	r21, 0x00	; 0
		_delay_ms(500);
		return all_ok;
}

uint8_t map_to_byte(uint16_t val){
	return (val/10);
    3ca8:	9c 01       	movw	r18, r24
    3caa:	ad ec       	ldi	r26, 0xCD	; 205
    3cac:	bc ec       	ldi	r27, 0xCC	; 204
    3cae:	0e 94 bc 26 	call	0x4d78	; 0x4d78 <__umulhisi3>
    3cb2:	96 95       	lsr	r25
    3cb4:	87 95       	ror	r24
    3cb6:	96 95       	lsr	r25
    3cb8:	87 95       	ror	r24
    3cba:	96 95       	lsr	r25
    3cbc:	87 95       	ror	r24
					}
				}
				else{
					if ( reading_r >100 && reading_r  < last_reading_r ){
						
						hits[hits_pt] = map_to_byte(reading_r );
    3cbe:	fa 01       	movw	r30, r20
    3cc0:	e9 5e       	subi	r30, 0xE9	; 233
    3cc2:	fa 4f       	sbci	r31, 0xFA	; 250
    3cc4:	80 83       	st	Z, r24
						hits_types[hits_pt] = 'r';
    3cc6:	e0 91 a4 02 	lds	r30, 0x02A4	; 0x8002a4 <hits_pt>
    3cca:	f0 e0       	ldi	r31, 0x00	; 0
    3ccc:	e3 5d       	subi	r30, 0xD3	; 211
    3cce:	fa 4f       	sbci	r31, 0xFA	; 250
    3cd0:	f0 82       	st	Z, r15
						last_hit = hits[hits_pt];
    3cd2:	e0 91 a4 02 	lds	r30, 0x02A4	; 0x8002a4 <hits_pt>
    3cd6:	f0 e0       	ldi	r31, 0x00	; 0
    3cd8:	e9 5e       	subi	r30, 0xE9	; 233
    3cda:	fa 4f       	sbci	r31, 0xFA	; 250
    3cdc:	80 81       	ld	r24, Z
    3cde:	80 93 a1 02 	sts	0x02A1, r24	; 0x8002a1 <last_hit>
						
						hits_pt++;
    3ce2:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <hits_pt>
    3ce6:	8f 5f       	subi	r24, 0xFF	; 255
    3ce8:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <hits_pt>
						
						hits_counter++;
    3cec:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <hits_counter>
    3cf0:	90 91 a3 02 	lds	r25, 0x02A3	; 0x8002a3 <hits_counter+0x1>
    3cf4:	01 96       	adiw	r24, 0x01	; 1
    3cf6:	90 93 a3 02 	sts	0x02A3, r25	; 0x8002a3 <hits_counter+0x1>
    3cfa:	80 93 a2 02 	sts	0x02A2, r24	; 0x8002a2 <hits_counter>
						lcd_clrscr();
    3cfe:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <lcd_clrscr>
						hit_started_r  = false;
    3d02:	10 92 d4 04 	sts	0x04D4, r1	; 0x8004d4 <hit_started_r>
						lcd_gotoxy(0,0);
    3d06:	60 e0       	ldi	r22, 0x00	; 0
    3d08:	80 e0       	ldi	r24, 0x00	; 0
    3d0a:	0e 94 51 19 	call	0x32a2	; 0x32a2 <lcd_gotoxy>
						lcd_puts("Hits: ");
    3d0e:	88 e9       	ldi	r24, 0x98	; 152
    3d10:	91 e0       	ldi	r25, 0x01	; 1
    3d12:	0e 94 9a 19 	call	0x3334	; 0x3334 <lcd_puts>
    3d16:	4a e0       	ldi	r20, 0x0A	; 10
    3d18:	69 e0       	ldi	r22, 0x09	; 9
    3d1a:	75 e0       	ldi	r23, 0x05	; 5
    3d1c:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <hits_counter>
    3d20:	90 91 a3 02 	lds	r25, 0x02A3	; 0x8002a3 <hits_counter+0x1>
    3d24:	0e 94 f5 27 	call	0x4fea	; 0x4fea <__itoa_ncheck>
						itoa(hits_counter,temp,10);
						lcd_puts(temp);
    3d28:	89 e0       	ldi	r24, 0x09	; 9
    3d2a:	95 e0       	ldi	r25, 0x05	; 5
    3d2c:	0e 94 9a 19 	call	0x3334	; 0x3334 <lcd_puts>
						lcd_gotoxy(2,1);
    3d30:	61 e0       	ldi	r22, 0x01	; 1
    3d32:	82 e0       	ldi	r24, 0x02	; 2
    3d34:	0e 94 51 19 	call	0x32a2	; 0x32a2 <lcd_gotoxy>
						lcd_puts("Last hit: ");
    3d38:	8f e9       	ldi	r24, 0x9F	; 159
    3d3a:	91 e0       	ldi	r25, 0x01	; 1
    3d3c:	0e 94 9a 19 	call	0x3334	; 0x3334 <lcd_puts>
    3d40:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <last_hit>
    3d44:	4a e0       	ldi	r20, 0x0A	; 10
    3d46:	69 e0       	ldi	r22, 0x09	; 9
    3d48:	75 e0       	ldi	r23, 0x05	; 5
    3d4a:	90 e0       	ldi	r25, 0x00	; 0
    3d4c:	0e 94 f5 27 	call	0x4fea	; 0x4fea <__itoa_ncheck>
						itoa(last_hit,temp,10);
						lcd_puts(temp);
    3d50:	89 e0       	ldi	r24, 0x09	; 9
    3d52:	95 e0       	ldi	r25, 0x05	; 5
    3d54:	0e 94 9a 19 	call	0x3334	; 0x3334 <lcd_puts>
    3d58:	8f e3       	ldi	r24, 0x3F	; 63
    3d5a:	9c e9       	ldi	r25, 0x9C	; 156
    3d5c:	01 97       	sbiw	r24, 0x01	; 1
    3d5e:	f1 f7       	brne	.-4      	; 0x3d5c <main+0x3b2>
    3d60:	00 c0       	rjmp	.+0      	; 0x3d62 <main+0x3b8>
    3d62:	00 00       	nop
						
						
						
					}
				}
				last_reading_r  = reading_r ;
    3d64:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <reading_r>
    3d68:	90 91 b3 02 	lds	r25, 0x02B3	; 0x8002b3 <reading_r+0x1>
    3d6c:	90 93 ad 02 	sts	0x02AD, r25	; 0x8002ad <last_reading_r+0x1>
    3d70:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <last_reading_r>
				break;
    3d74:	cf ce       	rjmp	.-610    	; 0x3b14 <main+0x16a>
				
			case 2:
			reading_u = ReadADC(2);
    3d76:	82 e0       	ldi	r24, 0x02	; 2
    3d78:	0e 94 c1 1c 	call	0x3982	; 0x3982 <ReadADC>
    3d7c:	90 93 b1 02 	sts	0x02B1, r25	; 0x8002b1 <reading_u+0x1>
    3d80:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <reading_u>
			if (!hit_started_u ){
    3d84:	20 91 d7 04 	lds	r18, 0x04D7	; 0x8004d7 <hit_started_u>
    3d88:	21 11       	cpse	r18, r1
    3d8a:	10 c0       	rjmp	.+32     	; 0x3dac <main+0x402>
				if (reading_u  > 100 && reading_u >last_reading_u ){
    3d8c:	85 36       	cpi	r24, 0x65	; 101
    3d8e:	91 05       	cpc	r25, r1
    3d90:	08 f4       	brcc	.+2      	; 0x3d94 <main+0x3ea>
    3d92:	7c c0       	rjmp	.+248    	; 0x3e8c <main+0x4e2>
    3d94:	20 91 aa 02 	lds	r18, 0x02AA	; 0x8002aa <last_reading_u>
    3d98:	30 91 ab 02 	lds	r19, 0x02AB	; 0x8002ab <last_reading_u+0x1>
    3d9c:	28 17       	cp	r18, r24
    3d9e:	39 07       	cpc	r19, r25
    3da0:	08 f0       	brcs	.+2      	; 0x3da4 <main+0x3fa>
    3da2:	74 c0       	rjmp	.+232    	; 0x3e8c <main+0x4e2>
					hit_started_u  = true;
    3da4:	81 e0       	ldi	r24, 0x01	; 1
    3da6:	80 93 d7 04 	sts	0x04D7, r24	; 0x8004d7 <hit_started_u>
    3daa:	70 c0       	rjmp	.+224    	; 0x3e8c <main+0x4e2>
				}
			}
			else{
				if ( reading_u >100 && reading_u  < last_reading_u ){
    3dac:	85 36       	cpi	r24, 0x65	; 101
    3dae:	91 05       	cpc	r25, r1
    3db0:	08 f4       	brcc	.+2      	; 0x3db4 <main+0x40a>
    3db2:	6c c0       	rjmp	.+216    	; 0x3e8c <main+0x4e2>
    3db4:	20 91 aa 02 	lds	r18, 0x02AA	; 0x8002aa <last_reading_u>
    3db8:	30 91 ab 02 	lds	r19, 0x02AB	; 0x8002ab <last_reading_u+0x1>
    3dbc:	82 17       	cp	r24, r18
    3dbe:	93 07       	cpc	r25, r19
    3dc0:	08 f0       	brcs	.+2      	; 0x3dc4 <main+0x41a>
    3dc2:	64 c0       	rjmp	.+200    	; 0x3e8c <main+0x4e2>
					
					hits[hits_pt] = map_to_byte(reading_u );
    3dc4:	40 91 a4 02 	lds	r20, 0x02A4	; 0x8002a4 <hits_pt>
    3dc8:	50 e0       	ldi	r21, 0x00	; 0
		_delay_ms(500);
		return all_ok;
}

uint8_t map_to_byte(uint16_t val){
	return (val/10);
    3dca:	9c 01       	movw	r18, r24
    3dcc:	ad ec       	ldi	r26, 0xCD	; 205
    3dce:	bc ec       	ldi	r27, 0xCC	; 204
    3dd0:	0e 94 bc 26 	call	0x4d78	; 0x4d78 <__umulhisi3>
    3dd4:	96 95       	lsr	r25
    3dd6:	87 95       	ror	r24
    3dd8:	96 95       	lsr	r25
    3dda:	87 95       	ror	r24
    3ddc:	96 95       	lsr	r25
    3dde:	87 95       	ror	r24
				}
			}
			else{
				if ( reading_u >100 && reading_u  < last_reading_u ){
					
					hits[hits_pt] = map_to_byte(reading_u );
    3de0:	fa 01       	movw	r30, r20
    3de2:	e9 5e       	subi	r30, 0xE9	; 233
    3de4:	fa 4f       	sbci	r31, 0xFA	; 250
    3de6:	80 83       	st	Z, r24
					hits_types[hits_pt] = 'u';
    3de8:	e0 91 a4 02 	lds	r30, 0x02A4	; 0x8002a4 <hits_pt>
    3dec:	f0 e0       	ldi	r31, 0x00	; 0
    3dee:	e3 5d       	subi	r30, 0xD3	; 211
    3df0:	fa 4f       	sbci	r31, 0xFA	; 250
    3df2:	10 83       	st	Z, r17
					last_hit = hits[hits_pt];
    3df4:	e0 91 a4 02 	lds	r30, 0x02A4	; 0x8002a4 <hits_pt>
    3df8:	f0 e0       	ldi	r31, 0x00	; 0
    3dfa:	e9 5e       	subi	r30, 0xE9	; 233
    3dfc:	fa 4f       	sbci	r31, 0xFA	; 250
    3dfe:	80 81       	ld	r24, Z
    3e00:	80 93 a1 02 	sts	0x02A1, r24	; 0x8002a1 <last_hit>
					
					hits_pt++;
    3e04:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <hits_pt>
    3e08:	8f 5f       	subi	r24, 0xFF	; 255
    3e0a:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <hits_pt>
					
					hits_counter++;
    3e0e:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <hits_counter>
    3e12:	90 91 a3 02 	lds	r25, 0x02A3	; 0x8002a3 <hits_counter+0x1>
    3e16:	01 96       	adiw	r24, 0x01	; 1
    3e18:	90 93 a3 02 	sts	0x02A3, r25	; 0x8002a3 <hits_counter+0x1>
    3e1c:	80 93 a2 02 	sts	0x02A2, r24	; 0x8002a2 <hits_counter>
					lcd_clrscr();
    3e20:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <lcd_clrscr>
					hit_started_u  = false;
    3e24:	10 92 d7 04 	sts	0x04D7, r1	; 0x8004d7 <hit_started_u>
					lcd_gotoxy(0,0);
    3e28:	60 e0       	ldi	r22, 0x00	; 0
    3e2a:	80 e0       	ldi	r24, 0x00	; 0
    3e2c:	0e 94 51 19 	call	0x32a2	; 0x32a2 <lcd_gotoxy>
					lcd_puts("Hits: ");
    3e30:	88 e9       	ldi	r24, 0x98	; 152
    3e32:	91 e0       	ldi	r25, 0x01	; 1
    3e34:	0e 94 9a 19 	call	0x3334	; 0x3334 <lcd_puts>
    3e38:	4a e0       	ldi	r20, 0x0A	; 10
    3e3a:	69 e0       	ldi	r22, 0x09	; 9
    3e3c:	75 e0       	ldi	r23, 0x05	; 5
    3e3e:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <hits_counter>
    3e42:	90 91 a3 02 	lds	r25, 0x02A3	; 0x8002a3 <hits_counter+0x1>
    3e46:	0e 94 f5 27 	call	0x4fea	; 0x4fea <__itoa_ncheck>
					itoa(hits_counter,temp,10);
					lcd_puts(temp);
    3e4a:	89 e0       	ldi	r24, 0x09	; 9
    3e4c:	95 e0       	ldi	r25, 0x05	; 5
    3e4e:	0e 94 9a 19 	call	0x3334	; 0x3334 <lcd_puts>
					lcd_gotoxy(2,1);
    3e52:	61 e0       	ldi	r22, 0x01	; 1
    3e54:	82 e0       	ldi	r24, 0x02	; 2
    3e56:	0e 94 51 19 	call	0x32a2	; 0x32a2 <lcd_gotoxy>
					lcd_puts("Last hit: ");
    3e5a:	8f e9       	ldi	r24, 0x9F	; 159
    3e5c:	91 e0       	ldi	r25, 0x01	; 1
    3e5e:	0e 94 9a 19 	call	0x3334	; 0x3334 <lcd_puts>
    3e62:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <last_hit>
    3e66:	4a e0       	ldi	r20, 0x0A	; 10
    3e68:	69 e0       	ldi	r22, 0x09	; 9
    3e6a:	75 e0       	ldi	r23, 0x05	; 5
    3e6c:	90 e0       	ldi	r25, 0x00	; 0
    3e6e:	0e 94 f5 27 	call	0x4fea	; 0x4fea <__itoa_ncheck>
					itoa(last_hit,temp,10);
					lcd_puts(temp);
    3e72:	89 e0       	ldi	r24, 0x09	; 9
    3e74:	95 e0       	ldi	r25, 0x05	; 5
    3e76:	0e 94 9a 19 	call	0x3334	; 0x3334 <lcd_puts>
    3e7a:	9f e7       	ldi	r25, 0x7F	; 127
    3e7c:	28 e3       	ldi	r18, 0x38	; 56
    3e7e:	81 e0       	ldi	r24, 0x01	; 1
    3e80:	91 50       	subi	r25, 0x01	; 1
    3e82:	20 40       	sbci	r18, 0x00	; 0
    3e84:	80 40       	sbci	r24, 0x00	; 0
    3e86:	e1 f7       	brne	.-8      	; 0x3e80 <main+0x4d6>
    3e88:	00 c0       	rjmp	.+0      	; 0x3e8a <main+0x4e0>
    3e8a:	00 00       	nop
					
					
					
				}
			}
			last_reading_u  = reading_u ;
    3e8c:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <reading_u>
    3e90:	90 91 b1 02 	lds	r25, 0x02B1	; 0x8002b1 <reading_u+0x1>
    3e94:	90 93 ab 02 	sts	0x02AB, r25	; 0x8002ab <last_reading_u+0x1>
    3e98:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <last_reading_u>
    3e9c:	fc cd       	rjmp	.-1032   	; 0x3a96 <main+0xec>
				lcd_puts(temp);
			}
		}
		
		
		for (int i = 0; i < 3;i++){
    3e9e:	c3 30       	cpi	r28, 0x03	; 3
    3ea0:	d1 05       	cpc	r29, r1
    3ea2:	0c f4       	brge	.+2      	; 0x3ea6 <main+0x4fc>
    3ea4:	37 ce       	rjmp	.-914    	; 0x3b14 <main+0x16a>
    3ea6:	f7 cd       	rjmp	.-1042   	; 0x3a96 <main+0xec>
uint16_t hits_counter = 0;
uint8_t last_hit = 0;

char times = 0;
int main(void)
{	
    3ea8:	c1 e0       	ldi	r28, 0x01	; 1
    3eaa:	d0 e0       	ldi	r29, 0x00	; 0
    3eac:	34 ce       	rjmp	.-920    	; 0x3b16 <main+0x16c>

00003eae <partition_open>:
 *                  as a single partition (e.g. for "super floppy" use).
 * \returns 0 on failure, a partition descriptor on success.
 * \see partition_close
 */
struct partition_struct* partition_open(device_read_t device_read, device_read_interval_t device_read_interval, device_write_t device_write, device_write_interval_t device_write_interval, int8_t index)
{
    3eae:	6f 92       	push	r6
    3eb0:	7f 92       	push	r7
    3eb2:	8f 92       	push	r8
    3eb4:	9f 92       	push	r9
    3eb6:	af 92       	push	r10
    3eb8:	bf 92       	push	r11
    3eba:	cf 92       	push	r12
    3ebc:	df 92       	push	r13
    3ebe:	ef 92       	push	r14
    3ec0:	ff 92       	push	r15
    3ec2:	0f 93       	push	r16
    3ec4:	1f 93       	push	r17
    3ec6:	cf 93       	push	r28
    3ec8:	df 93       	push	r29
    3eca:	cd b7       	in	r28, 0x3d	; 61
    3ecc:	de b7       	in	r29, 0x3e	; 62
    3ece:	60 97       	sbiw	r28, 0x10	; 16
    3ed0:	0f b6       	in	r0, 0x3f	; 63
    3ed2:	f8 94       	cli
    3ed4:	de bf       	out	0x3e, r29	; 62
    3ed6:	0f be       	out	0x3f, r0	; 63
    3ed8:	cd bf       	out	0x3d, r28	; 61
    struct partition_struct* new_partition = 0;
    uint8_t buffer[0x10];

    if(!device_read || !device_read_interval || index >= 4)
    3eda:	00 97       	sbiw	r24, 0x00	; 0
    3edc:	71 f1       	breq	.+92     	; 0x3f3a <partition_open+0x8c>
    3ede:	61 15       	cp	r22, r1
    3ee0:	71 05       	cpc	r23, r1
    3ee2:	71 f1       	breq	.+92     	; 0x3f40 <partition_open+0x92>
    3ee4:	04 30       	cpi	r16, 0x04	; 4
    3ee6:	7c f5       	brge	.+94     	; 0x3f46 <partition_open+0x98>
        return 0;

    if(index >= 0)
    3ee8:	00 23       	and	r16, r16
    3eea:	0c f4       	brge	.+2      	; 0x3eee <partition_open+0x40>
    3eec:	74 c0       	rjmp	.+232    	; 0x3fd6 <partition_open+0x128>
    3eee:	39 01       	movw	r6, r18
    3ef0:	4a 01       	movw	r8, r20
    3ef2:	5b 01       	movw	r10, r22
    3ef4:	6c 01       	movw	r12, r24
    {
        /* read specified partition table index */
        if(!device_read(0x01be + index * 0x10, buffer, sizeof(buffer)))
    3ef6:	20 e1       	ldi	r18, 0x10	; 16
    3ef8:	02 02       	muls	r16, r18
    3efa:	c0 01       	movw	r24, r0
    3efc:	11 24       	eor	r1, r1
    3efe:	82 54       	subi	r24, 0x42	; 66
    3f00:	9e 4f       	sbci	r25, 0xFE	; 254
    3f02:	e9 2f       	mov	r30, r25
    3f04:	ee 0f       	add	r30, r30
    3f06:	ee 0b       	sbc	r30, r30
    3f08:	68 94       	set
    3f0a:	ee 24       	eor	r14, r14
    3f0c:	e4 f8       	bld	r14, 4
    3f0e:	f1 2c       	mov	r15, r1
    3f10:	8e 01       	movw	r16, r28
    3f12:	0f 5f       	subi	r16, 0xFF	; 255
    3f14:	1f 4f       	sbci	r17, 0xFF	; 255
    3f16:	28 2f       	mov	r18, r24
    3f18:	39 2f       	mov	r19, r25
    3f1a:	4e 2f       	mov	r20, r30
    3f1c:	5e 2f       	mov	r21, r30
    3f1e:	6e 2f       	mov	r22, r30
    3f20:	7e 2f       	mov	r23, r30
    3f22:	8e 2f       	mov	r24, r30
    3f24:	9e 2f       	mov	r25, r30
    3f26:	f6 01       	movw	r30, r12
    3f28:	09 95       	icall
    3f2a:	88 23       	and	r24, r24
    3f2c:	79 f0       	breq	.+30     	; 0x3f4c <partition_open+0x9e>
            return 0;

        /* abort on empty partition entry */
        if(buffer[4] == 0x00)
    3f2e:	8d 81       	ldd	r24, Y+5	; 0x05
    3f30:	81 11       	cpse	r24, r1
    3f32:	37 c0       	rjmp	.+110    	; 0x3fa2 <partition_open+0xf4>
            return 0;
    3f34:	80 e0       	ldi	r24, 0x00	; 0
    3f36:	90 e0       	ldi	r25, 0x00	; 0
    3f38:	54 c0       	rjmp	.+168    	; 0x3fe2 <partition_open+0x134>
{
    struct partition_struct* new_partition = 0;
    uint8_t buffer[0x10];

    if(!device_read || !device_read_interval || index >= 4)
        return 0;
    3f3a:	80 e0       	ldi	r24, 0x00	; 0
    3f3c:	90 e0       	ldi	r25, 0x00	; 0
    3f3e:	51 c0       	rjmp	.+162    	; 0x3fe2 <partition_open+0x134>
    3f40:	80 e0       	ldi	r24, 0x00	; 0
    3f42:	90 e0       	ldi	r25, 0x00	; 0
    3f44:	4e c0       	rjmp	.+156    	; 0x3fe2 <partition_open+0x134>
    3f46:	80 e0       	ldi	r24, 0x00	; 0
    3f48:	90 e0       	ldi	r25, 0x00	; 0
    3f4a:	4b c0       	rjmp	.+150    	; 0x3fe2 <partition_open+0x134>

    if(index >= 0)
    {
        /* read specified partition table index */
        if(!device_read(0x01be + index * 0x10, buffer, sizeof(buffer)))
            return 0;
    3f4c:	80 e0       	ldi	r24, 0x00	; 0
    3f4e:	90 e0       	ldi	r25, 0x00	; 0
    3f50:	48 c0       	rjmp	.+144    	; 0x3fe2 <partition_open+0x134>
    }
    if(i >= PARTITION_COUNT)
        return 0;
#endif

    memset(new_partition, 0, sizeof(*new_partition));
    3f52:	07 eb       	ldi	r16, 0xB7	; 183
    3f54:	12 e0       	ldi	r17, 0x02	; 2
    3f56:	81 e1       	ldi	r24, 0x11	; 17
    3f58:	d8 01       	movw	r26, r16
    3f5a:	1d 92       	st	X+, r1
    3f5c:	8a 95       	dec	r24
    3f5e:	e9 f7       	brne	.-6      	; 0x3f5a <partition_open+0xac>

    /* fill partition descriptor */
    new_partition->device_read = device_read;
    3f60:	f8 01       	movw	r30, r16
    3f62:	d1 82       	std	Z+1, r13	; 0x01
    3f64:	c0 82       	st	Z, r12
    new_partition->device_read_interval = device_read_interval;
    3f66:	b3 82       	std	Z+3, r11	; 0x03
    3f68:	a2 82       	std	Z+2, r10	; 0x02
    new_partition->device_write = device_write;
    3f6a:	95 82       	std	Z+5, r9	; 0x05
    3f6c:	84 82       	std	Z+4, r8	; 0x04
    new_partition->device_write_interval = device_write_interval;
    3f6e:	77 82       	std	Z+7, r7	; 0x07
    3f70:	66 82       	std	Z+6, r6	; 0x06

    if(index >= 0)
    {
        new_partition->type = buffer[4];
    3f72:	8d 81       	ldd	r24, Y+5	; 0x05
    3f74:	80 87       	std	Z+8, r24	; 0x08
        new_partition->offset = read32(&buffer[8]);
    3f76:	ce 01       	movw	r24, r28
    3f78:	09 96       	adiw	r24, 0x09	; 9
    3f7a:	0e 94 0c 01 	call	0x218	; 0x218 <read32>
    3f7e:	d8 01       	movw	r26, r16
    3f80:	19 96       	adiw	r26, 0x09	; 9
    3f82:	6d 93       	st	X+, r22
    3f84:	7d 93       	st	X+, r23
    3f86:	8d 93       	st	X+, r24
    3f88:	9c 93       	st	X, r25
    3f8a:	1c 97       	sbiw	r26, 0x0c	; 12
        new_partition->length = read32(&buffer[12]);
    3f8c:	ce 01       	movw	r24, r28
    3f8e:	0d 96       	adiw	r24, 0x0d	; 13
    3f90:	0e 94 0c 01 	call	0x218	; 0x218 <read32>
    3f94:	f8 01       	movw	r30, r16
    3f96:	65 87       	std	Z+13, r22	; 0x0d
    3f98:	76 87       	std	Z+14, r23	; 0x0e
    3f9a:	87 87       	std	Z+15, r24	; 0x0f
    3f9c:	90 8b       	std	Z+16, r25	; 0x10
#if USE_DYNAMIC_MEMORY
    new_partition = malloc(sizeof(*new_partition));
    if(!new_partition)
        return 0;
#else
    new_partition = partition_handles;
    3f9e:	c8 01       	movw	r24, r16
    3fa0:	20 c0       	rjmp	.+64     	; 0x3fe2 <partition_open+0x134>
    uint8_t i;
    for(i = 0; i < PARTITION_COUNT; ++i)
    {
        if(new_partition->type == PARTITION_TYPE_FREE)
    3fa2:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <partition_handles+0x8>
    3fa6:	88 23       	and	r24, r24
    3fa8:	a1 f2       	breq	.-88     	; 0x3f52 <partition_open+0xa4>
            break;

        ++new_partition;
    }
    if(i >= PARTITION_COUNT)
        return 0;
    3faa:	80 e0       	ldi	r24, 0x00	; 0
    3fac:	90 e0       	ldi	r25, 0x00	; 0
    3fae:	19 c0       	rjmp	.+50     	; 0x3fe2 <partition_open+0x134>
#endif

    memset(new_partition, 0, sizeof(*new_partition));
    3fb0:	e7 eb       	ldi	r30, 0xB7	; 183
    3fb2:	f2 e0       	ldi	r31, 0x02	; 2
    3fb4:	11 e1       	ldi	r17, 0x11	; 17
    3fb6:	df 01       	movw	r26, r30
    3fb8:	1d 92       	st	X+, r1
    3fba:	1a 95       	dec	r17
    3fbc:	e9 f7       	brne	.-6      	; 0x3fb8 <partition_open+0x10a>

    /* fill partition descriptor */
    new_partition->device_read = device_read;
    3fbe:	91 83       	std	Z+1, r25	; 0x01
    3fc0:	80 83       	st	Z, r24
    new_partition->device_read_interval = device_read_interval;
    3fc2:	73 83       	std	Z+3, r23	; 0x03
    3fc4:	62 83       	std	Z+2, r22	; 0x02
    new_partition->device_write = device_write;
    3fc6:	55 83       	std	Z+5, r21	; 0x05
    3fc8:	44 83       	std	Z+4, r20	; 0x04
    new_partition->device_write_interval = device_write_interval;
    3fca:	37 83       	std	Z+7, r19	; 0x07
    3fcc:	26 83       	std	Z+6, r18	; 0x06
        new_partition->offset = read32(&buffer[8]);
        new_partition->length = read32(&buffer[12]);
    }
    else
    {
        new_partition->type = 0xff;
    3fce:	8f ef       	ldi	r24, 0xFF	; 255
    3fd0:	80 87       	std	Z+8, r24	; 0x08
#if USE_DYNAMIC_MEMORY
    new_partition = malloc(sizeof(*new_partition));
    if(!new_partition)
        return 0;
#else
    new_partition = partition_handles;
    3fd2:	cf 01       	movw	r24, r30
    3fd4:	06 c0       	rjmp	.+12     	; 0x3fe2 <partition_open+0x134>
    uint8_t i;
    for(i = 0; i < PARTITION_COUNT; ++i)
    {
        if(new_partition->type == PARTITION_TYPE_FREE)
    3fd6:	e0 91 bf 02 	lds	r30, 0x02BF	; 0x8002bf <partition_handles+0x8>
    3fda:	ee 23       	and	r30, r30
    3fdc:	49 f3       	breq	.-46     	; 0x3fb0 <partition_open+0x102>
            break;

        ++new_partition;
    }
    if(i >= PARTITION_COUNT)
        return 0;
    3fde:	80 e0       	ldi	r24, 0x00	; 0
    3fe0:	90 e0       	ldi	r25, 0x00	; 0
    {
        new_partition->type = 0xff;
    }

    return new_partition;
}
    3fe2:	60 96       	adiw	r28, 0x10	; 16
    3fe4:	0f b6       	in	r0, 0x3f	; 63
    3fe6:	f8 94       	cli
    3fe8:	de bf       	out	0x3e, r29	; 62
    3fea:	0f be       	out	0x3f, r0	; 63
    3fec:	cd bf       	out	0x3d, r28	; 61
    3fee:	df 91       	pop	r29
    3ff0:	cf 91       	pop	r28
    3ff2:	1f 91       	pop	r17
    3ff4:	0f 91       	pop	r16
    3ff6:	ff 90       	pop	r15
    3ff8:	ef 90       	pop	r14
    3ffa:	df 90       	pop	r13
    3ffc:	cf 90       	pop	r12
    3ffe:	bf 90       	pop	r11
    4000:	af 90       	pop	r10
    4002:	9f 90       	pop	r9
    4004:	8f 90       	pop	r8
    4006:	7f 90       	pop	r7
    4008:	6f 90       	pop	r6
    400a:	08 95       	ret

0000400c <pcf8574_init>:
		i2c_write(b);
		i2c_stop();
		return 0;
	}
	return -1;
}
    400c:	0e 94 d1 25 	call	0x4ba2	; 0x4ba2 <i2c_init>
    4010:	83 e0       	ldi	r24, 0x03	; 3
    4012:	8a 95       	dec	r24
    4014:	f1 f7       	brne	.-4      	; 0x4012 <pcf8574_init+0x6>
    4016:	00 00       	nop
    4018:	10 92 d2 04 	sts	0x04D2, r1	; 0x8004d2 <pcf8574_pinstatus>
    401c:	08 95       	ret

0000401e <pcf8574_setoutput>:
    401e:	cf 93       	push	r28
    4020:	81 11       	cpse	r24, r1
    4022:	0d c0       	rjmp	.+26     	; 0x403e <pcf8574_setoutput+0x20>
    4024:	c6 2f       	mov	r28, r22
    4026:	60 93 d2 04 	sts	0x04D2, r22	; 0x8004d2 <pcf8574_pinstatus>
    402a:	8e e4       	ldi	r24, 0x4E	; 78
    402c:	0e 94 d7 25 	call	0x4bae	; 0x4bae <i2c_start>
    4030:	8c 2f       	mov	r24, r28
    4032:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <i2c_write>
    4036:	0e 94 fe 25 	call	0x4bfc	; 0x4bfc <i2c_stop>
    403a:	80 e0       	ldi	r24, 0x00	; 0
    403c:	01 c0       	rjmp	.+2      	; 0x4040 <pcf8574_setoutput+0x22>
    403e:	8f ef       	ldi	r24, 0xFF	; 255
    4040:	cf 91       	pop	r28
    4042:	08 95       	ret

00004044 <pcf8574_setoutputpin>:

/*
 * set output pin
 */
int8_t pcf8574_setoutputpin(uint8_t deviceid, uint8_t pin, uint8_t data) {
    4044:	cf 93       	push	r28
    4046:	df 93       	push	r29
	if((deviceid >= 0 && deviceid < PCF8574_MAXDEVICES) && (pin >= 0 && pin < PCF8574_MAXPINS)) {
    4048:	81 11       	cpse	r24, r1
    404a:	24 c0       	rjmp	.+72     	; 0x4094 <pcf8574_setoutputpin+0x50>
    404c:	68 30       	cpi	r22, 0x08	; 8
    404e:	20 f5       	brcc	.+72     	; 0x4098 <pcf8574_setoutputpin+0x54>
	    uint8_t b = 0;
	    b = pcf8574_pinstatus[deviceid];
    4050:	80 91 d2 04 	lds	r24, 0x04D2	; 0x8004d2 <pcf8574_pinstatus>
	    b = (data != 0) ? (b | (1 << pin)) : (b & ~(1 << pin));
    4054:	44 23       	and	r20, r20
    4056:	49 f0       	breq	.+18     	; 0x406a <pcf8574_setoutputpin+0x26>
    4058:	c1 e0       	ldi	r28, 0x01	; 1
    405a:	d0 e0       	ldi	r29, 0x00	; 0
    405c:	02 c0       	rjmp	.+4      	; 0x4062 <pcf8574_setoutputpin+0x1e>
    405e:	cc 0f       	add	r28, r28
    4060:	dd 1f       	adc	r29, r29
    4062:	6a 95       	dec	r22
    4064:	e2 f7       	brpl	.-8      	; 0x405e <pcf8574_setoutputpin+0x1a>
    4066:	c8 2b       	or	r28, r24
    4068:	09 c0       	rjmp	.+18     	; 0x407c <pcf8574_setoutputpin+0x38>
    406a:	c1 e0       	ldi	r28, 0x01	; 1
    406c:	d0 e0       	ldi	r29, 0x00	; 0
    406e:	02 c0       	rjmp	.+4      	; 0x4074 <pcf8574_setoutputpin+0x30>
    4070:	cc 0f       	add	r28, r28
    4072:	dd 1f       	adc	r29, r29
    4074:	6a 95       	dec	r22
    4076:	e2 f7       	brpl	.-8      	; 0x4070 <pcf8574_setoutputpin+0x2c>
    4078:	c0 95       	com	r28
    407a:	c8 23       	and	r28, r24
	    pcf8574_pinstatus[deviceid] = b;
    407c:	c0 93 d2 04 	sts	0x04D2, r28	; 0x8004d2 <pcf8574_pinstatus>
	    //update device
		i2c_start(((PCF8574_ADDRBASE+deviceid)<<1) | I2C_WRITE);
    4080:	8e e4       	ldi	r24, 0x4E	; 78
    4082:	0e 94 d7 25 	call	0x4bae	; 0x4bae <i2c_start>
		i2c_write(b);
    4086:	8c 2f       	mov	r24, r28
    4088:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <i2c_write>
		i2c_stop();
    408c:	0e 94 fe 25 	call	0x4bfc	; 0x4bfc <i2c_stop>
		return 0;
    4090:	80 e0       	ldi	r24, 0x00	; 0
    4092:	03 c0       	rjmp	.+6      	; 0x409a <pcf8574_setoutputpin+0x56>
	}
	return -1;
    4094:	8f ef       	ldi	r24, 0xFF	; 255
    4096:	01 c0       	rjmp	.+2      	; 0x409a <pcf8574_setoutputpin+0x56>
    4098:	8f ef       	ldi	r24, 0xFF	; 255
}
    409a:	df 91       	pop	r29
    409c:	cf 91       	pop	r28
    409e:	08 95       	ret

000040a0 <pcf8574_setoutputpinhigh>:

/*
 * set output pin high
 */
int8_t pcf8574_setoutputpinhigh(uint8_t deviceid, uint8_t pin) {
	return pcf8574_setoutputpin(deviceid, pin, 1);
    40a0:	41 e0       	ldi	r20, 0x01	; 1
    40a2:	0e 94 22 20 	call	0x4044	; 0x4044 <pcf8574_setoutputpin>
}
    40a6:	08 95       	ret

000040a8 <pcf8574_setoutputpinlow>:

/*
 * set output pin low
 */
int8_t pcf8574_setoutputpinlow(uint8_t deviceid, uint8_t pin) {
	return pcf8574_setoutputpin(deviceid, pin, 0);
    40a8:	40 e0       	ldi	r20, 0x00	; 0
    40aa:	0e 94 22 20 	call	0x4044	; 0x4044 <pcf8574_setoutputpin>
}
    40ae:	08 95       	ret

000040b0 <pcf8574_getinput>:


/*
 * get input data
 */
int8_t pcf8574_getinput(uint8_t deviceid) {
    40b0:	cf 93       	push	r28
	int8_t data = -1;
	if((deviceid >= 0 && deviceid < PCF8574_MAXDEVICES)) {
    40b2:	81 11       	cpse	r24, r1
    40b4:	0a c0       	rjmp	.+20     	; 0x40ca <pcf8574_getinput+0x1a>
		i2c_start(((PCF8574_ADDRBASE+deviceid)<<1) | I2C_READ);
    40b6:	8f e4       	ldi	r24, 0x4F	; 79
    40b8:	0e 94 d7 25 	call	0x4bae	; 0x4bae <i2c_start>
		data = ~i2c_readNak();
    40bc:	0e 94 19 26 	call	0x4c32	; 0x4c32 <i2c_readNak>
    40c0:	c8 2f       	mov	r28, r24
    40c2:	c0 95       	com	r28
		i2c_stop();
    40c4:	0e 94 fe 25 	call	0x4bfc	; 0x4bfc <i2c_stop>
    40c8:	01 c0       	rjmp	.+2      	; 0x40cc <pcf8574_getinput+0x1c>

/*
 * get input data
 */
int8_t pcf8574_getinput(uint8_t deviceid) {
	int8_t data = -1;
    40ca:	cf ef       	ldi	r28, 0xFF	; 255
		i2c_start(((PCF8574_ADDRBASE+deviceid)<<1) | I2C_READ);
		data = ~i2c_readNak();
		i2c_stop();
	}
	return data;
}
    40cc:	8c 2f       	mov	r24, r28
    40ce:	cf 91       	pop	r28
    40d0:	08 95       	ret

000040d2 <pcf8574_getinputpin>:

/*
 * get input pin (up or low)
 */
int8_t pcf8574_getinputpin(uint8_t deviceid, uint8_t pin) {
    40d2:	cf 93       	push	r28
	int8_t data = -1;
	if((deviceid >= 0 && deviceid < PCF8574_MAXDEVICES) && (pin >= 0 && pin < PCF8574_MAXPINS)) {
    40d4:	81 11       	cpse	r24, r1
    40d6:	11 c0       	rjmp	.+34     	; 0x40fa <pcf8574_getinputpin+0x28>
    40d8:	68 30       	cpi	r22, 0x08	; 8
    40da:	88 f4       	brcc	.+34     	; 0x40fe <pcf8574_getinputpin+0x2c>
    40dc:	c6 2f       	mov	r28, r22
		data = pcf8574_getinput(deviceid);
    40de:	0e 94 58 20 	call	0x40b0	; 0x40b0 <pcf8574_getinput>
		if(data != -1) {
    40e2:	8f 3f       	cpi	r24, 0xFF	; 255
    40e4:	69 f0       	breq	.+26     	; 0x4100 <pcf8574_getinputpin+0x2e>
			data = (data >> pin) & 0b00000001;
    40e6:	08 2e       	mov	r0, r24
    40e8:	00 0c       	add	r0, r0
    40ea:	99 0b       	sbc	r25, r25
    40ec:	02 c0       	rjmp	.+4      	; 0x40f2 <pcf8574_getinputpin+0x20>
    40ee:	95 95       	asr	r25
    40f0:	87 95       	ror	r24
    40f2:	ca 95       	dec	r28
    40f4:	e2 f7       	brpl	.-8      	; 0x40ee <pcf8574_getinputpin+0x1c>
    40f6:	81 70       	andi	r24, 0x01	; 1
    40f8:	03 c0       	rjmp	.+6      	; 0x4100 <pcf8574_getinputpin+0x2e>

/*
 * get input pin (up or low)
 */
int8_t pcf8574_getinputpin(uint8_t deviceid, uint8_t pin) {
	int8_t data = -1;
    40fa:	8f ef       	ldi	r24, 0xFF	; 255
    40fc:	01 c0       	rjmp	.+2      	; 0x4100 <pcf8574_getinputpin+0x2e>
    40fe:	8f ef       	ldi	r24, 0xFF	; 255
		if(data != -1) {
			data = (data >> pin) & 0b00000001;
		}
	}
	return data;
}
    4100:	cf 91       	pop	r28
    4102:	08 95       	ret

00004104 <sd_raw_send_byte>:
 * \returns 1 if the card is locked, 0 if it is not.
 */
uint8_t sd_raw_locked()
{
    return get_pin_locked() == 0x00;
}
    4104:	8e bd       	out	0x2e, r24	; 46
    4106:	0d b4       	in	r0, 0x2d	; 45
    4108:	07 fe       	sbrs	r0, 7
    410a:	fd cf       	rjmp	.-6      	; 0x4106 <sd_raw_send_byte+0x2>
    410c:	8d b5       	in	r24, 0x2d	; 45
    410e:	8f 77       	andi	r24, 0x7F	; 127
    4110:	8d bd       	out	0x2d, r24	; 45
    4112:	08 95       	ret

00004114 <sd_raw_rec_byte>:
    4114:	8f ef       	ldi	r24, 0xFF	; 255
    4116:	8e bd       	out	0x2e, r24	; 46
    4118:	0d b4       	in	r0, 0x2d	; 45
    411a:	07 fe       	sbrs	r0, 7
    411c:	fd cf       	rjmp	.-6      	; 0x4118 <sd_raw_rec_byte+0x4>
    411e:	8d b5       	in	r24, 0x2d	; 45
    4120:	8f 77       	andi	r24, 0x7F	; 127
    4122:	8d bd       	out	0x2d, r24	; 45
    4124:	8e b5       	in	r24, 0x2e	; 46
    4126:	08 95       	ret

00004128 <sd_raw_send_command>:
    4128:	ff 92       	push	r15
    412a:	0f 93       	push	r16
    412c:	1f 93       	push	r17
    412e:	cf 93       	push	r28
    4130:	df 93       	push	r29
    4132:	c8 2f       	mov	r28, r24
    4134:	d4 2f       	mov	r29, r20
    4136:	15 2f       	mov	r17, r21
    4138:	06 2f       	mov	r16, r22
    413a:	f7 2e       	mov	r15, r23
    413c:	0e 94 8a 20 	call	0x4114	; 0x4114 <sd_raw_rec_byte>
    4140:	8c 2f       	mov	r24, r28
    4142:	80 64       	ori	r24, 0x40	; 64
    4144:	0e 94 82 20 	call	0x4104	; 0x4104 <sd_raw_send_byte>
    4148:	8f 2d       	mov	r24, r15
    414a:	0e 94 82 20 	call	0x4104	; 0x4104 <sd_raw_send_byte>
    414e:	80 2f       	mov	r24, r16
    4150:	0e 94 82 20 	call	0x4104	; 0x4104 <sd_raw_send_byte>
    4154:	81 2f       	mov	r24, r17
    4156:	0e 94 82 20 	call	0x4104	; 0x4104 <sd_raw_send_byte>
    415a:	8d 2f       	mov	r24, r29
    415c:	0e 94 82 20 	call	0x4104	; 0x4104 <sd_raw_send_byte>
    4160:	cc 23       	and	r28, r28
    4162:	19 f0       	breq	.+6      	; 0x416a <sd_raw_send_command+0x42>
    4164:	c8 30       	cpi	r28, 0x08	; 8
    4166:	29 f0       	breq	.+10     	; 0x4172 <sd_raw_send_command+0x4a>
    4168:	08 c0       	rjmp	.+16     	; 0x417a <sd_raw_send_command+0x52>
    416a:	85 e9       	ldi	r24, 0x95	; 149
    416c:	0e 94 82 20 	call	0x4104	; 0x4104 <sd_raw_send_byte>
    4170:	0f c0       	rjmp	.+30     	; 0x4190 <sd_raw_send_command+0x68>
    4172:	87 e8       	ldi	r24, 0x87	; 135
    4174:	0e 94 82 20 	call	0x4104	; 0x4104 <sd_raw_send_byte>
    4178:	0b c0       	rjmp	.+22     	; 0x4190 <sd_raw_send_command+0x68>
    417a:	8f ef       	ldi	r24, 0xFF	; 255
    417c:	0e 94 82 20 	call	0x4104	; 0x4104 <sd_raw_send_byte>
    4180:	07 c0       	rjmp	.+14     	; 0x4190 <sd_raw_send_command+0x68>
    4182:	0e 94 8a 20 	call	0x4114	; 0x4114 <sd_raw_rec_byte>
    4186:	8f 3f       	cpi	r24, 0xFF	; 255
    4188:	29 f4       	brne	.+10     	; 0x4194 <sd_raw_send_command+0x6c>
    418a:	c1 50       	subi	r28, 0x01	; 1
    418c:	d1 f7       	brne	.-12     	; 0x4182 <sd_raw_send_command+0x5a>
    418e:	02 c0       	rjmp	.+4      	; 0x4194 <sd_raw_send_command+0x6c>
    4190:	ca e0       	ldi	r28, 0x0A	; 10
    4192:	f7 cf       	rjmp	.-18     	; 0x4182 <sd_raw_send_command+0x5a>
    4194:	df 91       	pop	r29
    4196:	cf 91       	pop	r28
    4198:	1f 91       	pop	r17
    419a:	0f 91       	pop	r16
    419c:	ff 90       	pop	r15
    419e:	08 95       	ret

000041a0 <sd_raw_sync>:
 *
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_write
 */
uint8_t sd_raw_sync()
{
    41a0:	ef 92       	push	r14
    41a2:	ff 92       	push	r15
    41a4:	0f 93       	push	r16
    41a6:	1f 93       	push	r17
#if SD_RAW_WRITE_BUFFERING
    if(raw_block_written)
    41a8:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <raw_block_written>
    41ac:	81 11       	cpse	r24, r1
    41ae:	1e c0       	rjmp	.+60     	; 0x41ec <sd_raw_sync+0x4c>
        return 1;
    if(!sd_raw_write(raw_block_address, raw_block, sizeof(raw_block)))
    41b0:	20 91 ca 02 	lds	r18, 0x02CA	; 0x8002ca <raw_block_address>
    41b4:	30 91 cb 02 	lds	r19, 0x02CB	; 0x8002cb <raw_block_address+0x1>
    41b8:	40 91 cc 02 	lds	r20, 0x02CC	; 0x8002cc <raw_block_address+0x2>
    41bc:	50 91 cd 02 	lds	r21, 0x02CD	; 0x8002cd <raw_block_address+0x3>
    41c0:	60 91 ce 02 	lds	r22, 0x02CE	; 0x8002ce <raw_block_address+0x4>
    41c4:	70 91 cf 02 	lds	r23, 0x02CF	; 0x8002cf <raw_block_address+0x5>
    41c8:	e1 2c       	mov	r14, r1
    41ca:	68 94       	set
    41cc:	ff 24       	eor	r15, r15
    41ce:	f1 f8       	bld	r15, 1
    41d0:	02 ed       	ldi	r16, 0xD2	; 210
    41d2:	12 e0       	ldi	r17, 0x02	; 2
    41d4:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <raw_block_address+0x6>
    41d8:	90 91 d1 02 	lds	r25, 0x02D1	; 0x8002d1 <raw_block_address+0x7>
    41dc:	0e 94 cb 23 	call	0x4796	; 0x4796 <sd_raw_write>
    41e0:	88 23       	and	r24, r24
    41e2:	29 f0       	breq	.+10     	; 0x41ee <sd_raw_sync+0x4e>
        return 0;
    raw_block_written = 1;
    41e4:	81 e0       	ldi	r24, 0x01	; 1
    41e6:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <raw_block_written>
#endif
    return 1;
    41ea:	01 c0       	rjmp	.+2      	; 0x41ee <sd_raw_sync+0x4e>
 */
uint8_t sd_raw_sync()
{
#if SD_RAW_WRITE_BUFFERING
    if(raw_block_written)
        return 1;
    41ec:	81 e0       	ldi	r24, 0x01	; 1
    if(!sd_raw_write(raw_block_address, raw_block, sizeof(raw_block)))
        return 0;
    raw_block_written = 1;
#endif
    return 1;
}
    41ee:	1f 91       	pop	r17
    41f0:	0f 91       	pop	r16
    41f2:	ff 90       	pop	r15
    41f4:	ef 90       	pop	r14
    41f6:	08 95       	ret

000041f8 <sd_raw_read>:
 * \param[in] length The number of bytes to read.
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_read_interval, sd_raw_write, sd_raw_write_interval
 */
uint8_t sd_raw_read(offset_t offset, uint8_t* buffer, uintptr_t length)
{
    41f8:	2f 92       	push	r2
    41fa:	3f 92       	push	r3
    41fc:	4f 92       	push	r4
    41fe:	5f 92       	push	r5
    4200:	6f 92       	push	r6
    4202:	7f 92       	push	r7
    4204:	8f 92       	push	r8
    4206:	9f 92       	push	r9
    4208:	af 92       	push	r10
    420a:	bf 92       	push	r11
    420c:	cf 92       	push	r12
    420e:	df 92       	push	r13
    4210:	ef 92       	push	r14
    4212:	ff 92       	push	r15
    4214:	0f 93       	push	r16
    4216:	1f 93       	push	r17
    4218:	cf 93       	push	r28
    421a:	df 93       	push	r29
    421c:	cd b7       	in	r28, 0x3d	; 61
    421e:	de b7       	in	r29, 0x3e	; 62
    4220:	6d 97       	sbiw	r28, 0x1d	; 29
    4222:	0f b6       	in	r0, 0x3f	; 63
    4224:	f8 94       	cli
    4226:	de bf       	out	0x3e, r29	; 62
    4228:	0f be       	out	0x3f, r0	; 63
    422a:	cd bf       	out	0x3d, r28	; 61
    422c:	29 83       	std	Y+1, r18	; 0x01
    422e:	3a 83       	std	Y+2, r19	; 0x02
    4230:	4b 83       	std	Y+3, r20	; 0x03
    4232:	5c 83       	std	Y+4, r21	; 0x04
    4234:	6d 83       	std	Y+5, r22	; 0x05
    4236:	7e 83       	std	Y+6, r23	; 0x06
    4238:	8f 83       	std	Y+7, r24	; 0x07
    423a:	98 87       	std	Y+8, r25	; 0x08
    423c:	1d 8b       	std	Y+21, r17	; 0x15
    423e:	0c 8b       	std	Y+20, r16	; 0x14
    4240:	27 01       	movw	r4, r14
    offset_t block_address;
    uint16_t block_offset;
    uint16_t read_length;
    while(length > 0)
    4242:	ef 28       	or	r14, r15
    4244:	09 f4       	brne	.+2      	; 0x4248 <sd_raw_read+0x50>
    4246:	f3 c0       	rjmp	.+486    	; 0x442e <sd_raw_read+0x236>
    {
        /* determine byte count to read at once */
        block_offset = offset & 0x01ff;
        block_address = offset - block_offset;
        read_length = 512 - block_offset; /* read up to block border */
    4248:	61 2c       	mov	r6, r1
    424a:	68 94       	set
    424c:	77 24       	eor	r7, r7
    424e:	71 f8       	bld	r7, 1
    4250:	0f 2e       	mov	r0, r31
    4252:	f2 ed       	ldi	r31, 0xD2	; 210
    4254:	2f 2e       	mov	r2, r31
    4256:	f4 e0       	ldi	r31, 0x04	; 4
    4258:	3f 2e       	mov	r3, r31
    425a:	f0 2d       	mov	r31, r0
    425c:	7b 8e       	std	Y+27, r7	; 0x1b
    425e:	6a 8e       	std	Y+26, r6	; 0x1a
    uint16_t block_offset;
    uint16_t read_length;
    while(length > 0)
    {
        /* determine byte count to read at once */
        block_offset = offset & 0x01ff;
    4260:	29 81       	ldd	r18, Y+1	; 0x01
    4262:	3a 81       	ldd	r19, Y+2	; 0x02
    4264:	31 70       	andi	r19, 0x01	; 1
    4266:	3a 8b       	std	Y+18, r19	; 0x12
    4268:	29 8b       	std	Y+17, r18	; 0x11
        block_address = offset - block_offset;
    426a:	40 e0       	ldi	r20, 0x00	; 0
    426c:	50 e0       	ldi	r21, 0x00	; 0
    426e:	60 e0       	ldi	r22, 0x00	; 0
    4270:	70 e0       	ldi	r23, 0x00	; 0
    4272:	cb 01       	movw	r24, r22
    4274:	29 87       	std	Y+9, r18	; 0x09
    4276:	3a 87       	std	Y+10, r19	; 0x0a
    4278:	4b 87       	std	Y+11, r20	; 0x0b
    427a:	5c 87       	std	Y+12, r21	; 0x0c
    427c:	6d 87       	std	Y+13, r22	; 0x0d
    427e:	7e 87       	std	Y+14, r23	; 0x0e
    4280:	8f 87       	std	Y+15, r24	; 0x0f
    4282:	98 8b       	std	Y+16, r25	; 0x10
    4284:	29 81       	ldd	r18, Y+1	; 0x01
    4286:	3a 81       	ldd	r19, Y+2	; 0x02
    4288:	4b 81       	ldd	r20, Y+3	; 0x03
    428a:	5c 81       	ldd	r21, Y+4	; 0x04
    428c:	6d 81       	ldd	r22, Y+5	; 0x05
    428e:	7e 81       	ldd	r23, Y+6	; 0x06
    4290:	8f 81       	ldd	r24, Y+7	; 0x07
    4292:	98 85       	ldd	r25, Y+8	; 0x08
    4294:	a9 84       	ldd	r10, Y+9	; 0x09
    4296:	ba 84       	ldd	r11, Y+10	; 0x0a
    4298:	c1 2c       	mov	r12, r1
    429a:	d1 2c       	mov	r13, r1
    429c:	e1 2c       	mov	r14, r1
    429e:	f1 2c       	mov	r15, r1
    42a0:	00 e0       	ldi	r16, 0x00	; 0
    42a2:	10 e0       	ldi	r17, 0x00	; 0
    42a4:	0e 94 7b 27 	call	0x4ef6	; 0x4ef6 <__subdi3>
    42a8:	29 87       	std	Y+9, r18	; 0x09
    42aa:	3b 8b       	std	Y+19, r19	; 0x13
    42ac:	64 2e       	mov	r6, r20
    42ae:	75 2e       	mov	r7, r21
    42b0:	6e 8b       	std	Y+22, r22	; 0x16
    42b2:	7f 8b       	std	Y+23, r23	; 0x17
    42b4:	88 8f       	std	Y+24, r24	; 0x18
    42b6:	99 8f       	std	Y+25, r25	; 0x19
    42b8:	8a 8c       	ldd	r8, Y+26	; 0x1a
    42ba:	9b 8c       	ldd	r9, Y+27	; 0x1b
    42bc:	69 89       	ldd	r22, Y+17	; 0x11
    42be:	7a 89       	ldd	r23, Y+18	; 0x12
    42c0:	86 1a       	sub	r8, r22
    42c2:	97 0a       	sbc	r9, r23
    42c4:	48 14       	cp	r4, r8
    42c6:	59 04       	cpc	r5, r9
    42c8:	08 f4       	brcc	.+2      	; 0x42cc <sd_raw_read+0xd4>
    42ca:	42 01       	movw	r8, r4
        if(read_length > length)
            read_length = length;
        
#if !SD_RAW_SAVE_RAM
        /* check if the requested data is cached */
        if(block_address != raw_block_address)
    42cc:	a0 90 ca 02 	lds	r10, 0x02CA	; 0x8002ca <raw_block_address>
    42d0:	b0 90 cb 02 	lds	r11, 0x02CB	; 0x8002cb <raw_block_address+0x1>
    42d4:	c0 90 cc 02 	lds	r12, 0x02CC	; 0x8002cc <raw_block_address+0x2>
    42d8:	d0 90 cd 02 	lds	r13, 0x02CD	; 0x8002cd <raw_block_address+0x3>
    42dc:	e0 90 ce 02 	lds	r14, 0x02CE	; 0x8002ce <raw_block_address+0x4>
    42e0:	f0 90 cf 02 	lds	r15, 0x02CF	; 0x8002cf <raw_block_address+0x5>
    42e4:	00 91 d0 02 	lds	r16, 0x02D0	; 0x8002d0 <raw_block_address+0x6>
    42e8:	10 91 d1 02 	lds	r17, 0x02D1	; 0x8002d1 <raw_block_address+0x7>
    42ec:	29 85       	ldd	r18, Y+9	; 0x09
    42ee:	3b 89       	ldd	r19, Y+19	; 0x13
    42f0:	46 2d       	mov	r20, r6
    42f2:	57 2d       	mov	r21, r7
    42f4:	6e 89       	ldd	r22, Y+22	; 0x16
    42f6:	7f 89       	ldd	r23, Y+23	; 0x17
    42f8:	88 8d       	ldd	r24, Y+24	; 0x18
    42fa:	99 8d       	ldd	r25, Y+25	; 0x19
    42fc:	0e 94 84 27 	call	0x4f08	; 0x4f08 <__cmpdi2>
    4300:	09 f4       	brne	.+2      	; 0x4304 <sd_raw_read+0x10c>
    4302:	65 c0       	rjmp	.+202    	; 0x43ce <sd_raw_read+0x1d6>
#endif
        {
#if SD_RAW_WRITE_BUFFERING
            if(!sd_raw_sync())
    4304:	0e 94 d0 20 	call	0x41a0	; 0x41a0 <sd_raw_sync>
    4308:	88 23       	and	r24, r24
    430a:	09 f4       	brne	.+2      	; 0x430e <sd_raw_read+0x116>
    430c:	91 c0       	rjmp	.+290    	; 0x4430 <sd_raw_read+0x238>
                return 0;
#endif

            /* address card */
            select_card();
    430e:	2a 98       	cbi	0x05, 2	; 5

            /* send single block request */
#if SD_RAW_SDHC
            if(sd_raw_send_command(CMD_READ_SINGLE_BLOCK, (sd_raw_card_type & (1 << SD_RAW_SPEC_SDHC) ? block_address / 512 : block_address)))
    4310:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <sd_raw_card_type>
    4314:	82 ff       	sbrs	r24, 2
    4316:	10 c0       	rjmp	.+32     	; 0x4338 <sd_raw_read+0x140>
    4318:	29 85       	ldd	r18, Y+9	; 0x09
    431a:	3b 89       	ldd	r19, Y+19	; 0x13
    431c:	46 2d       	mov	r20, r6
    431e:	57 2d       	mov	r21, r7
    4320:	6e 89       	ldd	r22, Y+22	; 0x16
    4322:	7f 89       	ldd	r23, Y+23	; 0x17
    4324:	88 8d       	ldd	r24, Y+24	; 0x18
    4326:	99 8d       	ldd	r25, Y+25	; 0x19
    4328:	09 e0       	ldi	r16, 0x09	; 9
    432a:	0e 94 4a 27 	call	0x4e94	; 0x4e94 <__lshrdi3>
    432e:	64 2f       	mov	r22, r20
    4330:	75 2f       	mov	r23, r21
    4332:	42 2f       	mov	r20, r18
    4334:	53 2f       	mov	r21, r19
    4336:	04 c0       	rjmp	.+8      	; 0x4340 <sd_raw_read+0x148>
    4338:	49 85       	ldd	r20, Y+9	; 0x09
    433a:	5b 89       	ldd	r21, Y+19	; 0x13
    433c:	66 2d       	mov	r22, r6
    433e:	77 2d       	mov	r23, r7
    4340:	81 e1       	ldi	r24, 0x11	; 17
    4342:	0e 94 94 20 	call	0x4128	; 0x4128 <sd_raw_send_command>
    4346:	88 23       	and	r24, r24
    4348:	19 f0       	breq	.+6      	; 0x4350 <sd_raw_read+0x158>
#else
            if(sd_raw_send_command(CMD_READ_SINGLE_BLOCK, block_address))
#endif
            {
                unselect_card();
    434a:	2a 9a       	sbi	0x05, 2	; 5
                return 0;
    434c:	80 e0       	ldi	r24, 0x00	; 0
    434e:	70 c0       	rjmp	.+224    	; 0x4430 <sd_raw_read+0x238>
            }

            /* wait for data block (start byte 0xfe) */
            while(sd_raw_rec_byte() != 0xfe);
    4350:	0e 94 8a 20 	call	0x4114	; 0x4114 <sd_raw_rec_byte>
    4354:	8e 3f       	cpi	r24, 0xFE	; 254
    4356:	e1 f7       	brne	.-8      	; 0x4350 <sd_raw_read+0x158>
    4358:	82 ed       	ldi	r24, 0xD2	; 210
    435a:	92 e0       	ldi	r25, 0x02	; 2
    435c:	9d 8f       	std	Y+29, r25	; 0x1d
    435e:	8c 8f       	std	Y+28, r24	; 0x1c
            }
#else
            /* read byte block */
            uint8_t* cache = raw_block;
            for(uint16_t i = 0; i < 512; ++i)
                *cache++ = sd_raw_rec_byte();
    4360:	0e 94 8a 20 	call	0x4114	; 0x4114 <sd_raw_rec_byte>
    4364:	ec 8d       	ldd	r30, Y+28	; 0x1c
    4366:	fd 8d       	ldd	r31, Y+29	; 0x1d
    4368:	81 93       	st	Z+, r24
    436a:	fd 8f       	std	Y+29, r31	; 0x1d
    436c:	ec 8f       	std	Y+28, r30	; 0x1c
                    *buffer++ = b;
            }
#else
            /* read byte block */
            uint8_t* cache = raw_block;
            for(uint16_t i = 0; i < 512; ++i)
    436e:	2e 16       	cp	r2, r30
    4370:	3f 06       	cpc	r3, r31
    4372:	b1 f7       	brne	.-20     	; 0x4360 <sd_raw_read+0x168>
                *cache++ = sd_raw_rec_byte();
            raw_block_address = block_address;
    4374:	f9 85       	ldd	r31, Y+9	; 0x09
    4376:	f0 93 ca 02 	sts	0x02CA, r31	; 0x8002ca <raw_block_address>
    437a:	2b 89       	ldd	r18, Y+19	; 0x13
    437c:	20 93 cb 02 	sts	0x02CB, r18	; 0x8002cb <raw_block_address+0x1>
    4380:	60 92 cc 02 	sts	0x02CC, r6	; 0x8002cc <raw_block_address+0x2>
    4384:	70 92 cd 02 	sts	0x02CD, r7	; 0x8002cd <raw_block_address+0x3>
    4388:	3e 89       	ldd	r19, Y+22	; 0x16
    438a:	30 93 ce 02 	sts	0x02CE, r19	; 0x8002ce <raw_block_address+0x4>
    438e:	4f 89       	ldd	r20, Y+23	; 0x17
    4390:	40 93 cf 02 	sts	0x02CF, r20	; 0x8002cf <raw_block_address+0x5>
    4394:	58 8d       	ldd	r21, Y+24	; 0x18
    4396:	50 93 d0 02 	sts	0x02D0, r21	; 0x8002d0 <raw_block_address+0x6>
    439a:	69 8d       	ldd	r22, Y+25	; 0x19
    439c:	60 93 d1 02 	sts	0x02D1, r22	; 0x8002d1 <raw_block_address+0x7>

            memcpy(buffer, raw_block + block_offset, read_length);
    43a0:	69 89       	ldd	r22, Y+17	; 0x11
    43a2:	7a 89       	ldd	r23, Y+18	; 0x12
    43a4:	6e 52       	subi	r22, 0x2E	; 46
    43a6:	7d 4f       	sbci	r23, 0xFD	; 253
    43a8:	a4 01       	movw	r20, r8
    43aa:	8c 89       	ldd	r24, Y+20	; 0x14
    43ac:	9d 89       	ldd	r25, Y+21	; 0x15
    43ae:	0e 94 99 27 	call	0x4f32	; 0x4f32 <memcpy>
            buffer += read_length;
    43b2:	8c 89       	ldd	r24, Y+20	; 0x14
    43b4:	9d 89       	ldd	r25, Y+21	; 0x15
    43b6:	88 0d       	add	r24, r8
    43b8:	99 1d       	adc	r25, r9
    43ba:	9d 8b       	std	Y+21, r25	; 0x15
    43bc:	8c 8b       	std	Y+20, r24	; 0x14
#endif
            
            /* read crc16 */
            sd_raw_rec_byte();
    43be:	0e 94 8a 20 	call	0x4114	; 0x4114 <sd_raw_rec_byte>
            sd_raw_rec_byte();
    43c2:	0e 94 8a 20 	call	0x4114	; 0x4114 <sd_raw_rec_byte>
            
            /* deaddress card */
            unselect_card();
    43c6:	2a 9a       	sbi	0x05, 2	; 5

            /* let card some time to finish */
            sd_raw_rec_byte();
    43c8:	0e 94 8a 20 	call	0x4114	; 0x4114 <sd_raw_rec_byte>
    43cc:	0f c0       	rjmp	.+30     	; 0x43ec <sd_raw_read+0x1f4>
        }
#if !SD_RAW_SAVE_RAM
        else
        {
            /* use cached data */
            memcpy(buffer, raw_block + block_offset, read_length);
    43ce:	69 89       	ldd	r22, Y+17	; 0x11
    43d0:	7a 89       	ldd	r23, Y+18	; 0x12
    43d2:	6e 52       	subi	r22, 0x2E	; 46
    43d4:	7d 4f       	sbci	r23, 0xFD	; 253
    43d6:	a4 01       	movw	r20, r8
    43d8:	8c 89       	ldd	r24, Y+20	; 0x14
    43da:	9d 89       	ldd	r25, Y+21	; 0x15
    43dc:	0e 94 99 27 	call	0x4f32	; 0x4f32 <memcpy>
            buffer += read_length;
    43e0:	ec 89       	ldd	r30, Y+20	; 0x14
    43e2:	fd 89       	ldd	r31, Y+21	; 0x15
    43e4:	e8 0d       	add	r30, r8
    43e6:	f9 1d       	adc	r31, r9
    43e8:	fd 8b       	std	Y+21, r31	; 0x15
    43ea:	ec 8b       	std	Y+20, r30	; 0x14
        }
#endif

        length -= read_length;
    43ec:	48 18       	sub	r4, r8
    43ee:	59 08       	sbc	r5, r9
        offset += read_length;
    43f0:	94 01       	movw	r18, r8
    43f2:	40 e0       	ldi	r20, 0x00	; 0
    43f4:	50 e0       	ldi	r21, 0x00	; 0
    43f6:	60 e0       	ldi	r22, 0x00	; 0
    43f8:	70 e0       	ldi	r23, 0x00	; 0
    43fa:	80 e0       	ldi	r24, 0x00	; 0
    43fc:	90 e0       	ldi	r25, 0x00	; 0
    43fe:	a9 80       	ldd	r10, Y+1	; 0x01
    4400:	ba 80       	ldd	r11, Y+2	; 0x02
    4402:	cb 80       	ldd	r12, Y+3	; 0x03
    4404:	dc 80       	ldd	r13, Y+4	; 0x04
    4406:	ed 80       	ldd	r14, Y+5	; 0x05
    4408:	fe 80       	ldd	r15, Y+6	; 0x06
    440a:	0f 81       	ldd	r16, Y+7	; 0x07
    440c:	18 85       	ldd	r17, Y+8	; 0x08
    440e:	0e 94 66 27 	call	0x4ecc	; 0x4ecc <__adddi3>
    4412:	29 83       	std	Y+1, r18	; 0x01
    4414:	3a 83       	std	Y+2, r19	; 0x02
    4416:	4b 83       	std	Y+3, r20	; 0x03
    4418:	5c 83       	std	Y+4, r21	; 0x04
    441a:	6d 83       	std	Y+5, r22	; 0x05
    441c:	7e 83       	std	Y+6, r23	; 0x06
    441e:	8f 83       	std	Y+7, r24	; 0x07
    4420:	98 87       	std	Y+8, r25	; 0x08
uint8_t sd_raw_read(offset_t offset, uint8_t* buffer, uintptr_t length)
{
    offset_t block_address;
    uint16_t block_offset;
    uint16_t read_length;
    while(length > 0)
    4422:	41 14       	cp	r4, r1
    4424:	51 04       	cpc	r5, r1
    4426:	09 f0       	breq	.+2      	; 0x442a <sd_raw_read+0x232>
    4428:	1b cf       	rjmp	.-458    	; 0x4260 <sd_raw_read+0x68>

        length -= read_length;
        offset += read_length;
    }

    return 1;
    442a:	81 e0       	ldi	r24, 0x01	; 1
    442c:	01 c0       	rjmp	.+2      	; 0x4430 <sd_raw_read+0x238>
    442e:	81 e0       	ldi	r24, 0x01	; 1
}
    4430:	6d 96       	adiw	r28, 0x1d	; 29
    4432:	0f b6       	in	r0, 0x3f	; 63
    4434:	f8 94       	cli
    4436:	de bf       	out	0x3e, r29	; 62
    4438:	0f be       	out	0x3f, r0	; 63
    443a:	cd bf       	out	0x3d, r28	; 61
    443c:	df 91       	pop	r29
    443e:	cf 91       	pop	r28
    4440:	1f 91       	pop	r17
    4442:	0f 91       	pop	r16
    4444:	ff 90       	pop	r15
    4446:	ef 90       	pop	r14
    4448:	df 90       	pop	r13
    444a:	cf 90       	pop	r12
    444c:	bf 90       	pop	r11
    444e:	af 90       	pop	r10
    4450:	9f 90       	pop	r9
    4452:	8f 90       	pop	r8
    4454:	7f 90       	pop	r7
    4456:	6f 90       	pop	r6
    4458:	5f 90       	pop	r5
    445a:	4f 90       	pop	r4
    445c:	3f 90       	pop	r3
    445e:	2f 90       	pop	r2
    4460:	08 95       	ret

00004462 <sd_raw_init>:
 * Initializes memory card communication.
 *
 * \returns 0 on failure, 1 on success.
 */
uint8_t sd_raw_init()
{
    4462:	9f 92       	push	r9
    4464:	af 92       	push	r10
    4466:	bf 92       	push	r11
    4468:	cf 92       	push	r12
    446a:	df 92       	push	r13
    446c:	ef 92       	push	r14
    446e:	ff 92       	push	r15
    4470:	0f 93       	push	r16
    4472:	1f 93       	push	r17
    4474:	cf 93       	push	r28
    4476:	df 93       	push	r29
    /* enable inputs for reading card status */
    configure_pin_available();
    configure_pin_locked();

    /* enable outputs for MOSI, SCK, SS, input for MISO */
    configure_pin_mosi();
    4478:	23 9a       	sbi	0x04, 3	; 4
    configure_pin_sck();
    447a:	25 9a       	sbi	0x04, 5	; 4
    configure_pin_ss();
    447c:	22 9a       	sbi	0x04, 2	; 4
    configure_pin_miso();
    447e:	24 98       	cbi	0x04, 4	; 4

    unselect_card();
    4480:	2a 9a       	sbi	0x05, 2	; 5

    /* initialize SPI with lowest frequency; max. 400kHz during identification mode of card */
    SPCR = (0 << SPIE) | /* SPI Interrupt Enable */
    4482:	83 e5       	ldi	r24, 0x53	; 83
    4484:	8c bd       	out	0x2c, r24	; 44
           (1 << MSTR) | /* Master mode */
           (0 << CPOL) | /* Clock Polarity: SCK low when idle */
           (0 << CPHA) | /* Clock Phase: sample on rising SCK edge */
           (1 << SPR1) | /* Clock Frequency: f_OSC / 128 */
           (1 << SPR0);
    SPSR &= ~(1 << SPI2X); /* No doubled clock frequency */
    4486:	8d b5       	in	r24, 0x2d	; 45
    4488:	8e 7f       	andi	r24, 0xFE	; 254
    448a:	8d bd       	out	0x2d, r24	; 45

    /* initialization procedure */
    sd_raw_card_type = 0;
    448c:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <sd_raw_card_type>
    4490:	1a e0       	ldi	r17, 0x0A	; 10

    /* card needs 74 cycles minimum to start up */
    for(uint8_t i = 0; i < 10; ++i)
    {
        /* wait 8 clock cycles */
        sd_raw_rec_byte();
    4492:	0e 94 8a 20 	call	0x4114	; 0x4114 <sd_raw_rec_byte>
    4496:	11 50       	subi	r17, 0x01	; 1
		
        return 0;
	}

    /* card needs 74 cycles minimum to start up */
    for(uint8_t i = 0; i < 10; ++i)
    4498:	e1 f7       	brne	.-8      	; 0x4492 <sd_raw_init+0x30>
        /* wait 8 clock cycles */
        sd_raw_rec_byte();
    }

    /* address card */
    select_card();
    449a:	2a 98       	cbi	0x05, 2	; 5
    449c:	c0 e0       	ldi	r28, 0x00	; 0
    449e:	d2 e0       	ldi	r29, 0x02	; 2

    /* reset card */
    uint8_t response;
    for(uint16_t i = 0; ; ++i)
    {
        response = sd_raw_send_command(CMD_GO_IDLE_STATE, 0);
    44a0:	40 e0       	ldi	r20, 0x00	; 0
    44a2:	50 e0       	ldi	r21, 0x00	; 0
    44a4:	ba 01       	movw	r22, r20
    44a6:	80 e0       	ldi	r24, 0x00	; 0
    44a8:	0e 94 94 20 	call	0x4128	; 0x4128 <sd_raw_send_command>
        if(response == (1 << R1_IDLE_STATE))
    44ac:	81 30       	cpi	r24, 0x01	; 1
    44ae:	29 f0       	breq	.+10     	; 0x44ba <sd_raw_init+0x58>
    44b0:	21 97       	sbiw	r28, 0x01	; 1
            break;

        if(i == 0x1ff)
    44b2:	b1 f7       	brne	.-20     	; 0x44a0 <sd_raw_init+0x3e>
        {
            unselect_card();
    44b4:	2a 9a       	sbi	0x05, 2	; 5
            return 0;
    44b6:	01 2f       	mov	r16, r17
    44b8:	c0 c0       	rjmp	.+384    	; 0x463a <sd_raw_init+0x1d8>
        }
    }

#if SD_RAW_SDHC
    /* check for version of SD card specification */
    response = sd_raw_send_command(CMD_SEND_IF_COND, 0x100 /* 2.7V - 3.6V */ | 0xaa /* test pattern */);
    44ba:	4a ea       	ldi	r20, 0xAA	; 170
    44bc:	51 e0       	ldi	r21, 0x01	; 1
    44be:	60 e0       	ldi	r22, 0x00	; 0
    44c0:	70 e0       	ldi	r23, 0x00	; 0
    44c2:	88 e0       	ldi	r24, 0x08	; 8
    44c4:	0e 94 94 20 	call	0x4128	; 0x4128 <sd_raw_send_command>
    if((response & (1 << R1_ILL_COMMAND)) == 0)
    44c8:	c8 2f       	mov	r28, r24
    44ca:	c4 70       	andi	r28, 0x04	; 4
    44cc:	82 fd       	sbrc	r24, 2
    44ce:	1d c0       	rjmp	.+58     	; 0x450a <sd_raw_init+0xa8>
    {
        sd_raw_rec_byte();
    44d0:	0e 94 8a 20 	call	0x4114	; 0x4114 <sd_raw_rec_byte>
        sd_raw_rec_byte();
    44d4:	0e 94 8a 20 	call	0x4114	; 0x4114 <sd_raw_rec_byte>
        if((sd_raw_rec_byte() & 0x01) == 0){
    44d8:	0e 94 8a 20 	call	0x4114	; 0x4114 <sd_raw_rec_byte>
    44dc:	08 2f       	mov	r16, r24
    44de:	01 70       	andi	r16, 0x01	; 1
    44e0:	80 ff       	sbrs	r24, 0
    44e2:	ab c0       	rjmp	.+342    	; 0x463a <sd_raw_init+0x1d8>
			
            return 0; /* card operation voltage range doesn't match */
		}
        if(sd_raw_rec_byte() != 0xaa)
    44e4:	0e 94 8a 20 	call	0x4114	; 0x4114 <sd_raw_rec_byte>
    44e8:	8a 3a       	cpi	r24, 0xAA	; 170
    44ea:	09 f0       	breq	.+2      	; 0x44ee <sd_raw_init+0x8c>
    44ec:	a5 c0       	rjmp	.+330    	; 0x4638 <sd_raw_init+0x1d6>
            return 0; /* wrong test pattern */

        /* card conforms to SD 2 card specification */
        sd_raw_card_type |= (1 << SD_RAW_SPEC_2);
    44ee:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <sd_raw_card_type>
    44f2:	82 60       	ori	r24, 0x02	; 2
    44f4:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <sd_raw_card_type>
        /* wait 8 clock cycles */
        sd_raw_rec_byte();
    }

    /* address card */
    select_card();
    44f8:	c0 e0       	ldi	r28, 0x00	; 0
    44fa:	d0 e8       	ldi	r29, 0x80	; 128
        if(sd_raw_card_type & ((1 << SD_RAW_SPEC_1) | (1 << SD_RAW_SPEC_2)))
        {
            uint32_t arg = 0;
#if SD_RAW_SDHC
            if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
                arg = 0x40000000;
    44fc:	91 2c       	mov	r9, r1
    44fe:	a1 2c       	mov	r10, r1
    4500:	b1 2c       	mov	r11, r1
    4502:	68 94       	set
    4504:	cc 24       	eor	r12, r12
    4506:	c6 f8       	bld	r12, 6
    4508:	14 c0       	rjmp	.+40     	; 0x4532 <sd_raw_init+0xd0>
    }
    else
#endif
    {
        /* determine SD/MMC card type */
        sd_raw_send_command(CMD_APP, 0);
    450a:	40 e0       	ldi	r20, 0x00	; 0
    450c:	50 e0       	ldi	r21, 0x00	; 0
    450e:	ba 01       	movw	r22, r20
    4510:	87 e3       	ldi	r24, 0x37	; 55
    4512:	0e 94 94 20 	call	0x4128	; 0x4128 <sd_raw_send_command>
        response = sd_raw_send_command(CMD_SD_SEND_OP_COND, 0);
    4516:	40 e0       	ldi	r20, 0x00	; 0
    4518:	50 e0       	ldi	r21, 0x00	; 0
    451a:	ba 01       	movw	r22, r20
    451c:	89 e2       	ldi	r24, 0x29	; 41
    451e:	0e 94 94 20 	call	0x4128	; 0x4128 <sd_raw_send_command>
        if((response & (1 << R1_ILL_COMMAND)) == 0)
    4522:	82 fd       	sbrc	r24, 2
    4524:	e9 cf       	rjmp	.-46     	; 0x44f8 <sd_raw_init+0x96>
        {
            /* card conforms to SD 1 card specification */
            sd_raw_card_type |= (1 << SD_RAW_SPEC_1);
    4526:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <sd_raw_card_type>
    452a:	81 60       	ori	r24, 0x01	; 1
    452c:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <sd_raw_card_type>
    4530:	e3 cf       	rjmp	.-58     	; 0x44f8 <sd_raw_init+0x96>
    }

    /* wait for card to get ready */
    for(uint16_t i = 0; ; ++i)
    {
        if(sd_raw_card_type & ((1 << SD_RAW_SPEC_1) | (1 << SD_RAW_SPEC_2)))
    4532:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <sd_raw_card_type>
    4536:	98 2f       	mov	r25, r24
    4538:	93 70       	andi	r25, 0x03	; 3
    453a:	c9 f0       	breq	.+50     	; 0x456e <sd_raw_init+0x10c>
        {
            uint32_t arg = 0;
#if SD_RAW_SDHC
            if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
    453c:	81 ff       	sbrs	r24, 1
    453e:	05 c0       	rjmp	.+10     	; 0x454a <sd_raw_init+0xe8>
                arg = 0x40000000;
    4540:	d9 2c       	mov	r13, r9
    4542:	ea 2c       	mov	r14, r10
    4544:	fb 2c       	mov	r15, r11
    4546:	0c 2d       	mov	r16, r12
    4548:	04 c0       	rjmp	.+8      	; 0x4552 <sd_raw_init+0xf0>
    /* wait for card to get ready */
    for(uint16_t i = 0; ; ++i)
    {
        if(sd_raw_card_type & ((1 << SD_RAW_SPEC_1) | (1 << SD_RAW_SPEC_2)))
        {
            uint32_t arg = 0;
    454a:	d1 2c       	mov	r13, r1
    454c:	e1 2c       	mov	r14, r1
    454e:	f1 2c       	mov	r15, r1
    4550:	00 e0       	ldi	r16, 0x00	; 0
#if SD_RAW_SDHC
            if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
                arg = 0x40000000;
#endif
            sd_raw_send_command(CMD_APP, 0);
    4552:	40 e0       	ldi	r20, 0x00	; 0
    4554:	50 e0       	ldi	r21, 0x00	; 0
    4556:	ba 01       	movw	r22, r20
    4558:	87 e3       	ldi	r24, 0x37	; 55
    455a:	0e 94 94 20 	call	0x4128	; 0x4128 <sd_raw_send_command>
            response = sd_raw_send_command(CMD_SD_SEND_OP_COND, arg);
    455e:	4d 2d       	mov	r20, r13
    4560:	5e 2d       	mov	r21, r14
    4562:	6f 2d       	mov	r22, r15
    4564:	70 2f       	mov	r23, r16
    4566:	89 e2       	ldi	r24, 0x29	; 41
    4568:	0e 94 94 20 	call	0x4128	; 0x4128 <sd_raw_send_command>
    456c:	06 c0       	rjmp	.+12     	; 0x457a <sd_raw_init+0x118>
        }
        else
        {
            response = sd_raw_send_command(CMD_SEND_OP_COND, 0);
    456e:	40 e0       	ldi	r20, 0x00	; 0
    4570:	50 e0       	ldi	r21, 0x00	; 0
    4572:	ba 01       	movw	r22, r20
    4574:	81 e0       	ldi	r24, 0x01	; 1
    4576:	0e 94 94 20 	call	0x4128	; 0x4128 <sd_raw_send_command>
        }

        if((response & (1 << R1_IDLE_STATE)) == 0)
    457a:	08 2f       	mov	r16, r24
    457c:	01 70       	andi	r16, 0x01	; 1
    457e:	80 ff       	sbrs	r24, 0
    4580:	05 c0       	rjmp	.+10     	; 0x458c <sd_raw_init+0x12a>
    4582:	21 97       	sbiw	r28, 0x01	; 1
            break;

        if(i == 0x7fff)
    4584:	b1 f6       	brne	.-84     	; 0x4532 <sd_raw_init+0xd0>
        {
            unselect_card();
    4586:	2a 9a       	sbi	0x05, 2	; 5
            return 0;
    4588:	01 2f       	mov	r16, r17
    458a:	57 c0       	rjmp	.+174    	; 0x463a <sd_raw_init+0x1d8>
        }
    }

#if SD_RAW_SDHC
    if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
    458c:	c0 91 c8 02 	lds	r28, 0x02C8	; 0x8002c8 <sd_raw_card_type>
    4590:	c1 ff       	sbrs	r28, 1
    4592:	17 c0       	rjmp	.+46     	; 0x45c2 <sd_raw_init+0x160>
    {
        if(sd_raw_send_command(CMD_READ_OCR, 0))
    4594:	40 e0       	ldi	r20, 0x00	; 0
    4596:	50 e0       	ldi	r21, 0x00	; 0
    4598:	ba 01       	movw	r22, r20
    459a:	8a e3       	ldi	r24, 0x3A	; 58
    459c:	0e 94 94 20 	call	0x4128	; 0x4128 <sd_raw_send_command>
    45a0:	88 23       	and	r24, r24
    45a2:	11 f0       	breq	.+4      	; 0x45a8 <sd_raw_init+0x146>
        {
            unselect_card();
    45a4:	2a 9a       	sbi	0x05, 2	; 5
            return 0;
    45a6:	49 c0       	rjmp	.+146    	; 0x463a <sd_raw_init+0x1d8>
        }

        if(sd_raw_rec_byte() & 0x40)
    45a8:	0e 94 8a 20 	call	0x4114	; 0x4114 <sd_raw_rec_byte>
    45ac:	86 ff       	sbrs	r24, 6
    45ae:	03 c0       	rjmp	.+6      	; 0x45b6 <sd_raw_init+0x154>
            sd_raw_card_type |= (1 << SD_RAW_SPEC_SDHC);
    45b0:	c4 60       	ori	r28, 0x04	; 4
    45b2:	c0 93 c8 02 	sts	0x02C8, r28	; 0x8002c8 <sd_raw_card_type>

        sd_raw_rec_byte();
    45b6:	0e 94 8a 20 	call	0x4114	; 0x4114 <sd_raw_rec_byte>
        sd_raw_rec_byte();
    45ba:	0e 94 8a 20 	call	0x4114	; 0x4114 <sd_raw_rec_byte>
        sd_raw_rec_byte();
    45be:	0e 94 8a 20 	call	0x4114	; 0x4114 <sd_raw_rec_byte>
    }
#endif

    /* set block size to 512 bytes */
    if(sd_raw_send_command(CMD_SET_BLOCKLEN, 512))
    45c2:	40 e0       	ldi	r20, 0x00	; 0
    45c4:	52 e0       	ldi	r21, 0x02	; 2
    45c6:	60 e0       	ldi	r22, 0x00	; 0
    45c8:	70 e0       	ldi	r23, 0x00	; 0
    45ca:	80 e1       	ldi	r24, 0x10	; 16
    45cc:	0e 94 94 20 	call	0x4128	; 0x4128 <sd_raw_send_command>
    45d0:	88 23       	and	r24, r24
    45d2:	11 f0       	breq	.+4      	; 0x45d8 <sd_raw_init+0x176>
    {
        unselect_card();
    45d4:	2a 9a       	sbi	0x05, 2	; 5
        return 0;
    45d6:	31 c0       	rjmp	.+98     	; 0x463a <sd_raw_init+0x1d8>
    }

    /* deaddress card */
    unselect_card();
    45d8:	2a 9a       	sbi	0x05, 2	; 5

    /* switch to highest SPI frequency possible */
    SPCR &= ~((1 << SPR1) | (1 << SPR0)); /* Clock Frequency: f_OSC / 4 */
    45da:	8c b5       	in	r24, 0x2c	; 44
    45dc:	8c 7f       	andi	r24, 0xFC	; 252
    45de:	8c bd       	out	0x2c, r24	; 44
    SPSR |= (1 << SPI2X); /* Doubled Clock Frequency: f_OSC / 2 */
    45e0:	8d b5       	in	r24, 0x2d	; 45
    45e2:	81 60       	ori	r24, 0x01	; 1
    45e4:	8d bd       	out	0x2d, r24	; 45

#if !SD_RAW_SAVE_RAM
    /* the first block is likely to be accessed first, so precache it here */
    raw_block_address = (offset_t) -1;
    45e6:	8f ef       	ldi	r24, 0xFF	; 255
    45e8:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <raw_block_address>
    45ec:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <raw_block_address+0x1>
    45f0:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <raw_block_address+0x2>
    45f4:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <raw_block_address+0x3>
    45f8:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <raw_block_address+0x4>
    45fc:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <raw_block_address+0x5>
    4600:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <raw_block_address+0x6>
    4604:	80 93 d1 02 	sts	0x02D1, r24	; 0x8002d1 <raw_block_address+0x7>
#if SD_RAW_WRITE_BUFFERING
    raw_block_written = 1;
    4608:	81 e0       	ldi	r24, 0x01	; 1
    460a:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <raw_block_written>
#endif
    if(!sd_raw_read(0, raw_block, sizeof(raw_block)))
    460e:	e1 2c       	mov	r14, r1
    4610:	68 94       	set
    4612:	ff 24       	eor	r15, r15
    4614:	f1 f8       	bld	r15, 1
    4616:	02 ed       	ldi	r16, 0xD2	; 210
    4618:	12 e0       	ldi	r17, 0x02	; 2
    461a:	20 e0       	ldi	r18, 0x00	; 0
    461c:	30 e0       	ldi	r19, 0x00	; 0
    461e:	40 e0       	ldi	r20, 0x00	; 0
    4620:	50 e0       	ldi	r21, 0x00	; 0
    4622:	60 e0       	ldi	r22, 0x00	; 0
    4624:	70 e0       	ldi	r23, 0x00	; 0
    4626:	80 e0       	ldi	r24, 0x00	; 0
    4628:	90 e0       	ldi	r25, 0x00	; 0
    462a:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <sd_raw_read>
        return 0;
#endif

    return 1;
    462e:	01 e0       	ldi	r16, 0x01	; 1
    4630:	81 11       	cpse	r24, r1
    4632:	03 c0       	rjmp	.+6      	; 0x463a <sd_raw_init+0x1d8>
    4634:	00 e0       	ldi	r16, 0x00	; 0
    4636:	01 c0       	rjmp	.+2      	; 0x463a <sd_raw_init+0x1d8>
        if((sd_raw_rec_byte() & 0x01) == 0){
			
            return 0; /* card operation voltage range doesn't match */
		}
        if(sd_raw_rec_byte() != 0xaa)
            return 0; /* wrong test pattern */
    4638:	0c 2f       	mov	r16, r28
    if(!sd_raw_read(0, raw_block, sizeof(raw_block)))
        return 0;
#endif

    return 1;
}
    463a:	80 2f       	mov	r24, r16
    463c:	df 91       	pop	r29
    463e:	cf 91       	pop	r28
    4640:	1f 91       	pop	r17
    4642:	0f 91       	pop	r16
    4644:	ff 90       	pop	r15
    4646:	ef 90       	pop	r14
    4648:	df 90       	pop	r13
    464a:	cf 90       	pop	r12
    464c:	bf 90       	pop	r11
    464e:	af 90       	pop	r10
    4650:	9f 90       	pop	r9
    4652:	08 95       	ret

00004654 <sd_raw_read_interval>:
 * \param[in] p An opaque pointer directly passed to the callback function.
 * \returns 0 on failure, 1 on success
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_write
 */
uint8_t sd_raw_read_interval(offset_t offset, uint8_t* buffer, uintptr_t interval, uintptr_t length, sd_raw_read_interval_handler_t callback, void* p)
{
    4654:	2f 92       	push	r2
    4656:	3f 92       	push	r3
    4658:	4f 92       	push	r4
    465a:	5f 92       	push	r5
    465c:	6f 92       	push	r6
    465e:	7f 92       	push	r7
    4660:	8f 92       	push	r8
    4662:	9f 92       	push	r9
    4664:	af 92       	push	r10
    4666:	bf 92       	push	r11
    4668:	cf 92       	push	r12
    466a:	df 92       	push	r13
    466c:	ef 92       	push	r14
    466e:	ff 92       	push	r15
    4670:	0f 93       	push	r16
    4672:	1f 93       	push	r17
    4674:	cf 93       	push	r28
    4676:	df 93       	push	r29
    4678:	cd b7       	in	r28, 0x3d	; 61
    467a:	de b7       	in	r29, 0x3e	; 62
    467c:	64 97       	sbiw	r28, 0x14	; 20
    467e:	0f b6       	in	r0, 0x3f	; 63
    4680:	f8 94       	cli
    4682:	de bf       	out	0x3e, r29	; 62
    4684:	0f be       	out	0x3f, r0	; 63
    4686:	cd bf       	out	0x3d, r28	; 61
    4688:	28 8b       	std	Y+16, r18	; 0x10
    468a:	39 8b       	std	Y+17, r19	; 0x11
    468c:	4a 8b       	std	Y+18, r20	; 0x12
    468e:	5b 8b       	std	Y+19, r21	; 0x13
    4690:	36 2e       	mov	r3, r22
    4692:	27 2e       	mov	r2, r23
    4694:	8c 8b       	std	Y+20, r24	; 0x14
    4696:	99 83       	std	Y+1, r25	; 0x01
    4698:	1b 83       	std	Y+3, r17	; 0x03
    469a:	0a 83       	std	Y+2, r16	; 0x02
    469c:	37 01       	movw	r6, r14
    469e:	26 01       	movw	r4, r12
    46a0:	bd 86       	std	Y+13, r11	; 0x0d
    46a2:	ac 86       	std	Y+12, r10	; 0x0c
    if(!buffer || interval == 0 || length < interval || !callback)
    46a4:	01 2b       	or	r16, r17
    46a6:	09 f4       	brne	.+2      	; 0x46aa <sd_raw_read_interval+0x56>
    46a8:	54 c0       	rjmp	.+168    	; 0x4752 <sd_raw_read_interval+0xfe>
    46aa:	e1 14       	cp	r14, r1
    46ac:	f1 04       	cpc	r15, r1
    46ae:	09 f4       	brne	.+2      	; 0x46b2 <sd_raw_read_interval+0x5e>
    46b0:	52 c0       	rjmp	.+164    	; 0x4756 <sd_raw_read_interval+0x102>
    46b2:	ce 14       	cp	r12, r14
    46b4:	df 04       	cpc	r13, r15
    46b6:	08 f4       	brcc	.+2      	; 0x46ba <sd_raw_read_interval+0x66>
    46b8:	50 c0       	rjmp	.+160    	; 0x475a <sd_raw_read_interval+0x106>
    46ba:	ab 28       	or	r10, r11
    46bc:	09 f4       	brne	.+2      	; 0x46c0 <sd_raw_read_interval+0x6c>
    46be:	4f c0       	rjmp	.+158    	; 0x475e <sd_raw_read_interval+0x10a>
    46c0:	97 01       	movw	r18, r14
    46c2:	ec 82       	std	Y+4, r14	; 0x04
    46c4:	3d 83       	std	Y+5, r19	; 0x05
    46c6:	9f 86       	std	Y+15, r9	; 0x0f
    46c8:	8e 86       	std	Y+14, r8	; 0x0e
    46ca:	a8 88       	ldd	r10, Y+16	; 0x10
    46cc:	b9 88       	ldd	r11, Y+17	; 0x11
    46ce:	ca 88       	ldd	r12, Y+18	; 0x12
    46d0:	db 88       	ldd	r13, Y+19	; 0x13
    46d2:	93 2c       	mov	r9, r3
    46d4:	32 2c       	mov	r3, r2
    46d6:	2c 88       	ldd	r2, Y+20	; 0x14
    while(length >= interval)
    {
        /* as reading is now buffered, we directly
         * hand over the request to sd_raw_read()
         */
        if(!sd_raw_read(offset, buffer, interval))
    46d8:	73 01       	movw	r14, r6
    46da:	0a 81       	ldd	r16, Y+2	; 0x02
    46dc:	1b 81       	ldd	r17, Y+3	; 0x03
    46de:	2a 2d       	mov	r18, r10
    46e0:	3b 2d       	mov	r19, r11
    46e2:	4c 2d       	mov	r20, r12
    46e4:	5d 2d       	mov	r21, r13
    46e6:	69 2d       	mov	r22, r9
    46e8:	73 2d       	mov	r23, r3
    46ea:	82 2d       	mov	r24, r2
    46ec:	99 81       	ldd	r25, Y+1	; 0x01
    46ee:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <sd_raw_read>
    46f2:	88 23       	and	r24, r24
    46f4:	b9 f1       	breq	.+110    	; 0x4764 <sd_raw_read_interval+0x110>
            return 0;
        if(!callback(buffer, offset, p))
    46f6:	ee 84       	ldd	r14, Y+14	; 0x0e
    46f8:	ff 84       	ldd	r15, Y+15	; 0x0f
    46fa:	0a 2d       	mov	r16, r10
    46fc:	1b 2d       	mov	r17, r11
    46fe:	2c 2d       	mov	r18, r12
    4700:	3d 2d       	mov	r19, r13
    4702:	49 2d       	mov	r20, r9
    4704:	53 2d       	mov	r21, r3
    4706:	62 2d       	mov	r22, r2
    4708:	79 81       	ldd	r23, Y+1	; 0x01
    470a:	8a 81       	ldd	r24, Y+2	; 0x02
    470c:	9b 81       	ldd	r25, Y+3	; 0x03
    470e:	ec 85       	ldd	r30, Y+12	; 0x0c
    4710:	fd 85       	ldd	r31, Y+13	; 0x0d
    4712:	09 95       	icall
    4714:	88 23       	and	r24, r24
    4716:	29 f1       	breq	.+74     	; 0x4762 <sd_raw_read_interval+0x10e>
    4718:	2c 81       	ldd	r18, Y+4	; 0x04
    471a:	3d 81       	ldd	r19, Y+5	; 0x05
    471c:	40 e0       	ldi	r20, 0x00	; 0
    471e:	50 e0       	ldi	r21, 0x00	; 0
    4720:	60 e0       	ldi	r22, 0x00	; 0
    4722:	70 e0       	ldi	r23, 0x00	; 0
    4724:	80 e0       	ldi	r24, 0x00	; 0
    4726:	90 e0       	ldi	r25, 0x00	; 0
    4728:	e9 2c       	mov	r14, r9
    472a:	f3 2c       	mov	r15, r3
    472c:	02 2d       	mov	r16, r2
    472e:	19 81       	ldd	r17, Y+1	; 0x01
    4730:	0e 94 66 27 	call	0x4ecc	; 0x4ecc <__adddi3>
    4734:	a2 2e       	mov	r10, r18
    4736:	b3 2e       	mov	r11, r19
    4738:	c4 2e       	mov	r12, r20
    473a:	d5 2e       	mov	r13, r21
    473c:	96 2e       	mov	r9, r22
    473e:	37 2e       	mov	r3, r23
    4740:	28 2e       	mov	r2, r24
    4742:	99 83       	std	Y+1, r25	; 0x01
            break;
        offset += interval;
        length -= interval;
    4744:	46 18       	sub	r4, r6
    4746:	57 08       	sbc	r5, r7
{
    if(!buffer || interval == 0 || length < interval || !callback)
        return 0;

#if !SD_RAW_SAVE_RAM
    while(length >= interval)
    4748:	46 14       	cp	r4, r6
    474a:	57 04       	cpc	r5, r7
    474c:	28 f6       	brcc	.-118    	; 0x46d8 <sd_raw_read_interval+0x84>
            break;
        offset += interval;
        length -= interval;
    }

    return 1;
    474e:	81 e0       	ldi	r24, 0x01	; 1
    4750:	09 c0       	rjmp	.+18     	; 0x4764 <sd_raw_read_interval+0x110>
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_write
 */
uint8_t sd_raw_read_interval(offset_t offset, uint8_t* buffer, uintptr_t interval, uintptr_t length, sd_raw_read_interval_handler_t callback, void* p)
{
    if(!buffer || interval == 0 || length < interval || !callback)
        return 0;
    4752:	80 e0       	ldi	r24, 0x00	; 0
    4754:	07 c0       	rjmp	.+14     	; 0x4764 <sd_raw_read_interval+0x110>
    4756:	80 e0       	ldi	r24, 0x00	; 0
    4758:	05 c0       	rjmp	.+10     	; 0x4764 <sd_raw_read_interval+0x110>
    475a:	80 e0       	ldi	r24, 0x00	; 0
    475c:	03 c0       	rjmp	.+6      	; 0x4764 <sd_raw_read_interval+0x110>
    475e:	80 e0       	ldi	r24, 0x00	; 0
    4760:	01 c0       	rjmp	.+2      	; 0x4764 <sd_raw_read_interval+0x110>
            break;
        offset += interval;
        length -= interval;
    }

    return 1;
    4762:	81 e0       	ldi	r24, 0x01	; 1
    /* let card some time to finish */
    sd_raw_rec_byte();

    return 1;
#endif
}
    4764:	64 96       	adiw	r28, 0x14	; 20
    4766:	0f b6       	in	r0, 0x3f	; 63
    4768:	f8 94       	cli
    476a:	de bf       	out	0x3e, r29	; 62
    476c:	0f be       	out	0x3f, r0	; 63
    476e:	cd bf       	out	0x3d, r28	; 61
    4770:	df 91       	pop	r29
    4772:	cf 91       	pop	r28
    4774:	1f 91       	pop	r17
    4776:	0f 91       	pop	r16
    4778:	ff 90       	pop	r15
    477a:	ef 90       	pop	r14
    477c:	df 90       	pop	r13
    477e:	cf 90       	pop	r12
    4780:	bf 90       	pop	r11
    4782:	af 90       	pop	r10
    4784:	9f 90       	pop	r9
    4786:	8f 90       	pop	r8
    4788:	7f 90       	pop	r7
    478a:	6f 90       	pop	r6
    478c:	5f 90       	pop	r5
    478e:	4f 90       	pop	r4
    4790:	3f 90       	pop	r3
    4792:	2f 90       	pop	r2
    4794:	08 95       	ret

00004796 <sd_raw_write>:
 * \param[in] length The number of bytes to write.
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_read_interval
 */
uint8_t sd_raw_write(offset_t offset, const uint8_t* buffer, uintptr_t length)
{
    4796:	2f 92       	push	r2
    4798:	3f 92       	push	r3
    479a:	4f 92       	push	r4
    479c:	5f 92       	push	r5
    479e:	6f 92       	push	r6
    47a0:	7f 92       	push	r7
    47a2:	8f 92       	push	r8
    47a4:	9f 92       	push	r9
    47a6:	af 92       	push	r10
    47a8:	bf 92       	push	r11
    47aa:	cf 92       	push	r12
    47ac:	df 92       	push	r13
    47ae:	ef 92       	push	r14
    47b0:	ff 92       	push	r15
    47b2:	0f 93       	push	r16
    47b4:	1f 93       	push	r17
    47b6:	cf 93       	push	r28
    47b8:	df 93       	push	r29
    47ba:	cd b7       	in	r28, 0x3d	; 61
    47bc:	de b7       	in	r29, 0x3e	; 62
    47be:	69 97       	sbiw	r28, 0x19	; 25
    47c0:	0f b6       	in	r0, 0x3f	; 63
    47c2:	f8 94       	cli
    47c4:	de bf       	out	0x3e, r29	; 62
    47c6:	0f be       	out	0x3f, r0	; 63
    47c8:	cd bf       	out	0x3d, r28	; 61
    47ca:	29 83       	std	Y+1, r18	; 0x01
    47cc:	3a 83       	std	Y+2, r19	; 0x02
    47ce:	4b 83       	std	Y+3, r20	; 0x03
    47d0:	5c 83       	std	Y+4, r21	; 0x04
    47d2:	6d 83       	std	Y+5, r22	; 0x05
    47d4:	7e 83       	std	Y+6, r23	; 0x06
    47d6:	8f 83       	std	Y+7, r24	; 0x07
    47d8:	98 87       	std	Y+8, r25	; 0x08
    47da:	38 01       	movw	r6, r16
    47dc:	27 01       	movw	r4, r14
        return 0;

    offset_t block_address;
    uint16_t block_offset;
    uint16_t write_length;
    while(length > 0)
    47de:	ef 28       	or	r14, r15
    47e0:	09 f4       	brne	.+2      	; 0x47e4 <sd_raw_write+0x4e>
    47e2:	0b c1       	rjmp	.+534    	; 0x49fa <sd_raw_write+0x264>
    47e4:	0f 2e       	mov	r0, r31
    47e6:	f2 ed       	ldi	r31, 0xD2	; 210
    47e8:	2f 2e       	mov	r2, r31
    47ea:	f4 e0       	ldi	r31, 0x04	; 4
    47ec:	3f 2e       	mov	r3, r31
    47ee:	f0 2d       	mov	r31, r0
    {
        /* determine byte count to write at once */
        block_offset = offset & 0x01ff;
    47f0:	29 81       	ldd	r18, Y+1	; 0x01
    47f2:	3a 81       	ldd	r19, Y+2	; 0x02
    47f4:	31 70       	andi	r19, 0x01	; 1
    47f6:	39 8f       	std	Y+25, r19	; 0x19
    47f8:	28 8f       	std	Y+24, r18	; 0x18
        block_address = offset - block_offset;
    47fa:	40 e0       	ldi	r20, 0x00	; 0
    47fc:	50 e0       	ldi	r21, 0x00	; 0
    47fe:	60 e0       	ldi	r22, 0x00	; 0
    4800:	70 e0       	ldi	r23, 0x00	; 0
    4802:	cb 01       	movw	r24, r22
    4804:	29 87       	std	Y+9, r18	; 0x09
    4806:	3a 87       	std	Y+10, r19	; 0x0a
    4808:	4b 87       	std	Y+11, r20	; 0x0b
    480a:	5c 87       	std	Y+12, r21	; 0x0c
    480c:	6d 87       	std	Y+13, r22	; 0x0d
    480e:	7e 87       	std	Y+14, r23	; 0x0e
    4810:	8f 87       	std	Y+15, r24	; 0x0f
    4812:	98 8b       	std	Y+16, r25	; 0x10
    4814:	29 81       	ldd	r18, Y+1	; 0x01
    4816:	3a 81       	ldd	r19, Y+2	; 0x02
    4818:	4b 81       	ldd	r20, Y+3	; 0x03
    481a:	5c 81       	ldd	r21, Y+4	; 0x04
    481c:	6d 81       	ldd	r22, Y+5	; 0x05
    481e:	7e 81       	ldd	r23, Y+6	; 0x06
    4820:	8f 81       	ldd	r24, Y+7	; 0x07
    4822:	98 85       	ldd	r25, Y+8	; 0x08
    4824:	a9 84       	ldd	r10, Y+9	; 0x09
    4826:	ba 84       	ldd	r11, Y+10	; 0x0a
    4828:	c1 2c       	mov	r12, r1
    482a:	d1 2c       	mov	r13, r1
    482c:	e1 2c       	mov	r14, r1
    482e:	f1 2c       	mov	r15, r1
    4830:	00 e0       	ldi	r16, 0x00	; 0
    4832:	10 e0       	ldi	r17, 0x00	; 0
    4834:	0e 94 7b 27 	call	0x4ef6	; 0x4ef6 <__subdi3>
    4838:	29 87       	std	Y+9, r18	; 0x09
    483a:	39 8b       	std	Y+17, r19	; 0x11
    483c:	4a 8b       	std	Y+18, r20	; 0x12
    483e:	5b 8b       	std	Y+19, r21	; 0x13
    4840:	6c 8b       	std	Y+20, r22	; 0x14
    4842:	7d 8b       	std	Y+21, r23	; 0x15
    4844:	8e 8b       	std	Y+22, r24	; 0x16
    4846:	9f 8b       	std	Y+23, r25	; 0x17
    4848:	81 2c       	mov	r8, r1
    484a:	68 94       	set
    484c:	99 24       	eor	r9, r9
    484e:	91 f8       	bld	r9, 1
    4850:	68 8d       	ldd	r22, Y+24	; 0x18
    4852:	79 8d       	ldd	r23, Y+25	; 0x19
    4854:	86 1a       	sub	r8, r22
    4856:	97 0a       	sbc	r9, r23
    4858:	48 14       	cp	r4, r8
    485a:	59 04       	cpc	r5, r9
    485c:	08 f4       	brcc	.+2      	; 0x4860 <sd_raw_write+0xca>
    485e:	42 01       	movw	r8, r4
            write_length = length;
        
        /* Merge the data to write with the content of the block.
         * Use the cached block if available.
         */
        if(block_address != raw_block_address)
    4860:	a0 90 ca 02 	lds	r10, 0x02CA	; 0x8002ca <raw_block_address>
    4864:	b0 90 cb 02 	lds	r11, 0x02CB	; 0x8002cb <raw_block_address+0x1>
    4868:	c0 90 cc 02 	lds	r12, 0x02CC	; 0x8002cc <raw_block_address+0x2>
    486c:	d0 90 cd 02 	lds	r13, 0x02CD	; 0x8002cd <raw_block_address+0x3>
    4870:	e0 90 ce 02 	lds	r14, 0x02CE	; 0x8002ce <raw_block_address+0x4>
    4874:	f0 90 cf 02 	lds	r15, 0x02CF	; 0x8002cf <raw_block_address+0x5>
    4878:	00 91 d0 02 	lds	r16, 0x02D0	; 0x8002d0 <raw_block_address+0x6>
    487c:	10 91 d1 02 	lds	r17, 0x02D1	; 0x8002d1 <raw_block_address+0x7>
    4880:	29 85       	ldd	r18, Y+9	; 0x09
    4882:	39 89       	ldd	r19, Y+17	; 0x11
    4884:	4a 89       	ldd	r20, Y+18	; 0x12
    4886:	5b 89       	ldd	r21, Y+19	; 0x13
    4888:	6c 89       	ldd	r22, Y+20	; 0x14
    488a:	7d 89       	ldd	r23, Y+21	; 0x15
    488c:	8e 89       	ldd	r24, Y+22	; 0x16
    488e:	9f 89       	ldd	r25, Y+23	; 0x17
    4890:	0e 94 84 27 	call	0x4f08	; 0x4f08 <__cmpdi2>
    4894:	c1 f1       	breq	.+112    	; 0x4906 <sd_raw_write+0x170>
        {
#if SD_RAW_WRITE_BUFFERING
            if(!sd_raw_sync())
    4896:	0e 94 d0 20 	call	0x41a0	; 0x41a0 <sd_raw_sync>
    489a:	88 23       	and	r24, r24
    489c:	09 f4       	brne	.+2      	; 0x48a0 <sd_raw_write+0x10a>
    489e:	b0 c0       	rjmp	.+352    	; 0x4a00 <sd_raw_write+0x26a>
                return 0;
#endif

            if(block_offset || write_length < 512)
    48a0:	88 8d       	ldd	r24, Y+24	; 0x18
    48a2:	99 8d       	ldd	r25, Y+25	; 0x19
    48a4:	89 2b       	or	r24, r25
    48a6:	21 f4       	brne	.+8      	; 0x48b0 <sd_raw_write+0x11a>
    48a8:	81 14       	cp	r8, r1
    48aa:	92 e0       	ldi	r25, 0x02	; 2
    48ac:	99 06       	cpc	r9, r25
    48ae:	98 f4       	brcc	.+38     	; 0x48d6 <sd_raw_write+0x140>
            {
                if(!sd_raw_read(block_address, raw_block, sizeof(raw_block)))
    48b0:	e1 2c       	mov	r14, r1
    48b2:	68 94       	set
    48b4:	ff 24       	eor	r15, r15
    48b6:	f1 f8       	bld	r15, 1
    48b8:	02 ed       	ldi	r16, 0xD2	; 210
    48ba:	12 e0       	ldi	r17, 0x02	; 2
    48bc:	29 85       	ldd	r18, Y+9	; 0x09
    48be:	39 89       	ldd	r19, Y+17	; 0x11
    48c0:	4a 89       	ldd	r20, Y+18	; 0x12
    48c2:	5b 89       	ldd	r21, Y+19	; 0x13
    48c4:	6c 89       	ldd	r22, Y+20	; 0x14
    48c6:	7d 89       	ldd	r23, Y+21	; 0x15
    48c8:	8e 89       	ldd	r24, Y+22	; 0x16
    48ca:	9f 89       	ldd	r25, Y+23	; 0x17
    48cc:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <sd_raw_read>
    48d0:	88 23       	and	r24, r24
    48d2:	09 f4       	brne	.+2      	; 0x48d6 <sd_raw_write+0x140>
    48d4:	95 c0       	rjmp	.+298    	; 0x4a00 <sd_raw_write+0x26a>
                    return 0;
            }
            raw_block_address = block_address;
    48d6:	e9 85       	ldd	r30, Y+9	; 0x09
    48d8:	e0 93 ca 02 	sts	0x02CA, r30	; 0x8002ca <raw_block_address>
    48dc:	f9 89       	ldd	r31, Y+17	; 0x11
    48de:	f0 93 cb 02 	sts	0x02CB, r31	; 0x8002cb <raw_block_address+0x1>
    48e2:	2a 89       	ldd	r18, Y+18	; 0x12
    48e4:	20 93 cc 02 	sts	0x02CC, r18	; 0x8002cc <raw_block_address+0x2>
    48e8:	3b 89       	ldd	r19, Y+19	; 0x13
    48ea:	30 93 cd 02 	sts	0x02CD, r19	; 0x8002cd <raw_block_address+0x3>
    48ee:	4c 89       	ldd	r20, Y+20	; 0x14
    48f0:	40 93 ce 02 	sts	0x02CE, r20	; 0x8002ce <raw_block_address+0x4>
    48f4:	5d 89       	ldd	r21, Y+21	; 0x15
    48f6:	50 93 cf 02 	sts	0x02CF, r21	; 0x8002cf <raw_block_address+0x5>
    48fa:	6e 89       	ldd	r22, Y+22	; 0x16
    48fc:	60 93 d0 02 	sts	0x02D0, r22	; 0x8002d0 <raw_block_address+0x6>
    4900:	7f 89       	ldd	r23, Y+23	; 0x17
    4902:	70 93 d1 02 	sts	0x02D1, r23	; 0x8002d1 <raw_block_address+0x7>
        }

        if(buffer != raw_block)
    4906:	82 ed       	ldi	r24, 0xD2	; 210
    4908:	68 16       	cp	r6, r24
    490a:	82 e0       	ldi	r24, 0x02	; 2
    490c:	78 06       	cpc	r7, r24
    490e:	71 f0       	breq	.+28     	; 0x492c <sd_raw_write+0x196>
        {
            memcpy(raw_block + block_offset, buffer, write_length);
    4910:	a4 01       	movw	r20, r8
    4912:	b3 01       	movw	r22, r6
    4914:	88 8d       	ldd	r24, Y+24	; 0x18
    4916:	99 8d       	ldd	r25, Y+25	; 0x19
    4918:	8e 52       	subi	r24, 0x2E	; 46
    491a:	9d 4f       	sbci	r25, 0xFD	; 253
    491c:	0e 94 99 27 	call	0x4f32	; 0x4f32 <memcpy>

#if SD_RAW_WRITE_BUFFERING
            raw_block_written = 0;
    4920:	10 92 c9 02 	sts	0x02C9, r1	; 0x8002c9 <raw_block_written>

            if(length == write_length)
    4924:	84 14       	cp	r8, r4
    4926:	95 04       	cpc	r9, r5
    4928:	09 f4       	brne	.+2      	; 0x492c <sd_raw_write+0x196>
    492a:	69 c0       	rjmp	.+210    	; 0x49fe <sd_raw_write+0x268>
                return 1;
#endif
        }

        /* address card */
        select_card();
    492c:	2a 98       	cbi	0x05, 2	; 5

        /* send single block request */
#if SD_RAW_SDHC
        if(sd_raw_send_command(CMD_WRITE_SINGLE_BLOCK, (sd_raw_card_type & (1 << SD_RAW_SPEC_SDHC) ? block_address / 512 : block_address)))
    492e:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <sd_raw_card_type>
    4932:	82 ff       	sbrs	r24, 2
    4934:	10 c0       	rjmp	.+32     	; 0x4956 <sd_raw_write+0x1c0>
    4936:	29 85       	ldd	r18, Y+9	; 0x09
    4938:	39 89       	ldd	r19, Y+17	; 0x11
    493a:	4a 89       	ldd	r20, Y+18	; 0x12
    493c:	5b 89       	ldd	r21, Y+19	; 0x13
    493e:	6c 89       	ldd	r22, Y+20	; 0x14
    4940:	7d 89       	ldd	r23, Y+21	; 0x15
    4942:	8e 89       	ldd	r24, Y+22	; 0x16
    4944:	9f 89       	ldd	r25, Y+23	; 0x17
    4946:	09 e0       	ldi	r16, 0x09	; 9
    4948:	0e 94 4a 27 	call	0x4e94	; 0x4e94 <__lshrdi3>
    494c:	64 2f       	mov	r22, r20
    494e:	75 2f       	mov	r23, r21
    4950:	42 2f       	mov	r20, r18
    4952:	53 2f       	mov	r21, r19
    4954:	04 c0       	rjmp	.+8      	; 0x495e <sd_raw_write+0x1c8>
    4956:	49 85       	ldd	r20, Y+9	; 0x09
    4958:	59 89       	ldd	r21, Y+17	; 0x11
    495a:	6a 89       	ldd	r22, Y+18	; 0x12
    495c:	7b 89       	ldd	r23, Y+19	; 0x13
    495e:	88 e1       	ldi	r24, 0x18	; 24
    4960:	0e 94 94 20 	call	0x4128	; 0x4128 <sd_raw_send_command>
    4964:	88 23       	and	r24, r24
    4966:	19 f0       	breq	.+6      	; 0x496e <sd_raw_write+0x1d8>
#else
        if(sd_raw_send_command(CMD_WRITE_SINGLE_BLOCK, block_address))
#endif
        {
            unselect_card();
    4968:	2a 9a       	sbi	0x05, 2	; 5
            return 0;
    496a:	80 e0       	ldi	r24, 0x00	; 0
    496c:	49 c0       	rjmp	.+146    	; 0x4a00 <sd_raw_write+0x26a>
        }

        /* send start byte */
        sd_raw_send_byte(0xfe);
    496e:	8e ef       	ldi	r24, 0xFE	; 254
    4970:	0e 94 82 20 	call	0x4104	; 0x4104 <sd_raw_send_byte>
    4974:	e2 ed       	ldi	r30, 0xD2	; 210
    4976:	f2 e0       	ldi	r31, 0x02	; 2
    4978:	fa 87       	std	Y+10, r31	; 0x0a
    497a:	e9 87       	std	Y+9, r30	; 0x09

        /* write byte block */
        uint8_t* cache = raw_block;
        for(uint16_t i = 0; i < 512; ++i)
            sd_raw_send_byte(*cache++);
    497c:	e9 85       	ldd	r30, Y+9	; 0x09
    497e:	fa 85       	ldd	r31, Y+10	; 0x0a
    4980:	81 91       	ld	r24, Z+
    4982:	fa 87       	std	Y+10, r31	; 0x0a
    4984:	e9 87       	std	Y+9, r30	; 0x09
    4986:	0e 94 82 20 	call	0x4104	; 0x4104 <sd_raw_send_byte>
        /* send start byte */
        sd_raw_send_byte(0xfe);

        /* write byte block */
        uint8_t* cache = raw_block;
        for(uint16_t i = 0; i < 512; ++i)
    498a:	29 85       	ldd	r18, Y+9	; 0x09
    498c:	3a 85       	ldd	r19, Y+10	; 0x0a
    498e:	22 15       	cp	r18, r2
    4990:	33 05       	cpc	r19, r3
    4992:	a1 f7       	brne	.-24     	; 0x497c <sd_raw_write+0x1e6>
            sd_raw_send_byte(*cache++);

        /* write dummy crc16 */
        sd_raw_send_byte(0xff);
    4994:	8f ef       	ldi	r24, 0xFF	; 255
    4996:	0e 94 82 20 	call	0x4104	; 0x4104 <sd_raw_send_byte>
        sd_raw_send_byte(0xff);
    499a:	8f ef       	ldi	r24, 0xFF	; 255
    499c:	0e 94 82 20 	call	0x4104	; 0x4104 <sd_raw_send_byte>

        /* wait while card is busy */
        while(sd_raw_rec_byte() != 0xff);
    49a0:	0e 94 8a 20 	call	0x4114	; 0x4114 <sd_raw_rec_byte>
    49a4:	8f 3f       	cpi	r24, 0xFF	; 255
    49a6:	e1 f7       	brne	.-8      	; 0x49a0 <sd_raw_write+0x20a>
        sd_raw_rec_byte();
    49a8:	0e 94 8a 20 	call	0x4114	; 0x4114 <sd_raw_rec_byte>

        /* deaddress card */
        unselect_card();
    49ac:	2a 9a       	sbi	0x05, 2	; 5

        buffer += write_length;
    49ae:	68 0c       	add	r6, r8
    49b0:	79 1c       	adc	r7, r9
        offset += write_length;
    49b2:	94 01       	movw	r18, r8
    49b4:	40 e0       	ldi	r20, 0x00	; 0
    49b6:	50 e0       	ldi	r21, 0x00	; 0
    49b8:	60 e0       	ldi	r22, 0x00	; 0
    49ba:	70 e0       	ldi	r23, 0x00	; 0
    49bc:	80 e0       	ldi	r24, 0x00	; 0
    49be:	90 e0       	ldi	r25, 0x00	; 0
    49c0:	a9 80       	ldd	r10, Y+1	; 0x01
    49c2:	ba 80       	ldd	r11, Y+2	; 0x02
    49c4:	cb 80       	ldd	r12, Y+3	; 0x03
    49c6:	dc 80       	ldd	r13, Y+4	; 0x04
    49c8:	ed 80       	ldd	r14, Y+5	; 0x05
    49ca:	fe 80       	ldd	r15, Y+6	; 0x06
    49cc:	0f 81       	ldd	r16, Y+7	; 0x07
    49ce:	18 85       	ldd	r17, Y+8	; 0x08
    49d0:	0e 94 66 27 	call	0x4ecc	; 0x4ecc <__adddi3>
    49d4:	29 83       	std	Y+1, r18	; 0x01
    49d6:	3a 83       	std	Y+2, r19	; 0x02
    49d8:	4b 83       	std	Y+3, r20	; 0x03
    49da:	5c 83       	std	Y+4, r21	; 0x04
    49dc:	6d 83       	std	Y+5, r22	; 0x05
    49de:	7e 83       	std	Y+6, r23	; 0x06
    49e0:	8f 83       	std	Y+7, r24	; 0x07
    49e2:	98 87       	std	Y+8, r25	; 0x08
        length -= write_length;
    49e4:	48 18       	sub	r4, r8
    49e6:	59 08       	sbc	r5, r9

#if SD_RAW_WRITE_BUFFERING
        raw_block_written = 1;
    49e8:	31 e0       	ldi	r19, 0x01	; 1
    49ea:	30 93 c9 02 	sts	0x02C9, r19	; 0x8002c9 <raw_block_written>
        return 0;

    offset_t block_address;
    uint16_t block_offset;
    uint16_t write_length;
    while(length > 0)
    49ee:	41 14       	cp	r4, r1
    49f0:	51 04       	cpc	r5, r1
    49f2:	09 f0       	breq	.+2      	; 0x49f6 <sd_raw_write+0x260>
    49f4:	fd ce       	rjmp	.-518    	; 0x47f0 <sd_raw_write+0x5a>
#if SD_RAW_WRITE_BUFFERING
        raw_block_written = 1;
#endif
    }

    return 1;
    49f6:	81 e0       	ldi	r24, 0x01	; 1
    49f8:	03 c0       	rjmp	.+6      	; 0x4a00 <sd_raw_write+0x26a>
    49fa:	81 e0       	ldi	r24, 0x01	; 1
    49fc:	01 c0       	rjmp	.+2      	; 0x4a00 <sd_raw_write+0x26a>

#if SD_RAW_WRITE_BUFFERING
            raw_block_written = 0;

            if(length == write_length)
                return 1;
    49fe:	81 e0       	ldi	r24, 0x01	; 1
        raw_block_written = 1;
#endif
    }

    return 1;
}
    4a00:	69 96       	adiw	r28, 0x19	; 25
    4a02:	0f b6       	in	r0, 0x3f	; 63
    4a04:	f8 94       	cli
    4a06:	de bf       	out	0x3e, r29	; 62
    4a08:	0f be       	out	0x3f, r0	; 63
    4a0a:	cd bf       	out	0x3d, r28	; 61
    4a0c:	df 91       	pop	r29
    4a0e:	cf 91       	pop	r28
    4a10:	1f 91       	pop	r17
    4a12:	0f 91       	pop	r16
    4a14:	ff 90       	pop	r15
    4a16:	ef 90       	pop	r14
    4a18:	df 90       	pop	r13
    4a1a:	cf 90       	pop	r12
    4a1c:	bf 90       	pop	r11
    4a1e:	af 90       	pop	r10
    4a20:	9f 90       	pop	r9
    4a22:	8f 90       	pop	r8
    4a24:	7f 90       	pop	r7
    4a26:	6f 90       	pop	r6
    4a28:	5f 90       	pop	r5
    4a2a:	4f 90       	pop	r4
    4a2c:	3f 90       	pop	r3
    4a2e:	2f 90       	pop	r2
    4a30:	08 95       	ret

00004a32 <sd_raw_write_interval>:
 * \param[in] p An opaque pointer directly passed to the callback function.
 * \returns 0 on failure, 1 on success
 * \see sd_raw_read_interval, sd_raw_write, sd_raw_read
 */
uint8_t sd_raw_write_interval(offset_t offset, uint8_t* buffer, uintptr_t length, sd_raw_write_interval_handler_t callback, void* p)
{
    4a32:	2f 92       	push	r2
    4a34:	3f 92       	push	r3
    4a36:	4f 92       	push	r4
    4a38:	5f 92       	push	r5
    4a3a:	6f 92       	push	r6
    4a3c:	7f 92       	push	r7
    4a3e:	8f 92       	push	r8
    4a40:	9f 92       	push	r9
    4a42:	af 92       	push	r10
    4a44:	bf 92       	push	r11
    4a46:	cf 92       	push	r12
    4a48:	df 92       	push	r13
    4a4a:	ef 92       	push	r14
    4a4c:	ff 92       	push	r15
    4a4e:	0f 93       	push	r16
    4a50:	1f 93       	push	r17
    4a52:	cf 93       	push	r28
    4a54:	df 93       	push	r29
    4a56:	cd b7       	in	r28, 0x3d	; 61
    4a58:	de b7       	in	r29, 0x3e	; 62
    4a5a:	28 97       	sbiw	r28, 0x08	; 8
    4a5c:	0f b6       	in	r0, 0x3f	; 63
    4a5e:	f8 94       	cli
    4a60:	de bf       	out	0x3e, r29	; 62
    4a62:	0f be       	out	0x3f, r0	; 63
    4a64:	cd bf       	out	0x3d, r28	; 61
    4a66:	56 2e       	mov	r5, r22
    4a68:	47 2e       	mov	r4, r23
    4a6a:	1a 83       	std	Y+2, r17	; 0x02
    4a6c:	09 83       	std	Y+1, r16	; 0x01
    4a6e:	dc 82       	std	Y+4, r13	; 0x04
    4a70:	cb 82       	std	Y+3, r12	; 0x03
    4a72:	be 82       	std	Y+6, r11	; 0x06
    4a74:	ad 82       	std	Y+5, r10	; 0x05
#if SD_RAW_SAVE_RAM
    #error "SD_RAW_WRITE_SUPPORT is not supported together with SD_RAW_SAVE_RAM"
#endif

    if(!buffer || !callback)
    4a76:	01 2b       	or	r16, r17
    4a78:	09 f4       	brne	.+2      	; 0x4a7c <sd_raw_write_interval+0x4a>
    4a7a:	48 c0       	rjmp	.+144    	; 0x4b0c <sd_raw_write_interval+0xda>
    4a7c:	cd 28       	or	r12, r13
    4a7e:	09 f4       	brne	.+2      	; 0x4a82 <sd_raw_write_interval+0x50>
    4a80:	47 c0       	rjmp	.+142    	; 0x4b10 <sd_raw_write_interval+0xde>
    4a82:	f8 86       	std	Y+8, r15	; 0x08
    4a84:	ef 82       	std	Y+7, r14	; 0x07
    4a86:	a2 2e       	mov	r10, r18
    4a88:	b3 2e       	mov	r11, r19
    4a8a:	c4 2e       	mov	r12, r20
    4a8c:	d5 2e       	mov	r13, r21
    4a8e:	98 2e       	mov	r9, r24
    4a90:	89 2e       	mov	r8, r25
    4a92:	17 01       	movw	r2, r14
    4a94:	32 c0       	rjmp	.+100    	; 0x4afa <sd_raw_write_interval+0xc8>
    while(endless || length > 0)
    {
        uint16_t bytes_to_write = callback(buffer, offset, p);
        if(!bytes_to_write)
            break;
        if(!endless && bytes_to_write > length)
    4a96:	8f 81       	ldd	r24, Y+7	; 0x07
    4a98:	98 85       	ldd	r25, Y+8	; 0x08
    4a9a:	86 15       	cp	r24, r6
    4a9c:	97 05       	cpc	r25, r7
    4a9e:	d0 f1       	brcs	.+116    	; 0x4b14 <sd_raw_write_interval+0xe2>
            return 0;

        /* as writing is always buffered, we directly
         * hand over the request to sd_raw_write()
         */
        if(!sd_raw_write(offset, buffer, bytes_to_write))
    4aa0:	73 01       	movw	r14, r6
    4aa2:	09 81       	ldd	r16, Y+1	; 0x01
    4aa4:	1a 81       	ldd	r17, Y+2	; 0x02
    4aa6:	2a 2d       	mov	r18, r10
    4aa8:	3b 2d       	mov	r19, r11
    4aaa:	4c 2d       	mov	r20, r12
    4aac:	5d 2d       	mov	r21, r13
    4aae:	65 2d       	mov	r22, r5
    4ab0:	74 2d       	mov	r23, r4
    4ab2:	89 2d       	mov	r24, r9
    4ab4:	98 2d       	mov	r25, r8
    4ab6:	0e 94 cb 23 	call	0x4796	; 0x4796 <sd_raw_write>
    4aba:	88 23       	and	r24, r24
    4abc:	09 f4       	brne	.+2      	; 0x4ac0 <sd_raw_write_interval+0x8e>
    4abe:	58 c0       	rjmp	.+176    	; 0x4b70 <sd_raw_write_interval+0x13e>
            return 0;

        offset += bytes_to_write;
    4ac0:	a3 01       	movw	r20, r6
    4ac2:	26 2d       	mov	r18, r6
    4ac4:	35 2f       	mov	r19, r21
    4ac6:	40 e0       	ldi	r20, 0x00	; 0
    4ac8:	50 e0       	ldi	r21, 0x00	; 0
    4aca:	60 e0       	ldi	r22, 0x00	; 0
    4acc:	70 e0       	ldi	r23, 0x00	; 0
    4ace:	80 e0       	ldi	r24, 0x00	; 0
    4ad0:	90 e0       	ldi	r25, 0x00	; 0
    4ad2:	e5 2c       	mov	r14, r5
    4ad4:	f4 2c       	mov	r15, r4
    4ad6:	09 2d       	mov	r16, r9
    4ad8:	18 2d       	mov	r17, r8
    4ada:	0e 94 66 27 	call	0x4ecc	; 0x4ecc <__adddi3>
    4ade:	a2 2e       	mov	r10, r18
    4ae0:	b3 2e       	mov	r11, r19
    4ae2:	c4 2e       	mov	r12, r20
    4ae4:	d5 2e       	mov	r13, r21
    4ae6:	56 2e       	mov	r5, r22
    4ae8:	47 2e       	mov	r4, r23
    4aea:	98 2e       	mov	r9, r24
    4aec:	89 2e       	mov	r8, r25
        length -= bytes_to_write;
    4aee:	ef 81       	ldd	r30, Y+7	; 0x07
    4af0:	f8 85       	ldd	r31, Y+8	; 0x08
    4af2:	e6 19       	sub	r30, r6
    4af4:	f7 09       	sbc	r31, r7
    4af6:	f8 87       	std	Y+8, r31	; 0x08
    4af8:	ef 83       	std	Y+7, r30	; 0x07

    if(!buffer || !callback)
        return 0;

    uint8_t endless = (length == 0);
    while(endless || length > 0)
    4afa:	21 14       	cp	r2, r1
    4afc:	31 04       	cpc	r3, r1
    4afe:	21 f1       	breq	.+72     	; 0x4b48 <sd_raw_write_interval+0x116>
    4b00:	8f 81       	ldd	r24, Y+7	; 0x07
    4b02:	98 85       	ldd	r25, Y+8	; 0x08
    4b04:	89 2b       	or	r24, r25
    4b06:	61 f4       	brne	.+24     	; 0x4b20 <sd_raw_write_interval+0xee>

        offset += bytes_to_write;
        length -= bytes_to_write;
    }

    return 1;
    4b08:	81 e0       	ldi	r24, 0x01	; 1
    4b0a:	32 c0       	rjmp	.+100    	; 0x4b70 <sd_raw_write_interval+0x13e>
#if SD_RAW_SAVE_RAM
    #error "SD_RAW_WRITE_SUPPORT is not supported together with SD_RAW_SAVE_RAM"
#endif

    if(!buffer || !callback)
        return 0;
    4b0c:	80 e0       	ldi	r24, 0x00	; 0
    4b0e:	30 c0       	rjmp	.+96     	; 0x4b70 <sd_raw_write_interval+0x13e>
    4b10:	80 e0       	ldi	r24, 0x00	; 0
    4b12:	2e c0       	rjmp	.+92     	; 0x4b70 <sd_raw_write_interval+0x13e>
    {
        uint16_t bytes_to_write = callback(buffer, offset, p);
        if(!bytes_to_write)
            break;
        if(!endless && bytes_to_write > length)
            return 0;
    4b14:	80 e0       	ldi	r24, 0x00	; 0
    4b16:	2c c0       	rjmp	.+88     	; 0x4b70 <sd_raw_write_interval+0x13e>

        offset += bytes_to_write;
        length -= bytes_to_write;
    }

    return 1;
    4b18:	81 e0       	ldi	r24, 0x01	; 1
    4b1a:	2a c0       	rjmp	.+84     	; 0x4b70 <sd_raw_write_interval+0x13e>
    4b1c:	81 e0       	ldi	r24, 0x01	; 1
    4b1e:	28 c0       	rjmp	.+80     	; 0x4b70 <sd_raw_write_interval+0x13e>
        return 0;

    uint8_t endless = (length == 0);
    while(endless || length > 0)
    {
        uint16_t bytes_to_write = callback(buffer, offset, p);
    4b20:	ed 80       	ldd	r14, Y+5	; 0x05
    4b22:	fe 80       	ldd	r15, Y+6	; 0x06
    4b24:	0a 2d       	mov	r16, r10
    4b26:	1b 2d       	mov	r17, r11
    4b28:	2c 2d       	mov	r18, r12
    4b2a:	3d 2d       	mov	r19, r13
    4b2c:	45 2d       	mov	r20, r5
    4b2e:	54 2d       	mov	r21, r4
    4b30:	69 2d       	mov	r22, r9
    4b32:	78 2d       	mov	r23, r8
    4b34:	89 81       	ldd	r24, Y+1	; 0x01
    4b36:	9a 81       	ldd	r25, Y+2	; 0x02
    4b38:	eb 81       	ldd	r30, Y+3	; 0x03
    4b3a:	fc 81       	ldd	r31, Y+4	; 0x04
    4b3c:	09 95       	icall
    4b3e:	3c 01       	movw	r6, r24
        if(!bytes_to_write)
    4b40:	89 2b       	or	r24, r25
    4b42:	09 f0       	breq	.+2      	; 0x4b46 <sd_raw_write_interval+0x114>
    4b44:	a8 cf       	rjmp	.-176    	; 0x4a96 <sd_raw_write_interval+0x64>
    4b46:	e8 cf       	rjmp	.-48     	; 0x4b18 <sd_raw_write_interval+0xe6>
        return 0;

    uint8_t endless = (length == 0);
    while(endless || length > 0)
    {
        uint16_t bytes_to_write = callback(buffer, offset, p);
    4b48:	ed 80       	ldd	r14, Y+5	; 0x05
    4b4a:	fe 80       	ldd	r15, Y+6	; 0x06
    4b4c:	0a 2d       	mov	r16, r10
    4b4e:	1b 2d       	mov	r17, r11
    4b50:	2c 2d       	mov	r18, r12
    4b52:	3d 2d       	mov	r19, r13
    4b54:	45 2d       	mov	r20, r5
    4b56:	54 2d       	mov	r21, r4
    4b58:	69 2d       	mov	r22, r9
    4b5a:	78 2d       	mov	r23, r8
    4b5c:	89 81       	ldd	r24, Y+1	; 0x01
    4b5e:	9a 81       	ldd	r25, Y+2	; 0x02
    4b60:	eb 81       	ldd	r30, Y+3	; 0x03
    4b62:	fc 81       	ldd	r31, Y+4	; 0x04
    4b64:	09 95       	icall
    4b66:	3c 01       	movw	r6, r24
        if(!bytes_to_write)
    4b68:	89 2b       	or	r24, r25
    4b6a:	09 f0       	breq	.+2      	; 0x4b6e <sd_raw_write_interval+0x13c>
    4b6c:	99 cf       	rjmp	.-206    	; 0x4aa0 <sd_raw_write_interval+0x6e>
    4b6e:	d6 cf       	rjmp	.-84     	; 0x4b1c <sd_raw_write_interval+0xea>
        offset += bytes_to_write;
        length -= bytes_to_write;
    }

    return 1;
}
    4b70:	28 96       	adiw	r28, 0x08	; 8
    4b72:	0f b6       	in	r0, 0x3f	; 63
    4b74:	f8 94       	cli
    4b76:	de bf       	out	0x3e, r29	; 62
    4b78:	0f be       	out	0x3f, r0	; 63
    4b7a:	cd bf       	out	0x3d, r28	; 61
    4b7c:	df 91       	pop	r29
    4b7e:	cf 91       	pop	r28
    4b80:	1f 91       	pop	r17
    4b82:	0f 91       	pop	r16
    4b84:	ff 90       	pop	r15
    4b86:	ef 90       	pop	r14
    4b88:	df 90       	pop	r13
    4b8a:	cf 90       	pop	r12
    4b8c:	bf 90       	pop	r11
    4b8e:	af 90       	pop	r10
    4b90:	9f 90       	pop	r9
    4b92:	8f 90       	pop	r8
    4b94:	7f 90       	pop	r7
    4b96:	6f 90       	pop	r6
    4b98:	5f 90       	pop	r5
    4b9a:	4f 90       	pop	r4
    4b9c:	3f 90       	pop	r3
    4b9e:	2f 90       	pop	r2
    4ba0:	08 95       	ret

00004ba2 <i2c_init>:
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	while(!(TWCR & (1<<TWINT)));    

    return TWDR;

}/* i2c_readAck */
    4ba2:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    4ba6:	88 e8       	ldi	r24, 0x88	; 136
    4ba8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    4bac:	08 95       	ret

00004bae <i2c_start>:
    4bae:	94 ea       	ldi	r25, 0xA4	; 164
    4bb0:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    4bb4:	ec eb       	ldi	r30, 0xBC	; 188
    4bb6:	f0 e0       	ldi	r31, 0x00	; 0
    4bb8:	90 81       	ld	r25, Z
    4bba:	99 23       	and	r25, r25
    4bbc:	ec f7       	brge	.-6      	; 0x4bb8 <i2c_start+0xa>
    4bbe:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    4bc2:	98 7f       	andi	r25, 0xF8	; 248
    4bc4:	98 30       	cpi	r25, 0x08	; 8
    4bc6:	11 f0       	breq	.+4      	; 0x4bcc <i2c_start+0x1e>
    4bc8:	90 31       	cpi	r25, 0x10	; 16
    4bca:	a1 f4       	brne	.+40     	; 0x4bf4 <i2c_start+0x46>
    4bcc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    4bd0:	84 e8       	ldi	r24, 0x84	; 132
    4bd2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    4bd6:	ec eb       	ldi	r30, 0xBC	; 188
    4bd8:	f0 e0       	ldi	r31, 0x00	; 0
    4bda:	80 81       	ld	r24, Z
    4bdc:	88 23       	and	r24, r24
    4bde:	ec f7       	brge	.-6      	; 0x4bda <i2c_start+0x2c>
    4be0:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    4be4:	98 7f       	andi	r25, 0xF8	; 248
    4be6:	98 31       	cpi	r25, 0x18	; 24
    4be8:	39 f0       	breq	.+14     	; 0x4bf8 <i2c_start+0x4a>
    4bea:	81 e0       	ldi	r24, 0x01	; 1
    4bec:	90 34       	cpi	r25, 0x40	; 64
    4bee:	29 f4       	brne	.+10     	; 0x4bfa <i2c_start+0x4c>
    4bf0:	80 e0       	ldi	r24, 0x00	; 0
    4bf2:	08 95       	ret
    4bf4:	81 e0       	ldi	r24, 0x01	; 1
    4bf6:	08 95       	ret
    4bf8:	80 e0       	ldi	r24, 0x00	; 0
    4bfa:	08 95       	ret

00004bfc <i2c_stop>:
    4bfc:	84 e9       	ldi	r24, 0x94	; 148
    4bfe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    4c02:	ec eb       	ldi	r30, 0xBC	; 188
    4c04:	f0 e0       	ldi	r31, 0x00	; 0
    4c06:	80 81       	ld	r24, Z
    4c08:	84 fd       	sbrc	r24, 4
    4c0a:	fd cf       	rjmp	.-6      	; 0x4c06 <i2c_stop+0xa>
    4c0c:	08 95       	ret

00004c0e <i2c_write>:
    4c0e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    4c12:	84 e8       	ldi	r24, 0x84	; 132
    4c14:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    4c18:	ec eb       	ldi	r30, 0xBC	; 188
    4c1a:	f0 e0       	ldi	r31, 0x00	; 0
    4c1c:	80 81       	ld	r24, Z
    4c1e:	88 23       	and	r24, r24
    4c20:	ec f7       	brge	.-6      	; 0x4c1c <i2c_write+0xe>
    4c22:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    4c26:	98 7f       	andi	r25, 0xF8	; 248
    4c28:	81 e0       	ldi	r24, 0x01	; 1
    4c2a:	98 32       	cpi	r25, 0x28	; 40
    4c2c:	09 f4       	brne	.+2      	; 0x4c30 <i2c_write+0x22>
    4c2e:	80 e0       	ldi	r24, 0x00	; 0
    4c30:	08 95       	ret

00004c32 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    4c32:	84 e8       	ldi	r24, 0x84	; 132
    4c34:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while(!(TWCR & (1<<TWINT)));
    4c38:	ec eb       	ldi	r30, 0xBC	; 188
    4c3a:	f0 e0       	ldi	r31, 0x00	; 0
    4c3c:	80 81       	ld	r24, Z
    4c3e:	88 23       	and	r24, r24
    4c40:	ec f7       	brge	.-6      	; 0x4c3c <i2c_readNak+0xa>
	
    return TWDR;
    4c42:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>

}/* i2c_readNak */
    4c46:	08 95       	ret

00004c48 <uart_init>:
    uint8_t b = UDR;
    if(b == '\r')
        b = '\n';

    return b;
}
    4c48:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
    4c4c:	83 e3       	ldi	r24, 0x33	; 51
    4c4e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
    4c52:	86 e0       	ldi	r24, 0x06	; 6
    4c54:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
    4c58:	88 e9       	ldi	r24, 0x98	; 152
    4c5a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    4c5e:	08 95       	ret

00004c60 <uart_putc>:
    4c60:	cf 93       	push	r28
    4c62:	c8 2f       	mov	r28, r24
    4c64:	8a 30       	cpi	r24, 0x0A	; 10
    4c66:	19 f4       	brne	.+6      	; 0x4c6e <uart_putc+0xe>
    4c68:	8d e0       	ldi	r24, 0x0D	; 13
    4c6a:	0e 94 30 26 	call	0x4c60	; 0x4c60 <uart_putc>
    4c6e:	e0 ec       	ldi	r30, 0xC0	; 192
    4c70:	f0 e0       	ldi	r31, 0x00	; 0
    4c72:	80 81       	ld	r24, Z
    4c74:	85 ff       	sbrs	r24, 5
    4c76:	fd cf       	rjmp	.-6      	; 0x4c72 <uart_putc+0x12>
    4c78:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
    4c7c:	cf 91       	pop	r28
    4c7e:	08 95       	ret

00004c80 <uart_puts>:
    4c80:	cf 93       	push	r28
    4c82:	df 93       	push	r29
    4c84:	ec 01       	movw	r28, r24
    4c86:	88 81       	ld	r24, Y
    4c88:	88 23       	and	r24, r24
    4c8a:	31 f0       	breq	.+12     	; 0x4c98 <uart_puts+0x18>
    4c8c:	21 96       	adiw	r28, 0x01	; 1
    4c8e:	0e 94 30 26 	call	0x4c60	; 0x4c60 <uart_putc>
    4c92:	89 91       	ld	r24, Y+
    4c94:	81 11       	cpse	r24, r1
    4c96:	fb cf       	rjmp	.-10     	; 0x4c8e <uart_puts+0xe>
    4c98:	df 91       	pop	r29
    4c9a:	cf 91       	pop	r28
    4c9c:	08 95       	ret

00004c9e <uart_puts_p>:
    4c9e:	cf 93       	push	r28
    4ca0:	df 93       	push	r29
    4ca2:	ec 01       	movw	r28, r24
    4ca4:	21 96       	adiw	r28, 0x01	; 1
    4ca6:	fc 01       	movw	r30, r24
    4ca8:	84 91       	lpm	r24, Z
    4caa:	88 23       	and	r24, r24
    4cac:	39 f0       	breq	.+14     	; 0x4cbc <uart_puts_p+0x1e>
    4cae:	0e 94 30 26 	call	0x4c60	; 0x4c60 <uart_putc>
    4cb2:	fe 01       	movw	r30, r28
    4cb4:	84 91       	lpm	r24, Z
    4cb6:	21 96       	adiw	r28, 0x01	; 1
    4cb8:	81 11       	cpse	r24, r1
    4cba:	f9 cf       	rjmp	.-14     	; 0x4cae <uart_puts_p+0x10>
    4cbc:	df 91       	pop	r29
    4cbe:	cf 91       	pop	r28
    4cc0:	08 95       	ret

00004cc2 <__vector_18>:

EMPTY_INTERRUPT(USART_RXC_vect)
    4cc2:	18 95       	reti

00004cc4 <__mulsi3>:
    4cc4:	db 01       	movw	r26, r22
    4cc6:	8f 93       	push	r24
    4cc8:	9f 93       	push	r25
    4cca:	0e 94 cb 26 	call	0x4d96	; 0x4d96 <__muluhisi3>
    4cce:	bf 91       	pop	r27
    4cd0:	af 91       	pop	r26
    4cd2:	a2 9f       	mul	r26, r18
    4cd4:	80 0d       	add	r24, r0
    4cd6:	91 1d       	adc	r25, r1
    4cd8:	a3 9f       	mul	r26, r19
    4cda:	90 0d       	add	r25, r0
    4cdc:	b2 9f       	mul	r27, r18
    4cde:	90 0d       	add	r25, r0
    4ce0:	11 24       	eor	r1, r1
    4ce2:	08 95       	ret

00004ce4 <__udivmodhi4>:
    4ce4:	aa 1b       	sub	r26, r26
    4ce6:	bb 1b       	sub	r27, r27
    4ce8:	51 e1       	ldi	r21, 0x11	; 17
    4cea:	07 c0       	rjmp	.+14     	; 0x4cfa <__udivmodhi4_ep>

00004cec <__udivmodhi4_loop>:
    4cec:	aa 1f       	adc	r26, r26
    4cee:	bb 1f       	adc	r27, r27
    4cf0:	a6 17       	cp	r26, r22
    4cf2:	b7 07       	cpc	r27, r23
    4cf4:	10 f0       	brcs	.+4      	; 0x4cfa <__udivmodhi4_ep>
    4cf6:	a6 1b       	sub	r26, r22
    4cf8:	b7 0b       	sbc	r27, r23

00004cfa <__udivmodhi4_ep>:
    4cfa:	88 1f       	adc	r24, r24
    4cfc:	99 1f       	adc	r25, r25
    4cfe:	5a 95       	dec	r21
    4d00:	a9 f7       	brne	.-22     	; 0x4cec <__udivmodhi4_loop>
    4d02:	80 95       	com	r24
    4d04:	90 95       	com	r25
    4d06:	bc 01       	movw	r22, r24
    4d08:	cd 01       	movw	r24, r26
    4d0a:	08 95       	ret

00004d0c <__divmodhi4>:
    4d0c:	97 fb       	bst	r25, 7
    4d0e:	07 2e       	mov	r0, r23
    4d10:	16 f4       	brtc	.+4      	; 0x4d16 <__divmodhi4+0xa>
    4d12:	00 94       	com	r0
    4d14:	07 d0       	rcall	.+14     	; 0x4d24 <__divmodhi4_neg1>
    4d16:	77 fd       	sbrc	r23, 7
    4d18:	09 d0       	rcall	.+18     	; 0x4d2c <__divmodhi4_neg2>
    4d1a:	0e 94 72 26 	call	0x4ce4	; 0x4ce4 <__udivmodhi4>
    4d1e:	07 fc       	sbrc	r0, 7
    4d20:	05 d0       	rcall	.+10     	; 0x4d2c <__divmodhi4_neg2>
    4d22:	3e f4       	brtc	.+14     	; 0x4d32 <__divmodhi4_exit>

00004d24 <__divmodhi4_neg1>:
    4d24:	90 95       	com	r25
    4d26:	81 95       	neg	r24
    4d28:	9f 4f       	sbci	r25, 0xFF	; 255
    4d2a:	08 95       	ret

00004d2c <__divmodhi4_neg2>:
    4d2c:	70 95       	com	r23
    4d2e:	61 95       	neg	r22
    4d30:	7f 4f       	sbci	r23, 0xFF	; 255

00004d32 <__divmodhi4_exit>:
    4d32:	08 95       	ret

00004d34 <__udivmodsi4>:
    4d34:	a1 e2       	ldi	r26, 0x21	; 33
    4d36:	1a 2e       	mov	r1, r26
    4d38:	aa 1b       	sub	r26, r26
    4d3a:	bb 1b       	sub	r27, r27
    4d3c:	fd 01       	movw	r30, r26
    4d3e:	0d c0       	rjmp	.+26     	; 0x4d5a <__udivmodsi4_ep>

00004d40 <__udivmodsi4_loop>:
    4d40:	aa 1f       	adc	r26, r26
    4d42:	bb 1f       	adc	r27, r27
    4d44:	ee 1f       	adc	r30, r30
    4d46:	ff 1f       	adc	r31, r31
    4d48:	a2 17       	cp	r26, r18
    4d4a:	b3 07       	cpc	r27, r19
    4d4c:	e4 07       	cpc	r30, r20
    4d4e:	f5 07       	cpc	r31, r21
    4d50:	20 f0       	brcs	.+8      	; 0x4d5a <__udivmodsi4_ep>
    4d52:	a2 1b       	sub	r26, r18
    4d54:	b3 0b       	sbc	r27, r19
    4d56:	e4 0b       	sbc	r30, r20
    4d58:	f5 0b       	sbc	r31, r21

00004d5a <__udivmodsi4_ep>:
    4d5a:	66 1f       	adc	r22, r22
    4d5c:	77 1f       	adc	r23, r23
    4d5e:	88 1f       	adc	r24, r24
    4d60:	99 1f       	adc	r25, r25
    4d62:	1a 94       	dec	r1
    4d64:	69 f7       	brne	.-38     	; 0x4d40 <__udivmodsi4_loop>
    4d66:	60 95       	com	r22
    4d68:	70 95       	com	r23
    4d6a:	80 95       	com	r24
    4d6c:	90 95       	com	r25
    4d6e:	9b 01       	movw	r18, r22
    4d70:	ac 01       	movw	r20, r24
    4d72:	bd 01       	movw	r22, r26
    4d74:	cf 01       	movw	r24, r30
    4d76:	08 95       	ret

00004d78 <__umulhisi3>:
    4d78:	a2 9f       	mul	r26, r18
    4d7a:	b0 01       	movw	r22, r0
    4d7c:	b3 9f       	mul	r27, r19
    4d7e:	c0 01       	movw	r24, r0
    4d80:	a3 9f       	mul	r26, r19
    4d82:	70 0d       	add	r23, r0
    4d84:	81 1d       	adc	r24, r1
    4d86:	11 24       	eor	r1, r1
    4d88:	91 1d       	adc	r25, r1
    4d8a:	b2 9f       	mul	r27, r18
    4d8c:	70 0d       	add	r23, r0
    4d8e:	81 1d       	adc	r24, r1
    4d90:	11 24       	eor	r1, r1
    4d92:	91 1d       	adc	r25, r1
    4d94:	08 95       	ret

00004d96 <__muluhisi3>:
    4d96:	0e 94 bc 26 	call	0x4d78	; 0x4d78 <__umulhisi3>
    4d9a:	a5 9f       	mul	r26, r21
    4d9c:	90 0d       	add	r25, r0
    4d9e:	b4 9f       	mul	r27, r20
    4da0:	90 0d       	add	r25, r0
    4da2:	a4 9f       	mul	r26, r20
    4da4:	80 0d       	add	r24, r0
    4da6:	91 1d       	adc	r25, r1
    4da8:	11 24       	eor	r1, r1
    4daa:	08 95       	ret

00004dac <__muldi3>:
    4dac:	df 93       	push	r29
    4dae:	cf 93       	push	r28
    4db0:	1f 93       	push	r17
    4db2:	0f 93       	push	r16
    4db4:	9a 9d       	mul	r25, r10
    4db6:	f0 2d       	mov	r31, r0
    4db8:	21 9f       	mul	r18, r17
    4dba:	f0 0d       	add	r31, r0
    4dbc:	8b 9d       	mul	r24, r11
    4dbe:	f0 0d       	add	r31, r0
    4dc0:	8a 9d       	mul	r24, r10
    4dc2:	e0 2d       	mov	r30, r0
    4dc4:	f1 0d       	add	r31, r1
    4dc6:	03 9f       	mul	r16, r19
    4dc8:	f0 0d       	add	r31, r0
    4dca:	02 9f       	mul	r16, r18
    4dcc:	e0 0d       	add	r30, r0
    4dce:	f1 1d       	adc	r31, r1
    4dd0:	4e 9d       	mul	r20, r14
    4dd2:	e0 0d       	add	r30, r0
    4dd4:	f1 1d       	adc	r31, r1
    4dd6:	5e 9d       	mul	r21, r14
    4dd8:	f0 0d       	add	r31, r0
    4dda:	4f 9d       	mul	r20, r15
    4ddc:	f0 0d       	add	r31, r0
    4dde:	7f 93       	push	r23
    4de0:	6f 93       	push	r22
    4de2:	bf 92       	push	r11
    4de4:	af 92       	push	r10
    4de6:	5f 93       	push	r21
    4de8:	4f 93       	push	r20
    4dea:	d5 01       	movw	r26, r10
    4dec:	0e 94 bc 26 	call	0x4d78	; 0x4d78 <__umulhisi3>
    4df0:	8b 01       	movw	r16, r22
    4df2:	ac 01       	movw	r20, r24
    4df4:	d7 01       	movw	r26, r14
    4df6:	0e 94 bc 26 	call	0x4d78	; 0x4d78 <__umulhisi3>
    4dfa:	eb 01       	movw	r28, r22
    4dfc:	e8 0f       	add	r30, r24
    4dfe:	f9 1f       	adc	r31, r25
    4e00:	d6 01       	movw	r26, r12
    4e02:	0e 94 26 27 	call	0x4e4c	; 0x4e4c <__muldi3_6>
    4e06:	2f 91       	pop	r18
    4e08:	3f 91       	pop	r19
    4e0a:	d6 01       	movw	r26, r12
    4e0c:	0e 94 bc 26 	call	0x4d78	; 0x4d78 <__umulhisi3>
    4e10:	c6 0f       	add	r28, r22
    4e12:	d7 1f       	adc	r29, r23
    4e14:	e8 1f       	adc	r30, r24
    4e16:	f9 1f       	adc	r31, r25
    4e18:	af 91       	pop	r26
    4e1a:	bf 91       	pop	r27
    4e1c:	0e 94 26 27 	call	0x4e4c	; 0x4e4c <__muldi3_6>
    4e20:	2f 91       	pop	r18
    4e22:	3f 91       	pop	r19
    4e24:	0e 94 bc 26 	call	0x4d78	; 0x4d78 <__umulhisi3>
    4e28:	c6 0f       	add	r28, r22
    4e2a:	d7 1f       	adc	r29, r23
    4e2c:	e8 1f       	adc	r30, r24
    4e2e:	f9 1f       	adc	r31, r25
    4e30:	d6 01       	movw	r26, r12
    4e32:	0e 94 bc 26 	call	0x4d78	; 0x4d78 <__umulhisi3>
    4e36:	e6 0f       	add	r30, r22
    4e38:	f7 1f       	adc	r31, r23
    4e3a:	98 01       	movw	r18, r16
    4e3c:	be 01       	movw	r22, r28
    4e3e:	cf 01       	movw	r24, r30
    4e40:	11 24       	eor	r1, r1
    4e42:	0f 91       	pop	r16
    4e44:	1f 91       	pop	r17
    4e46:	cf 91       	pop	r28
    4e48:	df 91       	pop	r29
    4e4a:	08 95       	ret

00004e4c <__muldi3_6>:
    4e4c:	0e 94 bc 26 	call	0x4d78	; 0x4d78 <__umulhisi3>
    4e50:	46 0f       	add	r20, r22
    4e52:	57 1f       	adc	r21, r23
    4e54:	c8 1f       	adc	r28, r24
    4e56:	d9 1f       	adc	r29, r25
    4e58:	08 f4       	brcc	.+2      	; 0x4e5c <__muldi3_6+0x10>
    4e5a:	31 96       	adiw	r30, 0x01	; 1
    4e5c:	08 95       	ret

00004e5e <__ashldi3>:
    4e5e:	0f 93       	push	r16
    4e60:	08 30       	cpi	r16, 0x08	; 8
    4e62:	90 f0       	brcs	.+36     	; 0x4e88 <__ashldi3+0x2a>
    4e64:	98 2f       	mov	r25, r24
    4e66:	87 2f       	mov	r24, r23
    4e68:	76 2f       	mov	r23, r22
    4e6a:	65 2f       	mov	r22, r21
    4e6c:	54 2f       	mov	r21, r20
    4e6e:	43 2f       	mov	r20, r19
    4e70:	32 2f       	mov	r19, r18
    4e72:	22 27       	eor	r18, r18
    4e74:	08 50       	subi	r16, 0x08	; 8
    4e76:	f4 cf       	rjmp	.-24     	; 0x4e60 <__ashldi3+0x2>
    4e78:	22 0f       	add	r18, r18
    4e7a:	33 1f       	adc	r19, r19
    4e7c:	44 1f       	adc	r20, r20
    4e7e:	55 1f       	adc	r21, r21
    4e80:	66 1f       	adc	r22, r22
    4e82:	77 1f       	adc	r23, r23
    4e84:	88 1f       	adc	r24, r24
    4e86:	99 1f       	adc	r25, r25
    4e88:	0a 95       	dec	r16
    4e8a:	b2 f7       	brpl	.-20     	; 0x4e78 <__ashldi3+0x1a>
    4e8c:	0f 91       	pop	r16
    4e8e:	08 95       	ret

00004e90 <__ashrdi3>:
    4e90:	97 fb       	bst	r25, 7
    4e92:	10 f8       	bld	r1, 0

00004e94 <__lshrdi3>:
    4e94:	16 94       	lsr	r1
    4e96:	00 08       	sbc	r0, r0
    4e98:	0f 93       	push	r16
    4e9a:	08 30       	cpi	r16, 0x08	; 8
    4e9c:	98 f0       	brcs	.+38     	; 0x4ec4 <__lshrdi3+0x30>
    4e9e:	08 50       	subi	r16, 0x08	; 8
    4ea0:	23 2f       	mov	r18, r19
    4ea2:	34 2f       	mov	r19, r20
    4ea4:	45 2f       	mov	r20, r21
    4ea6:	56 2f       	mov	r21, r22
    4ea8:	67 2f       	mov	r22, r23
    4eaa:	78 2f       	mov	r23, r24
    4eac:	89 2f       	mov	r24, r25
    4eae:	90 2d       	mov	r25, r0
    4eb0:	f4 cf       	rjmp	.-24     	; 0x4e9a <__lshrdi3+0x6>
    4eb2:	05 94       	asr	r0
    4eb4:	97 95       	ror	r25
    4eb6:	87 95       	ror	r24
    4eb8:	77 95       	ror	r23
    4eba:	67 95       	ror	r22
    4ebc:	57 95       	ror	r21
    4ebe:	47 95       	ror	r20
    4ec0:	37 95       	ror	r19
    4ec2:	27 95       	ror	r18
    4ec4:	0a 95       	dec	r16
    4ec6:	aa f7       	brpl	.-22     	; 0x4eb2 <__lshrdi3+0x1e>
    4ec8:	0f 91       	pop	r16
    4eca:	08 95       	ret

00004ecc <__adddi3>:
    4ecc:	2a 0d       	add	r18, r10
    4ece:	3b 1d       	adc	r19, r11
    4ed0:	4c 1d       	adc	r20, r12
    4ed2:	5d 1d       	adc	r21, r13
    4ed4:	6e 1d       	adc	r22, r14
    4ed6:	7f 1d       	adc	r23, r15
    4ed8:	80 1f       	adc	r24, r16
    4eda:	91 1f       	adc	r25, r17
    4edc:	08 95       	ret

00004ede <__adddi3_s8>:
    4ede:	00 24       	eor	r0, r0
    4ee0:	a7 fd       	sbrc	r26, 7
    4ee2:	00 94       	com	r0
    4ee4:	2a 0f       	add	r18, r26
    4ee6:	30 1d       	adc	r19, r0
    4ee8:	40 1d       	adc	r20, r0
    4eea:	50 1d       	adc	r21, r0
    4eec:	60 1d       	adc	r22, r0
    4eee:	70 1d       	adc	r23, r0
    4ef0:	80 1d       	adc	r24, r0
    4ef2:	90 1d       	adc	r25, r0
    4ef4:	08 95       	ret

00004ef6 <__subdi3>:
    4ef6:	2a 19       	sub	r18, r10
    4ef8:	3b 09       	sbc	r19, r11
    4efa:	4c 09       	sbc	r20, r12
    4efc:	5d 09       	sbc	r21, r13
    4efe:	6e 09       	sbc	r22, r14
    4f00:	7f 09       	sbc	r23, r15
    4f02:	80 0b       	sbc	r24, r16
    4f04:	91 0b       	sbc	r25, r17
    4f06:	08 95       	ret

00004f08 <__cmpdi2>:
    4f08:	2a 15       	cp	r18, r10
    4f0a:	3b 05       	cpc	r19, r11
    4f0c:	4c 05       	cpc	r20, r12
    4f0e:	5d 05       	cpc	r21, r13
    4f10:	6e 05       	cpc	r22, r14
    4f12:	7f 05       	cpc	r23, r15
    4f14:	80 07       	cpc	r24, r16
    4f16:	91 07       	cpc	r25, r17
    4f18:	08 95       	ret

00004f1a <__cmpdi2_s8>:
    4f1a:	00 24       	eor	r0, r0
    4f1c:	a7 fd       	sbrc	r26, 7
    4f1e:	00 94       	com	r0
    4f20:	2a 17       	cp	r18, r26
    4f22:	30 05       	cpc	r19, r0
    4f24:	40 05       	cpc	r20, r0
    4f26:	50 05       	cpc	r21, r0
    4f28:	60 05       	cpc	r22, r0
    4f2a:	70 05       	cpc	r23, r0
    4f2c:	80 05       	cpc	r24, r0
    4f2e:	90 05       	cpc	r25, r0
    4f30:	08 95       	ret

00004f32 <memcpy>:
    4f32:	fb 01       	movw	r30, r22
    4f34:	dc 01       	movw	r26, r24
    4f36:	02 c0       	rjmp	.+4      	; 0x4f3c <memcpy+0xa>
    4f38:	01 90       	ld	r0, Z+
    4f3a:	0d 92       	st	X+, r0
    4f3c:	41 50       	subi	r20, 0x01	; 1
    4f3e:	50 40       	sbci	r21, 0x00	; 0
    4f40:	d8 f7       	brcc	.-10     	; 0x4f38 <memcpy+0x6>
    4f42:	08 95       	ret

00004f44 <memset>:
    4f44:	dc 01       	movw	r26, r24
    4f46:	01 c0       	rjmp	.+2      	; 0x4f4a <memset+0x6>
    4f48:	6d 93       	st	X+, r22
    4f4a:	41 50       	subi	r20, 0x01	; 1
    4f4c:	50 40       	sbci	r21, 0x00	; 0
    4f4e:	e0 f7       	brcc	.-8      	; 0x4f48 <memset+0x4>
    4f50:	08 95       	ret

00004f52 <strchr>:
    4f52:	fc 01       	movw	r30, r24
    4f54:	81 91       	ld	r24, Z+
    4f56:	86 17       	cp	r24, r22
    4f58:	21 f0       	breq	.+8      	; 0x4f62 <strchr+0x10>
    4f5a:	88 23       	and	r24, r24
    4f5c:	d9 f7       	brne	.-10     	; 0x4f54 <strchr+0x2>
    4f5e:	99 27       	eor	r25, r25
    4f60:	08 95       	ret
    4f62:	31 97       	sbiw	r30, 0x01	; 1
    4f64:	cf 01       	movw	r24, r30
    4f66:	08 95       	ret

00004f68 <strcmp>:
    4f68:	fb 01       	movw	r30, r22
    4f6a:	dc 01       	movw	r26, r24
    4f6c:	8d 91       	ld	r24, X+
    4f6e:	01 90       	ld	r0, Z+
    4f70:	80 19       	sub	r24, r0
    4f72:	01 10       	cpse	r0, r1
    4f74:	d9 f3       	breq	.-10     	; 0x4f6c <strcmp+0x4>
    4f76:	99 0b       	sbc	r25, r25
    4f78:	08 95       	ret

00004f7a <strncat>:
    4f7a:	fb 01       	movw	r30, r22
    4f7c:	dc 01       	movw	r26, r24
    4f7e:	0d 90       	ld	r0, X+
    4f80:	00 20       	and	r0, r0
    4f82:	e9 f7       	brne	.-6      	; 0x4f7e <strncat+0x4>
    4f84:	11 97       	sbiw	r26, 0x01	; 1
    4f86:	41 50       	subi	r20, 0x01	; 1
    4f88:	50 40       	sbci	r21, 0x00	; 0
    4f8a:	28 f0       	brcs	.+10     	; 0x4f96 <strncat+0x1c>
    4f8c:	01 90       	ld	r0, Z+
    4f8e:	00 20       	and	r0, r0
    4f90:	0d 92       	st	X+, r0
    4f92:	c9 f7       	brne	.-14     	; 0x4f86 <strncat+0xc>
    4f94:	08 95       	ret
    4f96:	1c 92       	st	X, r1
    4f98:	08 95       	ret

00004f9a <strncmp>:
    4f9a:	fb 01       	movw	r30, r22
    4f9c:	dc 01       	movw	r26, r24
    4f9e:	41 50       	subi	r20, 0x01	; 1
    4fa0:	50 40       	sbci	r21, 0x00	; 0
    4fa2:	30 f0       	brcs	.+12     	; 0x4fb0 <strncmp+0x16>
    4fa4:	8d 91       	ld	r24, X+
    4fa6:	01 90       	ld	r0, Z+
    4fa8:	80 19       	sub	r24, r0
    4faa:	19 f4       	brne	.+6      	; 0x4fb2 <strncmp+0x18>
    4fac:	00 20       	and	r0, r0
    4fae:	b9 f7       	brne	.-18     	; 0x4f9e <strncmp+0x4>
    4fb0:	88 1b       	sub	r24, r24
    4fb2:	99 0b       	sbc	r25, r25
    4fb4:	08 95       	ret

00004fb6 <strncpy>:
    4fb6:	fb 01       	movw	r30, r22
    4fb8:	dc 01       	movw	r26, r24
    4fba:	41 50       	subi	r20, 0x01	; 1
    4fbc:	50 40       	sbci	r21, 0x00	; 0
    4fbe:	48 f0       	brcs	.+18     	; 0x4fd2 <strncpy+0x1c>
    4fc0:	01 90       	ld	r0, Z+
    4fc2:	0d 92       	st	X+, r0
    4fc4:	00 20       	and	r0, r0
    4fc6:	c9 f7       	brne	.-14     	; 0x4fba <strncpy+0x4>
    4fc8:	01 c0       	rjmp	.+2      	; 0x4fcc <strncpy+0x16>
    4fca:	1d 92       	st	X+, r1
    4fcc:	41 50       	subi	r20, 0x01	; 1
    4fce:	50 40       	sbci	r21, 0x00	; 0
    4fd0:	e0 f7       	brcc	.-8      	; 0x4fca <strncpy+0x14>
    4fd2:	08 95       	ret

00004fd4 <strrchr>:
    4fd4:	fc 01       	movw	r30, r24
    4fd6:	81 e0       	ldi	r24, 0x01	; 1
    4fd8:	90 e0       	ldi	r25, 0x00	; 0
    4fda:	01 90       	ld	r0, Z+
    4fdc:	06 16       	cp	r0, r22
    4fde:	09 f4       	brne	.+2      	; 0x4fe2 <strrchr+0xe>
    4fe0:	cf 01       	movw	r24, r30
    4fe2:	00 20       	and	r0, r0
    4fe4:	d1 f7       	brne	.-12     	; 0x4fda <strrchr+0x6>
    4fe6:	01 97       	sbiw	r24, 0x01	; 1
    4fe8:	08 95       	ret

00004fea <__itoa_ncheck>:
    4fea:	bb 27       	eor	r27, r27
    4fec:	4a 30       	cpi	r20, 0x0A	; 10
    4fee:	31 f4       	brne	.+12     	; 0x4ffc <__itoa_ncheck+0x12>
    4ff0:	99 23       	and	r25, r25
    4ff2:	22 f4       	brpl	.+8      	; 0x4ffc <__itoa_ncheck+0x12>
    4ff4:	bd e2       	ldi	r27, 0x2D	; 45
    4ff6:	90 95       	com	r25
    4ff8:	81 95       	neg	r24
    4ffa:	9f 4f       	sbci	r25, 0xFF	; 255
    4ffc:	0c 94 01 28 	jmp	0x5002	; 0x5002 <__utoa_common>

00005000 <__utoa_ncheck>:
    5000:	bb 27       	eor	r27, r27

00005002 <__utoa_common>:
    5002:	fb 01       	movw	r30, r22
    5004:	55 27       	eor	r21, r21
    5006:	aa 27       	eor	r26, r26
    5008:	88 0f       	add	r24, r24
    500a:	99 1f       	adc	r25, r25
    500c:	aa 1f       	adc	r26, r26
    500e:	a4 17       	cp	r26, r20
    5010:	10 f0       	brcs	.+4      	; 0x5016 <__utoa_common+0x14>
    5012:	a4 1b       	sub	r26, r20
    5014:	83 95       	inc	r24
    5016:	50 51       	subi	r21, 0x10	; 16
    5018:	b9 f7       	brne	.-18     	; 0x5008 <__utoa_common+0x6>
    501a:	a0 5d       	subi	r26, 0xD0	; 208
    501c:	aa 33       	cpi	r26, 0x3A	; 58
    501e:	08 f0       	brcs	.+2      	; 0x5022 <__utoa_common+0x20>
    5020:	a9 5d       	subi	r26, 0xD9	; 217
    5022:	a1 93       	st	Z+, r26
    5024:	00 97       	sbiw	r24, 0x00	; 0
    5026:	79 f7       	brne	.-34     	; 0x5006 <__utoa_common+0x4>
    5028:	b1 11       	cpse	r27, r1
    502a:	b1 93       	st	Z+, r27
    502c:	11 92       	st	Z+, r1
    502e:	cb 01       	movw	r24, r22
    5030:	0c 94 41 2a 	jmp	0x5482	; 0x5482 <strrev>

00005034 <snprintf>:
    5034:	ae e0       	ldi	r26, 0x0E	; 14
    5036:	b0 e0       	ldi	r27, 0x00	; 0
    5038:	e0 e2       	ldi	r30, 0x20	; 32
    503a:	f8 e2       	ldi	r31, 0x28	; 40
    503c:	0c 94 f9 2a 	jmp	0x55f2	; 0x55f2 <__prologue_saves__+0x1c>
    5040:	0d 89       	ldd	r16, Y+21	; 0x15
    5042:	1e 89       	ldd	r17, Y+22	; 0x16
    5044:	8f 89       	ldd	r24, Y+23	; 0x17
    5046:	98 8d       	ldd	r25, Y+24	; 0x18
    5048:	26 e0       	ldi	r18, 0x06	; 6
    504a:	2c 83       	std	Y+4, r18	; 0x04
    504c:	1a 83       	std	Y+2, r17	; 0x02
    504e:	09 83       	std	Y+1, r16	; 0x01
    5050:	97 ff       	sbrs	r25, 7
    5052:	02 c0       	rjmp	.+4      	; 0x5058 <snprintf+0x24>
    5054:	80 e0       	ldi	r24, 0x00	; 0
    5056:	90 e8       	ldi	r25, 0x80	; 128
    5058:	01 97       	sbiw	r24, 0x01	; 1
    505a:	9e 83       	std	Y+6, r25	; 0x06
    505c:	8d 83       	std	Y+5, r24	; 0x05
    505e:	ae 01       	movw	r20, r28
    5060:	45 5e       	subi	r20, 0xE5	; 229
    5062:	5f 4f       	sbci	r21, 0xFF	; 255
    5064:	69 8d       	ldd	r22, Y+25	; 0x19
    5066:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5068:	ce 01       	movw	r24, r28
    506a:	01 96       	adiw	r24, 0x01	; 1
    506c:	0e 94 4a 28 	call	0x5094	; 0x5094 <vfprintf>
    5070:	4d 81       	ldd	r20, Y+5	; 0x05
    5072:	5e 81       	ldd	r21, Y+6	; 0x06
    5074:	57 fd       	sbrc	r21, 7
    5076:	0a c0       	rjmp	.+20     	; 0x508c <snprintf+0x58>
    5078:	2f 81       	ldd	r18, Y+7	; 0x07
    507a:	38 85       	ldd	r19, Y+8	; 0x08
    507c:	42 17       	cp	r20, r18
    507e:	53 07       	cpc	r21, r19
    5080:	0c f4       	brge	.+2      	; 0x5084 <snprintf+0x50>
    5082:	9a 01       	movw	r18, r20
    5084:	f8 01       	movw	r30, r16
    5086:	e2 0f       	add	r30, r18
    5088:	f3 1f       	adc	r31, r19
    508a:	10 82       	st	Z, r1
    508c:	2e 96       	adiw	r28, 0x0e	; 14
    508e:	e4 e0       	ldi	r30, 0x04	; 4
    5090:	0c 94 15 2b 	jmp	0x562a	; 0x562a <__epilogue_restores__+0x1c>

00005094 <vfprintf>:
    5094:	ab e0       	ldi	r26, 0x0B	; 11
    5096:	b0 e0       	ldi	r27, 0x00	; 0
    5098:	e0 e5       	ldi	r30, 0x50	; 80
    509a:	f8 e2       	ldi	r31, 0x28	; 40
    509c:	0c 94 eb 2a 	jmp	0x55d6	; 0x55d6 <__prologue_saves__>
    50a0:	6c 01       	movw	r12, r24
    50a2:	7b 01       	movw	r14, r22
    50a4:	8a 01       	movw	r16, r20
    50a6:	fc 01       	movw	r30, r24
    50a8:	17 82       	std	Z+7, r1	; 0x07
    50aa:	16 82       	std	Z+6, r1	; 0x06
    50ac:	83 81       	ldd	r24, Z+3	; 0x03
    50ae:	81 ff       	sbrs	r24, 1
    50b0:	cc c1       	rjmp	.+920    	; 0x544a <vfprintf+0x3b6>
    50b2:	ce 01       	movw	r24, r28
    50b4:	01 96       	adiw	r24, 0x01	; 1
    50b6:	3c 01       	movw	r6, r24
    50b8:	f6 01       	movw	r30, r12
    50ba:	93 81       	ldd	r25, Z+3	; 0x03
    50bc:	f7 01       	movw	r30, r14
    50be:	93 fd       	sbrc	r25, 3
    50c0:	85 91       	lpm	r24, Z+
    50c2:	93 ff       	sbrs	r25, 3
    50c4:	81 91       	ld	r24, Z+
    50c6:	7f 01       	movw	r14, r30
    50c8:	88 23       	and	r24, r24
    50ca:	09 f4       	brne	.+2      	; 0x50ce <vfprintf+0x3a>
    50cc:	ba c1       	rjmp	.+884    	; 0x5442 <vfprintf+0x3ae>
    50ce:	85 32       	cpi	r24, 0x25	; 37
    50d0:	39 f4       	brne	.+14     	; 0x50e0 <vfprintf+0x4c>
    50d2:	93 fd       	sbrc	r25, 3
    50d4:	85 91       	lpm	r24, Z+
    50d6:	93 ff       	sbrs	r25, 3
    50d8:	81 91       	ld	r24, Z+
    50da:	7f 01       	movw	r14, r30
    50dc:	85 32       	cpi	r24, 0x25	; 37
    50de:	29 f4       	brne	.+10     	; 0x50ea <vfprintf+0x56>
    50e0:	b6 01       	movw	r22, r12
    50e2:	90 e0       	ldi	r25, 0x00	; 0
    50e4:	0e 94 51 2a 	call	0x54a2	; 0x54a2 <fputc>
    50e8:	e7 cf       	rjmp	.-50     	; 0x50b8 <vfprintf+0x24>
    50ea:	91 2c       	mov	r9, r1
    50ec:	21 2c       	mov	r2, r1
    50ee:	31 2c       	mov	r3, r1
    50f0:	ff e1       	ldi	r31, 0x1F	; 31
    50f2:	f3 15       	cp	r31, r3
    50f4:	d8 f0       	brcs	.+54     	; 0x512c <vfprintf+0x98>
    50f6:	8b 32       	cpi	r24, 0x2B	; 43
    50f8:	79 f0       	breq	.+30     	; 0x5118 <vfprintf+0x84>
    50fa:	38 f4       	brcc	.+14     	; 0x510a <vfprintf+0x76>
    50fc:	80 32       	cpi	r24, 0x20	; 32
    50fe:	79 f0       	breq	.+30     	; 0x511e <vfprintf+0x8a>
    5100:	83 32       	cpi	r24, 0x23	; 35
    5102:	a1 f4       	brne	.+40     	; 0x512c <vfprintf+0x98>
    5104:	23 2d       	mov	r18, r3
    5106:	20 61       	ori	r18, 0x10	; 16
    5108:	1d c0       	rjmp	.+58     	; 0x5144 <vfprintf+0xb0>
    510a:	8d 32       	cpi	r24, 0x2D	; 45
    510c:	61 f0       	breq	.+24     	; 0x5126 <vfprintf+0x92>
    510e:	80 33       	cpi	r24, 0x30	; 48
    5110:	69 f4       	brne	.+26     	; 0x512c <vfprintf+0x98>
    5112:	23 2d       	mov	r18, r3
    5114:	21 60       	ori	r18, 0x01	; 1
    5116:	16 c0       	rjmp	.+44     	; 0x5144 <vfprintf+0xb0>
    5118:	83 2d       	mov	r24, r3
    511a:	82 60       	ori	r24, 0x02	; 2
    511c:	38 2e       	mov	r3, r24
    511e:	e3 2d       	mov	r30, r3
    5120:	e4 60       	ori	r30, 0x04	; 4
    5122:	3e 2e       	mov	r3, r30
    5124:	2a c0       	rjmp	.+84     	; 0x517a <vfprintf+0xe6>
    5126:	f3 2d       	mov	r31, r3
    5128:	f8 60       	ori	r31, 0x08	; 8
    512a:	1d c0       	rjmp	.+58     	; 0x5166 <vfprintf+0xd2>
    512c:	37 fc       	sbrc	r3, 7
    512e:	2d c0       	rjmp	.+90     	; 0x518a <vfprintf+0xf6>
    5130:	20 ed       	ldi	r18, 0xD0	; 208
    5132:	28 0f       	add	r18, r24
    5134:	2a 30       	cpi	r18, 0x0A	; 10
    5136:	40 f0       	brcs	.+16     	; 0x5148 <vfprintf+0xb4>
    5138:	8e 32       	cpi	r24, 0x2E	; 46
    513a:	b9 f4       	brne	.+46     	; 0x516a <vfprintf+0xd6>
    513c:	36 fc       	sbrc	r3, 6
    513e:	81 c1       	rjmp	.+770    	; 0x5442 <vfprintf+0x3ae>
    5140:	23 2d       	mov	r18, r3
    5142:	20 64       	ori	r18, 0x40	; 64
    5144:	32 2e       	mov	r3, r18
    5146:	19 c0       	rjmp	.+50     	; 0x517a <vfprintf+0xe6>
    5148:	36 fe       	sbrs	r3, 6
    514a:	06 c0       	rjmp	.+12     	; 0x5158 <vfprintf+0xc4>
    514c:	8a e0       	ldi	r24, 0x0A	; 10
    514e:	98 9e       	mul	r9, r24
    5150:	20 0d       	add	r18, r0
    5152:	11 24       	eor	r1, r1
    5154:	92 2e       	mov	r9, r18
    5156:	11 c0       	rjmp	.+34     	; 0x517a <vfprintf+0xe6>
    5158:	ea e0       	ldi	r30, 0x0A	; 10
    515a:	2e 9e       	mul	r2, r30
    515c:	20 0d       	add	r18, r0
    515e:	11 24       	eor	r1, r1
    5160:	22 2e       	mov	r2, r18
    5162:	f3 2d       	mov	r31, r3
    5164:	f0 62       	ori	r31, 0x20	; 32
    5166:	3f 2e       	mov	r3, r31
    5168:	08 c0       	rjmp	.+16     	; 0x517a <vfprintf+0xe6>
    516a:	8c 36       	cpi	r24, 0x6C	; 108
    516c:	21 f4       	brne	.+8      	; 0x5176 <vfprintf+0xe2>
    516e:	83 2d       	mov	r24, r3
    5170:	80 68       	ori	r24, 0x80	; 128
    5172:	38 2e       	mov	r3, r24
    5174:	02 c0       	rjmp	.+4      	; 0x517a <vfprintf+0xe6>
    5176:	88 36       	cpi	r24, 0x68	; 104
    5178:	41 f4       	brne	.+16     	; 0x518a <vfprintf+0xf6>
    517a:	f7 01       	movw	r30, r14
    517c:	93 fd       	sbrc	r25, 3
    517e:	85 91       	lpm	r24, Z+
    5180:	93 ff       	sbrs	r25, 3
    5182:	81 91       	ld	r24, Z+
    5184:	7f 01       	movw	r14, r30
    5186:	81 11       	cpse	r24, r1
    5188:	b3 cf       	rjmp	.-154    	; 0x50f0 <vfprintf+0x5c>
    518a:	98 2f       	mov	r25, r24
    518c:	9f 7d       	andi	r25, 0xDF	; 223
    518e:	95 54       	subi	r25, 0x45	; 69
    5190:	93 30       	cpi	r25, 0x03	; 3
    5192:	28 f4       	brcc	.+10     	; 0x519e <vfprintf+0x10a>
    5194:	0c 5f       	subi	r16, 0xFC	; 252
    5196:	1f 4f       	sbci	r17, 0xFF	; 255
    5198:	9f e3       	ldi	r25, 0x3F	; 63
    519a:	99 83       	std	Y+1, r25	; 0x01
    519c:	0d c0       	rjmp	.+26     	; 0x51b8 <vfprintf+0x124>
    519e:	83 36       	cpi	r24, 0x63	; 99
    51a0:	31 f0       	breq	.+12     	; 0x51ae <vfprintf+0x11a>
    51a2:	83 37       	cpi	r24, 0x73	; 115
    51a4:	71 f0       	breq	.+28     	; 0x51c2 <vfprintf+0x12e>
    51a6:	83 35       	cpi	r24, 0x53	; 83
    51a8:	09 f0       	breq	.+2      	; 0x51ac <vfprintf+0x118>
    51aa:	59 c0       	rjmp	.+178    	; 0x525e <vfprintf+0x1ca>
    51ac:	21 c0       	rjmp	.+66     	; 0x51f0 <vfprintf+0x15c>
    51ae:	f8 01       	movw	r30, r16
    51b0:	80 81       	ld	r24, Z
    51b2:	89 83       	std	Y+1, r24	; 0x01
    51b4:	0e 5f       	subi	r16, 0xFE	; 254
    51b6:	1f 4f       	sbci	r17, 0xFF	; 255
    51b8:	88 24       	eor	r8, r8
    51ba:	83 94       	inc	r8
    51bc:	91 2c       	mov	r9, r1
    51be:	53 01       	movw	r10, r6
    51c0:	13 c0       	rjmp	.+38     	; 0x51e8 <vfprintf+0x154>
    51c2:	28 01       	movw	r4, r16
    51c4:	f2 e0       	ldi	r31, 0x02	; 2
    51c6:	4f 0e       	add	r4, r31
    51c8:	51 1c       	adc	r5, r1
    51ca:	f8 01       	movw	r30, r16
    51cc:	a0 80       	ld	r10, Z
    51ce:	b1 80       	ldd	r11, Z+1	; 0x01
    51d0:	36 fe       	sbrs	r3, 6
    51d2:	03 c0       	rjmp	.+6      	; 0x51da <vfprintf+0x146>
    51d4:	69 2d       	mov	r22, r9
    51d6:	70 e0       	ldi	r23, 0x00	; 0
    51d8:	02 c0       	rjmp	.+4      	; 0x51de <vfprintf+0x14a>
    51da:	6f ef       	ldi	r22, 0xFF	; 255
    51dc:	7f ef       	ldi	r23, 0xFF	; 255
    51de:	c5 01       	movw	r24, r10
    51e0:	0e 94 36 2a 	call	0x546c	; 0x546c <strnlen>
    51e4:	4c 01       	movw	r8, r24
    51e6:	82 01       	movw	r16, r4
    51e8:	f3 2d       	mov	r31, r3
    51ea:	ff 77       	andi	r31, 0x7F	; 127
    51ec:	3f 2e       	mov	r3, r31
    51ee:	16 c0       	rjmp	.+44     	; 0x521c <vfprintf+0x188>
    51f0:	28 01       	movw	r4, r16
    51f2:	22 e0       	ldi	r18, 0x02	; 2
    51f4:	42 0e       	add	r4, r18
    51f6:	51 1c       	adc	r5, r1
    51f8:	f8 01       	movw	r30, r16
    51fa:	a0 80       	ld	r10, Z
    51fc:	b1 80       	ldd	r11, Z+1	; 0x01
    51fe:	36 fe       	sbrs	r3, 6
    5200:	03 c0       	rjmp	.+6      	; 0x5208 <vfprintf+0x174>
    5202:	69 2d       	mov	r22, r9
    5204:	70 e0       	ldi	r23, 0x00	; 0
    5206:	02 c0       	rjmp	.+4      	; 0x520c <vfprintf+0x178>
    5208:	6f ef       	ldi	r22, 0xFF	; 255
    520a:	7f ef       	ldi	r23, 0xFF	; 255
    520c:	c5 01       	movw	r24, r10
    520e:	0e 94 2b 2a 	call	0x5456	; 0x5456 <strnlen_P>
    5212:	4c 01       	movw	r8, r24
    5214:	f3 2d       	mov	r31, r3
    5216:	f0 68       	ori	r31, 0x80	; 128
    5218:	3f 2e       	mov	r3, r31
    521a:	82 01       	movw	r16, r4
    521c:	33 fc       	sbrc	r3, 3
    521e:	1b c0       	rjmp	.+54     	; 0x5256 <vfprintf+0x1c2>
    5220:	82 2d       	mov	r24, r2
    5222:	90 e0       	ldi	r25, 0x00	; 0
    5224:	88 16       	cp	r8, r24
    5226:	99 06       	cpc	r9, r25
    5228:	b0 f4       	brcc	.+44     	; 0x5256 <vfprintf+0x1c2>
    522a:	b6 01       	movw	r22, r12
    522c:	80 e2       	ldi	r24, 0x20	; 32
    522e:	90 e0       	ldi	r25, 0x00	; 0
    5230:	0e 94 51 2a 	call	0x54a2	; 0x54a2 <fputc>
    5234:	2a 94       	dec	r2
    5236:	f4 cf       	rjmp	.-24     	; 0x5220 <vfprintf+0x18c>
    5238:	f5 01       	movw	r30, r10
    523a:	37 fc       	sbrc	r3, 7
    523c:	85 91       	lpm	r24, Z+
    523e:	37 fe       	sbrs	r3, 7
    5240:	81 91       	ld	r24, Z+
    5242:	5f 01       	movw	r10, r30
    5244:	b6 01       	movw	r22, r12
    5246:	90 e0       	ldi	r25, 0x00	; 0
    5248:	0e 94 51 2a 	call	0x54a2	; 0x54a2 <fputc>
    524c:	21 10       	cpse	r2, r1
    524e:	2a 94       	dec	r2
    5250:	21 e0       	ldi	r18, 0x01	; 1
    5252:	82 1a       	sub	r8, r18
    5254:	91 08       	sbc	r9, r1
    5256:	81 14       	cp	r8, r1
    5258:	91 04       	cpc	r9, r1
    525a:	71 f7       	brne	.-36     	; 0x5238 <vfprintf+0x1a4>
    525c:	e8 c0       	rjmp	.+464    	; 0x542e <vfprintf+0x39a>
    525e:	84 36       	cpi	r24, 0x64	; 100
    5260:	11 f0       	breq	.+4      	; 0x5266 <vfprintf+0x1d2>
    5262:	89 36       	cpi	r24, 0x69	; 105
    5264:	41 f5       	brne	.+80     	; 0x52b6 <vfprintf+0x222>
    5266:	f8 01       	movw	r30, r16
    5268:	37 fe       	sbrs	r3, 7
    526a:	07 c0       	rjmp	.+14     	; 0x527a <vfprintf+0x1e6>
    526c:	60 81       	ld	r22, Z
    526e:	71 81       	ldd	r23, Z+1	; 0x01
    5270:	82 81       	ldd	r24, Z+2	; 0x02
    5272:	93 81       	ldd	r25, Z+3	; 0x03
    5274:	0c 5f       	subi	r16, 0xFC	; 252
    5276:	1f 4f       	sbci	r17, 0xFF	; 255
    5278:	08 c0       	rjmp	.+16     	; 0x528a <vfprintf+0x1f6>
    527a:	60 81       	ld	r22, Z
    527c:	71 81       	ldd	r23, Z+1	; 0x01
    527e:	07 2e       	mov	r0, r23
    5280:	00 0c       	add	r0, r0
    5282:	88 0b       	sbc	r24, r24
    5284:	99 0b       	sbc	r25, r25
    5286:	0e 5f       	subi	r16, 0xFE	; 254
    5288:	1f 4f       	sbci	r17, 0xFF	; 255
    528a:	f3 2d       	mov	r31, r3
    528c:	ff 76       	andi	r31, 0x6F	; 111
    528e:	3f 2e       	mov	r3, r31
    5290:	97 ff       	sbrs	r25, 7
    5292:	09 c0       	rjmp	.+18     	; 0x52a6 <vfprintf+0x212>
    5294:	90 95       	com	r25
    5296:	80 95       	com	r24
    5298:	70 95       	com	r23
    529a:	61 95       	neg	r22
    529c:	7f 4f       	sbci	r23, 0xFF	; 255
    529e:	8f 4f       	sbci	r24, 0xFF	; 255
    52a0:	9f 4f       	sbci	r25, 0xFF	; 255
    52a2:	f0 68       	ori	r31, 0x80	; 128
    52a4:	3f 2e       	mov	r3, r31
    52a6:	2a e0       	ldi	r18, 0x0A	; 10
    52a8:	30 e0       	ldi	r19, 0x00	; 0
    52aa:	a3 01       	movw	r20, r6
    52ac:	0e 94 8d 2a 	call	0x551a	; 0x551a <__ultoa_invert>
    52b0:	88 2e       	mov	r8, r24
    52b2:	86 18       	sub	r8, r6
    52b4:	45 c0       	rjmp	.+138    	; 0x5340 <vfprintf+0x2ac>
    52b6:	85 37       	cpi	r24, 0x75	; 117
    52b8:	31 f4       	brne	.+12     	; 0x52c6 <vfprintf+0x232>
    52ba:	23 2d       	mov	r18, r3
    52bc:	2f 7e       	andi	r18, 0xEF	; 239
    52be:	b2 2e       	mov	r11, r18
    52c0:	2a e0       	ldi	r18, 0x0A	; 10
    52c2:	30 e0       	ldi	r19, 0x00	; 0
    52c4:	25 c0       	rjmp	.+74     	; 0x5310 <vfprintf+0x27c>
    52c6:	93 2d       	mov	r25, r3
    52c8:	99 7f       	andi	r25, 0xF9	; 249
    52ca:	b9 2e       	mov	r11, r25
    52cc:	8f 36       	cpi	r24, 0x6F	; 111
    52ce:	c1 f0       	breq	.+48     	; 0x5300 <vfprintf+0x26c>
    52d0:	18 f4       	brcc	.+6      	; 0x52d8 <vfprintf+0x244>
    52d2:	88 35       	cpi	r24, 0x58	; 88
    52d4:	79 f0       	breq	.+30     	; 0x52f4 <vfprintf+0x260>
    52d6:	b5 c0       	rjmp	.+362    	; 0x5442 <vfprintf+0x3ae>
    52d8:	80 37       	cpi	r24, 0x70	; 112
    52da:	19 f0       	breq	.+6      	; 0x52e2 <vfprintf+0x24e>
    52dc:	88 37       	cpi	r24, 0x78	; 120
    52de:	21 f0       	breq	.+8      	; 0x52e8 <vfprintf+0x254>
    52e0:	b0 c0       	rjmp	.+352    	; 0x5442 <vfprintf+0x3ae>
    52e2:	e9 2f       	mov	r30, r25
    52e4:	e0 61       	ori	r30, 0x10	; 16
    52e6:	be 2e       	mov	r11, r30
    52e8:	b4 fe       	sbrs	r11, 4
    52ea:	0d c0       	rjmp	.+26     	; 0x5306 <vfprintf+0x272>
    52ec:	fb 2d       	mov	r31, r11
    52ee:	f4 60       	ori	r31, 0x04	; 4
    52f0:	bf 2e       	mov	r11, r31
    52f2:	09 c0       	rjmp	.+18     	; 0x5306 <vfprintf+0x272>
    52f4:	34 fe       	sbrs	r3, 4
    52f6:	0a c0       	rjmp	.+20     	; 0x530c <vfprintf+0x278>
    52f8:	29 2f       	mov	r18, r25
    52fa:	26 60       	ori	r18, 0x06	; 6
    52fc:	b2 2e       	mov	r11, r18
    52fe:	06 c0       	rjmp	.+12     	; 0x530c <vfprintf+0x278>
    5300:	28 e0       	ldi	r18, 0x08	; 8
    5302:	30 e0       	ldi	r19, 0x00	; 0
    5304:	05 c0       	rjmp	.+10     	; 0x5310 <vfprintf+0x27c>
    5306:	20 e1       	ldi	r18, 0x10	; 16
    5308:	30 e0       	ldi	r19, 0x00	; 0
    530a:	02 c0       	rjmp	.+4      	; 0x5310 <vfprintf+0x27c>
    530c:	20 e1       	ldi	r18, 0x10	; 16
    530e:	32 e0       	ldi	r19, 0x02	; 2
    5310:	f8 01       	movw	r30, r16
    5312:	b7 fe       	sbrs	r11, 7
    5314:	07 c0       	rjmp	.+14     	; 0x5324 <vfprintf+0x290>
    5316:	60 81       	ld	r22, Z
    5318:	71 81       	ldd	r23, Z+1	; 0x01
    531a:	82 81       	ldd	r24, Z+2	; 0x02
    531c:	93 81       	ldd	r25, Z+3	; 0x03
    531e:	0c 5f       	subi	r16, 0xFC	; 252
    5320:	1f 4f       	sbci	r17, 0xFF	; 255
    5322:	06 c0       	rjmp	.+12     	; 0x5330 <vfprintf+0x29c>
    5324:	60 81       	ld	r22, Z
    5326:	71 81       	ldd	r23, Z+1	; 0x01
    5328:	80 e0       	ldi	r24, 0x00	; 0
    532a:	90 e0       	ldi	r25, 0x00	; 0
    532c:	0e 5f       	subi	r16, 0xFE	; 254
    532e:	1f 4f       	sbci	r17, 0xFF	; 255
    5330:	a3 01       	movw	r20, r6
    5332:	0e 94 8d 2a 	call	0x551a	; 0x551a <__ultoa_invert>
    5336:	88 2e       	mov	r8, r24
    5338:	86 18       	sub	r8, r6
    533a:	fb 2d       	mov	r31, r11
    533c:	ff 77       	andi	r31, 0x7F	; 127
    533e:	3f 2e       	mov	r3, r31
    5340:	36 fe       	sbrs	r3, 6
    5342:	0d c0       	rjmp	.+26     	; 0x535e <vfprintf+0x2ca>
    5344:	23 2d       	mov	r18, r3
    5346:	2e 7f       	andi	r18, 0xFE	; 254
    5348:	a2 2e       	mov	r10, r18
    534a:	89 14       	cp	r8, r9
    534c:	58 f4       	brcc	.+22     	; 0x5364 <vfprintf+0x2d0>
    534e:	34 fe       	sbrs	r3, 4
    5350:	0b c0       	rjmp	.+22     	; 0x5368 <vfprintf+0x2d4>
    5352:	32 fc       	sbrc	r3, 2
    5354:	09 c0       	rjmp	.+18     	; 0x5368 <vfprintf+0x2d4>
    5356:	83 2d       	mov	r24, r3
    5358:	8e 7e       	andi	r24, 0xEE	; 238
    535a:	a8 2e       	mov	r10, r24
    535c:	05 c0       	rjmp	.+10     	; 0x5368 <vfprintf+0x2d4>
    535e:	b8 2c       	mov	r11, r8
    5360:	a3 2c       	mov	r10, r3
    5362:	03 c0       	rjmp	.+6      	; 0x536a <vfprintf+0x2d6>
    5364:	b8 2c       	mov	r11, r8
    5366:	01 c0       	rjmp	.+2      	; 0x536a <vfprintf+0x2d6>
    5368:	b9 2c       	mov	r11, r9
    536a:	a4 fe       	sbrs	r10, 4
    536c:	0f c0       	rjmp	.+30     	; 0x538c <vfprintf+0x2f8>
    536e:	fe 01       	movw	r30, r28
    5370:	e8 0d       	add	r30, r8
    5372:	f1 1d       	adc	r31, r1
    5374:	80 81       	ld	r24, Z
    5376:	80 33       	cpi	r24, 0x30	; 48
    5378:	21 f4       	brne	.+8      	; 0x5382 <vfprintf+0x2ee>
    537a:	9a 2d       	mov	r25, r10
    537c:	99 7e       	andi	r25, 0xE9	; 233
    537e:	a9 2e       	mov	r10, r25
    5380:	09 c0       	rjmp	.+18     	; 0x5394 <vfprintf+0x300>
    5382:	a2 fe       	sbrs	r10, 2
    5384:	06 c0       	rjmp	.+12     	; 0x5392 <vfprintf+0x2fe>
    5386:	b3 94       	inc	r11
    5388:	b3 94       	inc	r11
    538a:	04 c0       	rjmp	.+8      	; 0x5394 <vfprintf+0x300>
    538c:	8a 2d       	mov	r24, r10
    538e:	86 78       	andi	r24, 0x86	; 134
    5390:	09 f0       	breq	.+2      	; 0x5394 <vfprintf+0x300>
    5392:	b3 94       	inc	r11
    5394:	a3 fc       	sbrc	r10, 3
    5396:	11 c0       	rjmp	.+34     	; 0x53ba <vfprintf+0x326>
    5398:	a0 fe       	sbrs	r10, 0
    539a:	06 c0       	rjmp	.+12     	; 0x53a8 <vfprintf+0x314>
    539c:	b2 14       	cp	r11, r2
    539e:	88 f4       	brcc	.+34     	; 0x53c2 <vfprintf+0x32e>
    53a0:	28 0c       	add	r2, r8
    53a2:	92 2c       	mov	r9, r2
    53a4:	9b 18       	sub	r9, r11
    53a6:	0e c0       	rjmp	.+28     	; 0x53c4 <vfprintf+0x330>
    53a8:	b2 14       	cp	r11, r2
    53aa:	60 f4       	brcc	.+24     	; 0x53c4 <vfprintf+0x330>
    53ac:	b6 01       	movw	r22, r12
    53ae:	80 e2       	ldi	r24, 0x20	; 32
    53b0:	90 e0       	ldi	r25, 0x00	; 0
    53b2:	0e 94 51 2a 	call	0x54a2	; 0x54a2 <fputc>
    53b6:	b3 94       	inc	r11
    53b8:	f7 cf       	rjmp	.-18     	; 0x53a8 <vfprintf+0x314>
    53ba:	b2 14       	cp	r11, r2
    53bc:	18 f4       	brcc	.+6      	; 0x53c4 <vfprintf+0x330>
    53be:	2b 18       	sub	r2, r11
    53c0:	02 c0       	rjmp	.+4      	; 0x53c6 <vfprintf+0x332>
    53c2:	98 2c       	mov	r9, r8
    53c4:	21 2c       	mov	r2, r1
    53c6:	a4 fe       	sbrs	r10, 4
    53c8:	10 c0       	rjmp	.+32     	; 0x53ea <vfprintf+0x356>
    53ca:	b6 01       	movw	r22, r12
    53cc:	80 e3       	ldi	r24, 0x30	; 48
    53ce:	90 e0       	ldi	r25, 0x00	; 0
    53d0:	0e 94 51 2a 	call	0x54a2	; 0x54a2 <fputc>
    53d4:	a2 fe       	sbrs	r10, 2
    53d6:	17 c0       	rjmp	.+46     	; 0x5406 <vfprintf+0x372>
    53d8:	a1 fc       	sbrc	r10, 1
    53da:	03 c0       	rjmp	.+6      	; 0x53e2 <vfprintf+0x34e>
    53dc:	88 e7       	ldi	r24, 0x78	; 120
    53de:	90 e0       	ldi	r25, 0x00	; 0
    53e0:	02 c0       	rjmp	.+4      	; 0x53e6 <vfprintf+0x352>
    53e2:	88 e5       	ldi	r24, 0x58	; 88
    53e4:	90 e0       	ldi	r25, 0x00	; 0
    53e6:	b6 01       	movw	r22, r12
    53e8:	0c c0       	rjmp	.+24     	; 0x5402 <vfprintf+0x36e>
    53ea:	8a 2d       	mov	r24, r10
    53ec:	86 78       	andi	r24, 0x86	; 134
    53ee:	59 f0       	breq	.+22     	; 0x5406 <vfprintf+0x372>
    53f0:	a1 fe       	sbrs	r10, 1
    53f2:	02 c0       	rjmp	.+4      	; 0x53f8 <vfprintf+0x364>
    53f4:	8b e2       	ldi	r24, 0x2B	; 43
    53f6:	01 c0       	rjmp	.+2      	; 0x53fa <vfprintf+0x366>
    53f8:	80 e2       	ldi	r24, 0x20	; 32
    53fa:	a7 fc       	sbrc	r10, 7
    53fc:	8d e2       	ldi	r24, 0x2D	; 45
    53fe:	b6 01       	movw	r22, r12
    5400:	90 e0       	ldi	r25, 0x00	; 0
    5402:	0e 94 51 2a 	call	0x54a2	; 0x54a2 <fputc>
    5406:	89 14       	cp	r8, r9
    5408:	38 f4       	brcc	.+14     	; 0x5418 <vfprintf+0x384>
    540a:	b6 01       	movw	r22, r12
    540c:	80 e3       	ldi	r24, 0x30	; 48
    540e:	90 e0       	ldi	r25, 0x00	; 0
    5410:	0e 94 51 2a 	call	0x54a2	; 0x54a2 <fputc>
    5414:	9a 94       	dec	r9
    5416:	f7 cf       	rjmp	.-18     	; 0x5406 <vfprintf+0x372>
    5418:	8a 94       	dec	r8
    541a:	f3 01       	movw	r30, r6
    541c:	e8 0d       	add	r30, r8
    541e:	f1 1d       	adc	r31, r1
    5420:	80 81       	ld	r24, Z
    5422:	b6 01       	movw	r22, r12
    5424:	90 e0       	ldi	r25, 0x00	; 0
    5426:	0e 94 51 2a 	call	0x54a2	; 0x54a2 <fputc>
    542a:	81 10       	cpse	r8, r1
    542c:	f5 cf       	rjmp	.-22     	; 0x5418 <vfprintf+0x384>
    542e:	22 20       	and	r2, r2
    5430:	09 f4       	brne	.+2      	; 0x5434 <vfprintf+0x3a0>
    5432:	42 ce       	rjmp	.-892    	; 0x50b8 <vfprintf+0x24>
    5434:	b6 01       	movw	r22, r12
    5436:	80 e2       	ldi	r24, 0x20	; 32
    5438:	90 e0       	ldi	r25, 0x00	; 0
    543a:	0e 94 51 2a 	call	0x54a2	; 0x54a2 <fputc>
    543e:	2a 94       	dec	r2
    5440:	f6 cf       	rjmp	.-20     	; 0x542e <vfprintf+0x39a>
    5442:	f6 01       	movw	r30, r12
    5444:	86 81       	ldd	r24, Z+6	; 0x06
    5446:	97 81       	ldd	r25, Z+7	; 0x07
    5448:	02 c0       	rjmp	.+4      	; 0x544e <vfprintf+0x3ba>
    544a:	8f ef       	ldi	r24, 0xFF	; 255
    544c:	9f ef       	ldi	r25, 0xFF	; 255
    544e:	2b 96       	adiw	r28, 0x0b	; 11
    5450:	e2 e1       	ldi	r30, 0x12	; 18
    5452:	0c 94 07 2b 	jmp	0x560e	; 0x560e <__epilogue_restores__>

00005456 <strnlen_P>:
    5456:	fc 01       	movw	r30, r24
    5458:	05 90       	lpm	r0, Z+
    545a:	61 50       	subi	r22, 0x01	; 1
    545c:	70 40       	sbci	r23, 0x00	; 0
    545e:	01 10       	cpse	r0, r1
    5460:	d8 f7       	brcc	.-10     	; 0x5458 <strnlen_P+0x2>
    5462:	80 95       	com	r24
    5464:	90 95       	com	r25
    5466:	8e 0f       	add	r24, r30
    5468:	9f 1f       	adc	r25, r31
    546a:	08 95       	ret

0000546c <strnlen>:
    546c:	fc 01       	movw	r30, r24
    546e:	61 50       	subi	r22, 0x01	; 1
    5470:	70 40       	sbci	r23, 0x00	; 0
    5472:	01 90       	ld	r0, Z+
    5474:	01 10       	cpse	r0, r1
    5476:	d8 f7       	brcc	.-10     	; 0x546e <strnlen+0x2>
    5478:	80 95       	com	r24
    547a:	90 95       	com	r25
    547c:	8e 0f       	add	r24, r30
    547e:	9f 1f       	adc	r25, r31
    5480:	08 95       	ret

00005482 <strrev>:
    5482:	dc 01       	movw	r26, r24
    5484:	fc 01       	movw	r30, r24
    5486:	67 2f       	mov	r22, r23
    5488:	71 91       	ld	r23, Z+
    548a:	77 23       	and	r23, r23
    548c:	e1 f7       	brne	.-8      	; 0x5486 <strrev+0x4>
    548e:	32 97       	sbiw	r30, 0x02	; 2
    5490:	04 c0       	rjmp	.+8      	; 0x549a <strrev+0x18>
    5492:	7c 91       	ld	r23, X
    5494:	6d 93       	st	X+, r22
    5496:	70 83       	st	Z, r23
    5498:	62 91       	ld	r22, -Z
    549a:	ae 17       	cp	r26, r30
    549c:	bf 07       	cpc	r27, r31
    549e:	c8 f3       	brcs	.-14     	; 0x5492 <strrev+0x10>
    54a0:	08 95       	ret

000054a2 <fputc>:
    54a2:	0f 93       	push	r16
    54a4:	1f 93       	push	r17
    54a6:	cf 93       	push	r28
    54a8:	df 93       	push	r29
    54aa:	fb 01       	movw	r30, r22
    54ac:	23 81       	ldd	r18, Z+3	; 0x03
    54ae:	21 fd       	sbrc	r18, 1
    54b0:	03 c0       	rjmp	.+6      	; 0x54b8 <fputc+0x16>
    54b2:	8f ef       	ldi	r24, 0xFF	; 255
    54b4:	9f ef       	ldi	r25, 0xFF	; 255
    54b6:	2c c0       	rjmp	.+88     	; 0x5510 <fputc+0x6e>
    54b8:	22 ff       	sbrs	r18, 2
    54ba:	16 c0       	rjmp	.+44     	; 0x54e8 <fputc+0x46>
    54bc:	46 81       	ldd	r20, Z+6	; 0x06
    54be:	57 81       	ldd	r21, Z+7	; 0x07
    54c0:	24 81       	ldd	r18, Z+4	; 0x04
    54c2:	35 81       	ldd	r19, Z+5	; 0x05
    54c4:	42 17       	cp	r20, r18
    54c6:	53 07       	cpc	r21, r19
    54c8:	44 f4       	brge	.+16     	; 0x54da <fputc+0x38>
    54ca:	a0 81       	ld	r26, Z
    54cc:	b1 81       	ldd	r27, Z+1	; 0x01
    54ce:	9d 01       	movw	r18, r26
    54d0:	2f 5f       	subi	r18, 0xFF	; 255
    54d2:	3f 4f       	sbci	r19, 0xFF	; 255
    54d4:	31 83       	std	Z+1, r19	; 0x01
    54d6:	20 83       	st	Z, r18
    54d8:	8c 93       	st	X, r24
    54da:	26 81       	ldd	r18, Z+6	; 0x06
    54dc:	37 81       	ldd	r19, Z+7	; 0x07
    54de:	2f 5f       	subi	r18, 0xFF	; 255
    54e0:	3f 4f       	sbci	r19, 0xFF	; 255
    54e2:	37 83       	std	Z+7, r19	; 0x07
    54e4:	26 83       	std	Z+6, r18	; 0x06
    54e6:	14 c0       	rjmp	.+40     	; 0x5510 <fputc+0x6e>
    54e8:	8b 01       	movw	r16, r22
    54ea:	ec 01       	movw	r28, r24
    54ec:	fb 01       	movw	r30, r22
    54ee:	00 84       	ldd	r0, Z+8	; 0x08
    54f0:	f1 85       	ldd	r31, Z+9	; 0x09
    54f2:	e0 2d       	mov	r30, r0
    54f4:	09 95       	icall
    54f6:	89 2b       	or	r24, r25
    54f8:	e1 f6       	brne	.-72     	; 0x54b2 <fputc+0x10>
    54fa:	d8 01       	movw	r26, r16
    54fc:	16 96       	adiw	r26, 0x06	; 6
    54fe:	8d 91       	ld	r24, X+
    5500:	9c 91       	ld	r25, X
    5502:	17 97       	sbiw	r26, 0x07	; 7
    5504:	01 96       	adiw	r24, 0x01	; 1
    5506:	17 96       	adiw	r26, 0x07	; 7
    5508:	9c 93       	st	X, r25
    550a:	8e 93       	st	-X, r24
    550c:	16 97       	sbiw	r26, 0x06	; 6
    550e:	ce 01       	movw	r24, r28
    5510:	df 91       	pop	r29
    5512:	cf 91       	pop	r28
    5514:	1f 91       	pop	r17
    5516:	0f 91       	pop	r16
    5518:	08 95       	ret

0000551a <__ultoa_invert>:
    551a:	fa 01       	movw	r30, r20
    551c:	aa 27       	eor	r26, r26
    551e:	28 30       	cpi	r18, 0x08	; 8
    5520:	51 f1       	breq	.+84     	; 0x5576 <__ultoa_invert+0x5c>
    5522:	20 31       	cpi	r18, 0x10	; 16
    5524:	81 f1       	breq	.+96     	; 0x5586 <__ultoa_invert+0x6c>
    5526:	e8 94       	clt
    5528:	6f 93       	push	r22
    552a:	6e 7f       	andi	r22, 0xFE	; 254
    552c:	6e 5f       	subi	r22, 0xFE	; 254
    552e:	7f 4f       	sbci	r23, 0xFF	; 255
    5530:	8f 4f       	sbci	r24, 0xFF	; 255
    5532:	9f 4f       	sbci	r25, 0xFF	; 255
    5534:	af 4f       	sbci	r26, 0xFF	; 255
    5536:	b1 e0       	ldi	r27, 0x01	; 1
    5538:	3e d0       	rcall	.+124    	; 0x55b6 <__ultoa_invert+0x9c>
    553a:	b4 e0       	ldi	r27, 0x04	; 4
    553c:	3c d0       	rcall	.+120    	; 0x55b6 <__ultoa_invert+0x9c>
    553e:	67 0f       	add	r22, r23
    5540:	78 1f       	adc	r23, r24
    5542:	89 1f       	adc	r24, r25
    5544:	9a 1f       	adc	r25, r26
    5546:	a1 1d       	adc	r26, r1
    5548:	68 0f       	add	r22, r24
    554a:	79 1f       	adc	r23, r25
    554c:	8a 1f       	adc	r24, r26
    554e:	91 1d       	adc	r25, r1
    5550:	a1 1d       	adc	r26, r1
    5552:	6a 0f       	add	r22, r26
    5554:	71 1d       	adc	r23, r1
    5556:	81 1d       	adc	r24, r1
    5558:	91 1d       	adc	r25, r1
    555a:	a1 1d       	adc	r26, r1
    555c:	20 d0       	rcall	.+64     	; 0x559e <__ultoa_invert+0x84>
    555e:	09 f4       	brne	.+2      	; 0x5562 <__ultoa_invert+0x48>
    5560:	68 94       	set
    5562:	3f 91       	pop	r19
    5564:	2a e0       	ldi	r18, 0x0A	; 10
    5566:	26 9f       	mul	r18, r22
    5568:	11 24       	eor	r1, r1
    556a:	30 19       	sub	r19, r0
    556c:	30 5d       	subi	r19, 0xD0	; 208
    556e:	31 93       	st	Z+, r19
    5570:	de f6       	brtc	.-74     	; 0x5528 <__ultoa_invert+0xe>
    5572:	cf 01       	movw	r24, r30
    5574:	08 95       	ret
    5576:	46 2f       	mov	r20, r22
    5578:	47 70       	andi	r20, 0x07	; 7
    557a:	40 5d       	subi	r20, 0xD0	; 208
    557c:	41 93       	st	Z+, r20
    557e:	b3 e0       	ldi	r27, 0x03	; 3
    5580:	0f d0       	rcall	.+30     	; 0x55a0 <__ultoa_invert+0x86>
    5582:	c9 f7       	brne	.-14     	; 0x5576 <__ultoa_invert+0x5c>
    5584:	f6 cf       	rjmp	.-20     	; 0x5572 <__ultoa_invert+0x58>
    5586:	46 2f       	mov	r20, r22
    5588:	4f 70       	andi	r20, 0x0F	; 15
    558a:	40 5d       	subi	r20, 0xD0	; 208
    558c:	4a 33       	cpi	r20, 0x3A	; 58
    558e:	18 f0       	brcs	.+6      	; 0x5596 <__ultoa_invert+0x7c>
    5590:	49 5d       	subi	r20, 0xD9	; 217
    5592:	31 fd       	sbrc	r19, 1
    5594:	40 52       	subi	r20, 0x20	; 32
    5596:	41 93       	st	Z+, r20
    5598:	02 d0       	rcall	.+4      	; 0x559e <__ultoa_invert+0x84>
    559a:	a9 f7       	brne	.-22     	; 0x5586 <__ultoa_invert+0x6c>
    559c:	ea cf       	rjmp	.-44     	; 0x5572 <__ultoa_invert+0x58>
    559e:	b4 e0       	ldi	r27, 0x04	; 4
    55a0:	a6 95       	lsr	r26
    55a2:	97 95       	ror	r25
    55a4:	87 95       	ror	r24
    55a6:	77 95       	ror	r23
    55a8:	67 95       	ror	r22
    55aa:	ba 95       	dec	r27
    55ac:	c9 f7       	brne	.-14     	; 0x55a0 <__ultoa_invert+0x86>
    55ae:	00 97       	sbiw	r24, 0x00	; 0
    55b0:	61 05       	cpc	r22, r1
    55b2:	71 05       	cpc	r23, r1
    55b4:	08 95       	ret
    55b6:	9b 01       	movw	r18, r22
    55b8:	ac 01       	movw	r20, r24
    55ba:	0a 2e       	mov	r0, r26
    55bc:	06 94       	lsr	r0
    55be:	57 95       	ror	r21
    55c0:	47 95       	ror	r20
    55c2:	37 95       	ror	r19
    55c4:	27 95       	ror	r18
    55c6:	ba 95       	dec	r27
    55c8:	c9 f7       	brne	.-14     	; 0x55bc <__ultoa_invert+0xa2>
    55ca:	62 0f       	add	r22, r18
    55cc:	73 1f       	adc	r23, r19
    55ce:	84 1f       	adc	r24, r20
    55d0:	95 1f       	adc	r25, r21
    55d2:	a0 1d       	adc	r26, r0
    55d4:	08 95       	ret

000055d6 <__prologue_saves__>:
    55d6:	2f 92       	push	r2
    55d8:	3f 92       	push	r3
    55da:	4f 92       	push	r4
    55dc:	5f 92       	push	r5
    55de:	6f 92       	push	r6
    55e0:	7f 92       	push	r7
    55e2:	8f 92       	push	r8
    55e4:	9f 92       	push	r9
    55e6:	af 92       	push	r10
    55e8:	bf 92       	push	r11
    55ea:	cf 92       	push	r12
    55ec:	df 92       	push	r13
    55ee:	ef 92       	push	r14
    55f0:	ff 92       	push	r15
    55f2:	0f 93       	push	r16
    55f4:	1f 93       	push	r17
    55f6:	cf 93       	push	r28
    55f8:	df 93       	push	r29
    55fa:	cd b7       	in	r28, 0x3d	; 61
    55fc:	de b7       	in	r29, 0x3e	; 62
    55fe:	ca 1b       	sub	r28, r26
    5600:	db 0b       	sbc	r29, r27
    5602:	0f b6       	in	r0, 0x3f	; 63
    5604:	f8 94       	cli
    5606:	de bf       	out	0x3e, r29	; 62
    5608:	0f be       	out	0x3f, r0	; 63
    560a:	cd bf       	out	0x3d, r28	; 61
    560c:	09 94       	ijmp

0000560e <__epilogue_restores__>:
    560e:	2a 88       	ldd	r2, Y+18	; 0x12
    5610:	39 88       	ldd	r3, Y+17	; 0x11
    5612:	48 88       	ldd	r4, Y+16	; 0x10
    5614:	5f 84       	ldd	r5, Y+15	; 0x0f
    5616:	6e 84       	ldd	r6, Y+14	; 0x0e
    5618:	7d 84       	ldd	r7, Y+13	; 0x0d
    561a:	8c 84       	ldd	r8, Y+12	; 0x0c
    561c:	9b 84       	ldd	r9, Y+11	; 0x0b
    561e:	aa 84       	ldd	r10, Y+10	; 0x0a
    5620:	b9 84       	ldd	r11, Y+9	; 0x09
    5622:	c8 84       	ldd	r12, Y+8	; 0x08
    5624:	df 80       	ldd	r13, Y+7	; 0x07
    5626:	ee 80       	ldd	r14, Y+6	; 0x06
    5628:	fd 80       	ldd	r15, Y+5	; 0x05
    562a:	0c 81       	ldd	r16, Y+4	; 0x04
    562c:	1b 81       	ldd	r17, Y+3	; 0x03
    562e:	aa 81       	ldd	r26, Y+2	; 0x02
    5630:	b9 81       	ldd	r27, Y+1	; 0x01
    5632:	ce 0f       	add	r28, r30
    5634:	d1 1d       	adc	r29, r1
    5636:	0f b6       	in	r0, 0x3f	; 63
    5638:	f8 94       	cli
    563a:	de bf       	out	0x3e, r29	; 62
    563c:	0f be       	out	0x3f, r0	; 63
    563e:	cd bf       	out	0x3d, r28	; 61
    5640:	ed 01       	movw	r28, r26
    5642:	08 95       	ret

00005644 <_exit>:
    5644:	f8 94       	cli

00005646 <__stop_program>:
    5646:	ff cf       	rjmp	.-2      	; 0x5646 <__stop_program>
